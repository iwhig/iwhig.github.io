<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kubernetes_1.32.4高可用集群部署</title>
      <link href="/2025/05/07/kubernetes-1.32.4-gao-ke-yong-ji-qun-bu-shu/"/>
      <url>/2025/05/07/kubernetes-1.32.4-gao-ke-yong-ji-qun-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="安装一些必备工具"><a href="#安装一些必备工具" class="headerlink" title="安装一些必备工具"></a>安装一些必备工具</h1><pre class="language-SHELL" data-language="SHELL"><code class="language-SHELL">apt update &amp;&amp; apt upgrade -y &amp;&amp; apt install -y wget psmisc vim net-tools telnet lvm2 tar curl ipvsadm</code></pre><h2 id="关闭交换分区-防护墙"><a href="#关闭交换分区-防护墙" class="headerlink" title="关闭交换分区&amp;防护墙"></a>关闭交换分区&amp;防护墙</h2><pre class="language-BASH" data-language="BASH"><code class="language-BASH">sed -ri 's/.*swap.*/#&amp;/' /etc/fstabswapoff -a &amp;&amp; sysctl -w vm.swappiness=0cat /etc/fstabsystemctl disable ufw --now &amp;&amp; systemctl stop ufw </code></pre><h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 服务端</span><span class="token comment"># yum install chrony -y</span><span class="token function">apt</span> <span class="token function">install</span> chrony <span class="token parameter variable">-y</span><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/chrony.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOF pool ntp.aliyun.com iburstdriftfile /var/lib/chrony/driftmakestep 1.0 3rtcsyncallow 192.168.1.0/24local stratum 10keyfile /etc/chrony.keysleapsectz right/UTClogdir /var/log/chronyEOF</span>systemctl restart chronyd <span class="token punctuation">;</span> systemctl <span class="token builtin class-name">enable</span> chronyd <span class="token parameter variable">--now</span><span class="token comment"># 客户端</span><span class="token comment"># yum install chrony -y</span><span class="token function">apt</span> <span class="token function">install</span> chrony <span class="token parameter variable">-y</span><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/chrony.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOF pool 192.168.1.21 iburstdriftfile /var/lib/chrony/driftmakestep 1.0 3rtcsynckeyfile /etc/chrony.keysleapsectz right/UTClogdir /var/log/chronyEOF</span>systemctl restart chronyd <span class="token punctuation">;</span> systemctl <span class="token builtin class-name">enable</span> chronyd <span class="token parameter variable">--now</span><span class="token comment">#使用客户端进行验证</span>chronyc sources <span class="token parameter variable">-v</span></code></pre><p>参数解释</p><ol><li><p><code>pool ntp.aliyun.com iburst</code></p><p>#指定使用ntp.aliyun.com作为时间服务器池，iburst选项表示在初始同步时会发送多个请求以加快同步速度。</p></li><li><p><code>driftfile /var/lib/chrony/drift</code></p><p>#指定用于保存时钟漂移信息的文件路径。</p></li><li><p><code>makestep 1.0 3</code></p><p>#设置当系统时间与服务器时间偏差大于1秒时，会以1秒的步长进行调整。如果偏差超过3秒，则立即进行时间调整。</p></li><li><p><code>rtcsync</code></p><p>#启用硬件时钟同步功能，可以提高时钟的准确性。</p></li><li><p><code>allow 192.168.0.0/24</code></p><p>#允许192.168.0.0/24网段范围内的主机与chrony进行时间同步。</p></li><li><p><code>local stratum 10</code></p><p>#将本地时钟设为stratum 10，stratum值表示时钟的准确度，值越小表示准确度越高。</p></li><li><p><code>keyfile /etc/chrony.keys</code></p><p>#指定使用的密钥文件路径，用于对时间同步进行身份验证。</p></li><li><p><code>leapsectz right/UTC</code></p><p>#指定时区为UTC。</p></li><li><p><code>logdir /var/log/chrony</code></p><p>#指定日志文件存放目录。</p></li></ol><h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#yum install -y sshpass</span><span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> sshpassssh-keygen <span class="token parameter variable">-f</span> /root/.ssh/id_rsa <span class="token parameter variable">-P</span> <span class="token string">''</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">IP</span><span class="token operator">=</span><span class="token string">"192.168.1.21 192.168.1.22 192.168.1.23 192.168.1.24 192.168.1.25"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">SSHPASS</span><span class="token operator">=</span><span class="token number">123123</span><span class="token keyword">for</span> <span class="token for-or-select variable">HOST</span> <span class="token keyword">in</span> <span class="token variable">$IP</span><span class="token punctuation">;</span><span class="token keyword">do</span>  sshpass <span class="token parameter variable">-e</span> ssh-copy-id <span class="token parameter variable">-o</span> <span class="token assign-left variable">StrictHostKeyChecking</span><span class="token operator">=</span>no <span class="token variable">$HOST</span><span class="token keyword">done</span></code></pre><p>这段脚本的作用是在一台机器上安装sshpass工具，并通过sshpass自动将本机的SSH公钥复制到多个远程主机上，以实现无需手动输入密码的SSH登录。<br>具体解释如下：</p><ol><li><code>apt install -y sshpass</code> 或 <code>yum install -y sshpass</code>：通过包管理器（apt或yum）安装sshpass工具，使得后续可以使用sshpass命令。</li><li><code>ssh-keygen -f /root/.ssh/id_rsa -P ''</code>：生成SSH密钥对。该命令会在/root/.ssh目录下生成私钥文件id_rsa和公钥文件id_rsa.pub，同时不设置密码（即-P参数后面为空），方便后续通过ssh-copy-id命令自动复制公钥。</li><li><code>export IP="192.168.1.21 192.168.1.22 192.168.1.23 192.168.1.24 192.168.1.25"</code>：设置一个包含多个远程主机IP地址的环境变量IP，用空格分隔开，表示要将SSH公钥复制到这些远程主机上。</li><li><code>export SSHPASS=123123</code>：设置环境变量SSHPASS，将sshpass所需的SSH密码（在这里是”123123”）赋值给它，这样sshpass命令可以自动使用这个密码进行登录。</li><li><code>for HOST in$IP;do</code>：遍历环境变量IP中的每个IP地址，并将当前IP地址赋值给变量HOST。</li><li><code>sshpass -e ssh-copy-id -o StrictHostKeyChecking=no $HOST</code>：使用sshpass工具复制本机的SSH公钥到远程主机。其中，-e选项表示使用环境变量中的密码（即SSHPASS）进行登录，-o StrictHostKeyChecking=no 选项表示连接时不检查远程主机的公钥，以避免交互式确认。</li><li>通过这段脚本，可以方便地将本机的SSH公钥复制到多个远程主机上，实现无需手动输入密码的SSH登录。</li></ol><h2 id="配置ulimit"><a href="#配置ulimit" class="headerlink" title="配置ulimit"></a>配置ulimit</h2><pre class="language-BASH" data-language="BASH"><code class="language-BASH">ulimit -SHn 65535cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOFsoft nofile 655360hard nofile 131072soft nproc 655350hard nproc 655350seft memlock unlimitedhard memlock unlimiteddEOF</code></pre><h1 id="所有节点hosts配置"><a href="#所有节点hosts配置" class="headerlink" title="所有节点hosts配置"></a>所有节点hosts配置</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/hosts <span class="token operator">&lt;&lt;</span><span class="token string">EOF127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.1.21 k8s-master01192.168.1.22 k8s-master02192.168.1.23 k8s-master03192.168.1.24 k8s-node01192.168.1.25 k8s-node02192.168.1.36 lb-vipEOF</span></code></pre><h1 id="安装ipvsadm"><a href="#安装ipvsadm" class="headerlink" title="安装ipvsadm"></a>安装ipvsadm</h1><pre class="language-BASH" data-language="BASH"><code class="language-BASH">apt install ipvsadm ipset sysstat conntrack -ycat &gt;&gt; /etc/modules-load.d/ipvs.conf &lt;&lt;EOFip_vsip_vs_rrip_vs_wrrip_vs_shnf_conntrackip_tablesip_setxt_setipt_setipt_rpfilteript_REJECTipipEOFsystemctl restart systemd-modules-load.servicelsmod | grep -e ip_vs -e nf_conntrack</code></pre><p>参数解释</p><ul><li><code>ip_vs</code><ul><li>IPVS 是 Linux 内核中的一个模块，用于实现负载均衡和高可用性。它通过在前端代理服务器上分发传入请求到后端实际服务器上，提供了高性能和可扩展的网络服务。</li></ul></li><li><code>ip_vs_rr</code><ul><li>IPVS 的一种调度算法之一，使用轮询方式分发请求到后端服务器，每个请求按顺序依次分发。</li></ul></li><li><code>ip_vs_wrr</code><ul><li>IPVS 的一种调度算法之一，使用加权轮询方式分发请求到后端服务器，每个请求按照指定的权重比例分发。</li></ul></li><li><code>ip_vs_sh</code><ul><li>IPVS 的一种调度算法之一，使用哈希方式根据源 IP 地址和目标 IP 地址来分发请求。</li></ul></li><li><code>nf_conntrack</code><ul><li>这是一个内核模块，用于跟踪和管理网络连接，包括 TCP、UDP 和 ICMP 等协议。它是实现防火墙状态跟踪的基础。</li></ul></li><li><code>ip_tables</code><ul><li>这是一个内核模块，提供了对 Linux 系统 IP 数据包过滤和网络地址转换（NAT）功能的支持。</li></ul></li><li><code>ip_set</code><ul><li>这是一个内核模块，扩展了 iptables 的功能，支持更高效的 IP 地址集合操作。</li></ul></li><li><code>xt_set</code><ul><li>这是一个内核模块，扩展了 iptables 的功能，支持更高效的数据包匹配和操作。</li></ul></li><li><code>ipt_set</code><ul><li>这是一个用户空间工具，用于配置和管理 xt_set 内核模块。</li></ul></li><li><code>ipt_rpfilter</code><ul><li>这是一个内核模块，用于实现反向路径过滤，用于防止 IP 欺骗和 DDoS 攻击。</li></ul></li><li><code>ipt_REJECT</code><ul><li>这是一个 iptables 目标，用于拒绝 IP 数据包，并向发送方发送响应，指示数据包被拒绝。</li></ul></li><li><code>ipip</code><ul><li>这是一个内核模块，用于实现 IP 封装在 IP（IP-over-IP）的隧道功能。它可以在不同网络之间创建虚拟隧道来传输 IP 数据包。</li></ul></li></ul><h1 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h1><pre class="language-BASH" data-language="BASH"><code class="language-BASH">cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.confnet.ipv4.ip_forward = 1net.bridge.bridge-nf-call-iptables = 1fs.may_detach_mounts = 1vm.overcommit_memory=1vm.panic_on_oom=0fs.inotify.max_user_watches=89100fs.file-max=52706963fs.nr_open=52706963net.netfilter.nf_conntrack_max=2310720net.ipv4.tcp_keepalive_time = 600net.ipv4.tcp_keepalive_probes = 3net.ipv4.tcp_keepalive_intvl =15net.ipv4.tcp_max_tw_buckets = 36000net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_max_orphans = 327680net.ipv4.tcp_orphan_retries = 3net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.ip_conntrack_max = 65536net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.tcp_timestamps = 0net.core.somaxconn = 16384net.ipv6.conf.all.disable_ipv6 = 0net.ipv6.conf.default.disable_ipv6 = 0net.ipv6.conf.lo.disable_ipv6 = 0net.ipv6.conf.all.forwarding = 1EOFsysctl --system</code></pre><p>这些是Linux系统的一些参数设置，用于配置和优化网络、文件系统和虚拟内存等方面的功能。以下是每个参数的详细解释：</p><ol><li>net.ipv4.ip_forward = 1</li></ol><ul><li><strong>这个参数启用了IPv4的IP转发功能，允许服务器作为网络路由器转发数据包。</strong></li></ul><ol start="2"><li>net.bridge.bridge-nf-call-iptables = 1</li></ol><ul><li><strong>当使用网络桥接技术时，将数据包传递到iptables进行处理。</strong></li></ul><ol start="3"><li>fs.may_detach_mounts = 1</li></ol><ul><li><strong>允许在挂载文件系统时，允许被其他进程使用。</strong></li></ul><ol start="4"><li>vm.overcommit_memory=1</li></ol><ul><li><strong>该设置允许原始的内存过量分配策略，当系统的内存已经被完全使用时，系统仍然会分配额外的内存。</strong></li></ul><ol start="5"><li>vm.panic_on_oom=0</li></ol><ul><li><strong>当系统内存不足（OOM）时，禁用系统崩溃和重启。</strong></li></ul><ol start="6"><li>fs.inotify.max_user_watches=89100</li></ol><ul><li><strong>设置系统允许一个用户的inotify实例可以监控的文件数目的上限。</strong></li></ul><ol start="7"><li>fs.file-max=52706963</li></ol><ul><li><strong>设置系统同时打开的文件数的上限。</strong></li></ul><ol start="8"><li>fs.nr_open=52706963</li></ol><ul><li><strong>设置系统同时打开的文件描述符数的上限。</strong></li></ul><ol start="9"><li>net.netfilter.nf_conntrack_max=2310720</li></ol><ul><li><strong>设置系统可以创建的网络连接跟踪表项的最大数量。</strong></li></ul><ol start="10"><li>net.ipv4.tcp_keepalive_time = 600</li></ol><ul><li><strong>设置TCP套接字的空闲超时时间（秒），超过该时间没有活动数据时，内核会发送心跳包。</strong></li></ul><ol start="11"><li>net.ipv4.tcp_keepalive_probes = 3</li></ol><ul><li><strong>设置未收到响应的TCP心跳探测次数。</strong></li></ul><ol start="12"><li>net.ipv4.tcp_keepalive_intvl = 15</li></ol><ul><li><strong>设置TCP心跳探测的时间间隔（秒）。</strong></li></ul><ol start="13"><li>net.ipv4.tcp_max_tw_buckets = 36000</li></ol><ul><li><strong>设置系统可以使用的TIME_WAIT套接字的最大数量。</strong></li></ul><ol start="14"><li>net.ipv4.tcp_tw_reuse = 1</li></ol><ul><li><strong>启用TIME_WAIT套接字的重新利用，允许新的套接字使用旧的TIME_WAIT套接字。</strong></li></ul><ol start="15"><li>net.ipv4.tcp_max_orphans = 327680</li></ol><ul><li><strong>设置系统可以同时存在的TCP套接字垃圾回收包裹数的最大数量。</strong></li></ul><ol start="16"><li>net.ipv4.tcp_orphan_retries = 3</li></ol><ul><li><strong>设置系统对于孤立的TCP套接字的重试次数。</strong></li></ul><ol start="17"><li>net.ipv4.tcp_syncookies = 1</li></ol><ul><li><strong>启用TCP SYN cookies保护，用于防止SYN洪泛攻击。</strong></li></ul><ol start="18"><li>net.ipv4.tcp_max_syn_backlog = 16384</li></ol><ul><li><strong>设置新的TCP连接的半连接数（半连接队列）的最大长度。</strong></li></ul><ol start="19"><li>net.ipv4.ip_conntrack_max = 65536</li></ol><ul><li><strong>设置系统可以创建的网络连接跟踪表项的最大数量。</strong></li></ul><ol start="20"><li>net.ipv4.tcp_timestamps = 0</li></ol><ul><li><strong>关闭TCP时间戳功能，用于提供更好的安全性。</strong></li></ul><ol start="21"><li>net.core.somaxconn = 16384</li></ol><ul><li><strong>设置系统核心层的连接队列的最大值。</strong></li></ul><ol start="22"><li>net.ipv6.conf.all.disable_ipv6 = 0</li></ol><ul><li><strong>启用IPv6协议。</strong></li></ul><ol start="23"><li>net.ipv6.conf.default.disable_ipv6 = 0</li></ol><ul><li><strong>启用IPv6协议。</strong></li></ul><ol start="24"><li>net.ipv6.conf.lo.disable_ipv6 = 0</li></ol><ul><li><strong>启用IPv6协议。</strong></li></ul><ol start="25"><li>net.ipv6.conf.all.forwarding = 1</li></ol><ul><li><strong>允许IPv6数据包转发。</strong></li></ul><h1 id="配置kubernetes安装源Debian-Ubuntu在配置中添加镜像（注意修改为自己需要的版本号）："><a href="#配置kubernetes安装源Debian-Ubuntu在配置中添加镜像（注意修改为自己需要的版本号）：" class="headerlink" title="配置kubernetes安装源Debian / Ubuntu在配置中添加镜像（注意修改为自己需要的版本号）："></a>配置kubernetes安装源Debian / Ubuntu在配置中添加镜像（注意修改为自己需要的版本号）：</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg</span><span class="token comment">#cat &lt;&lt;EOF | tee /etc/apt/sources.list.d/kubernetes.list</span><span class="token comment">#deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://mirrors.tuna.tsinghua.edu.cn/kubernetes/core:/stable:/v1.33/deb/ /</span><span class="token comment">##deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://mirrors.tuna.tsinghua.edu.cn/kubernetes/addons:/cri-o:/stable:/v1.33/deb/ /</span><span class="token comment">#EOF</span><span class="token comment">#安装必要应用：</span><span class="token comment">#apt-get update</span><span class="token comment">#apt-get install -y kubelet kubeadm kubectl</span><span class="token comment">#systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><span class="token comment">#如安装指定版本</span><span class="token comment">#apt install kubelet=1.33.0-1.1 kubeadm=1.33.0-1.1 kubectl=1.33.0-1.1</span><span class="token comment">#阿里源</span><span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> apt-transport-https<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.32/deb/Release.key <span class="token operator">|</span>  gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /etc/apt/keyrings/kubernetes-apt-keyring.gpg<span class="token builtin class-name">echo</span> <span class="token string">"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.32/deb/ /"</span> <span class="token operator">|</span>    <span class="token function">tee</span> /etc/apt/sources.list.d/kubernetes.list<span class="token comment">#如安装指定版本</span><span class="token function">apt-get</span> update<span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token assign-left variable">kubelet</span><span class="token operator">=</span><span class="token number">1.32</span>.4-1.1  <span class="token assign-left variable">kubeadm</span><span class="token operator">=</span><span class="token number">1.32</span>.4-1.1  <span class="token assign-left variable">kubectl</span><span class="token operator">=</span><span class="token number">1.32</span>.4-1.1 systemctl <span class="token builtin class-name">enable</span> kubelet <span class="token operator">&amp;&amp;</span> systemctl start kubelet</code></pre><h1 id="安装Containerd作为Runtime"><a href="#安装Containerd作为Runtime" class="headerlink" title="安装Containerd作为Runtime"></a>安装Containerd作为Runtime</h1><p><del>#<a href="https://github.com/containernetworking/plugins/releases/">https://github.com/containernetworking/plugins/releases/</a><br>wget <a href="https://github.com/containernetworking/plugins/releases/download/v1.7.1/cni-plugins-linux-amd64-v1.7.1.tgz">https://github.com/containernetworking/plugins/releases/download/v1.7.1/cni-plugins-linux-amd64-v1.7.1.tgz</a><br>#创建cni插件所需目录<br>mkdir -p /etc/cni/net.d /opt/cni/bin<br>#解压cni二进制包<br>tar -xvf cni-plugins-linux-amd64-v*.tgz -C /opt/cni/bin/</del></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#https://github.com/containerd/containerd/releases/</span><span class="token function">wget</span> https://github.com/containerd/containerd/releases/download/v2.0.0/containerd-2.0.0-linux-amd64.tar.gz<span class="token comment">#解压</span><span class="token function">tar</span> <span class="token parameter variable">-xzf</span> containerd-*-linux-amd64.tar.gz <span class="token parameter variable">-C</span> /usr/local/</code></pre><h4 id="创建服务启动文件"><a href="#创建服务启动文件" class="headerlink" title="创建服务启动文件"></a>创建服务启动文件</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/systemd/system/containerd.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF[Unit]Description=containerd container runtimeDocumentation=https://containerd.ioAfter=network.target local-fs.target[Service]ExecStartPre=-/sbin/modprobe overlayExecStart=/usr/local/bin/containerdType=notifyDelegate=yesKillMode=processRestart=alwaysRestartSec=5LimitNPROC=infinityLimitCORE=infinityLimitNOFILE=infinityTasksMax=infinityOOMScoreAdjust=-999[Install]WantedBy=multi-user.targetEOF</span></code></pre><p>参数解释：<br>#这是一个用于启动containerd容器运行时的systemd unit文件。下面是对该文件不同部分的详细解释：<br>#[Unit]<br>#Description=containerd container runtime<br>#描述该unit的作用是作为containerd容器运行时。<br>#Documentation=<a href="https://containerd.io/">https://containerd.io</a><br>#指向容器运行时的文档的URL。<br>#After=network.targetlocal-fs.target<br>#定义了在哪些依赖项之后该unit应该被启动。在网络和本地文件系统加载完成后启动，确保了容器运行时在这些依赖项可用时才会启动。<br>#[Service]<br>#ExecStartPre=-/sbin/modprobe overlay<br>#在启动containerd之前执行的命令。这里的命令是尝试加载内核的overlay模块，如果失败则忽略错误继续执行下面的命令。<br>#ExecStart=/usr/local/bin/containerd<br>#实际执行的命令，用于启动containerd容器运行时。<br>#Type=notify<br>#指定服务的通知类型。这里使用notify类型，表示当服务就绪时会通过通知的方式告知systemd。<br>#Delegate=yes<br>#允许systemd对此服务进行重启和停止操作。<br>#KillMode=process<br>#在终止容器运行时时使用的kill模式。这里使用process模式，表示通过终止进程来停止容器运行时。<br>#Restart=always<br>#定义了当容器运行时终止后的重启策略。这里设置为always，表示无论何时终止容器运行时，都会自动重新启动。<br>#RestartSec=5<br>#在容器运行时终止后重新启动之前等待的秒数。<br>#LimitNPROC=infinity<br>#指定容器运行时可以使用的最大进程数量。这里设置为无限制。<br>#LimitCORE=infinity<br>#指定容器运行时可以使用的最大CPU核心数量。这里设置为无限制。<br>#LimitNOFILE=infinity<br>#指定容器运行时可以打开的最大文件数。这里设置为无限制。<br>#TasksMax=infinity<br>#指定容器运行时可以创建的最大任务数。这里设置为无限制。<br>#OOMScoreAdjust=-999<br>#指定容器运行时的OOM（Out-Of-Memory）分数调整值。负数值表示容器运行时的优先级较高。<br>#[Install]<br>#WantedBy=multi-user.target<br>#定义了服务的安装位置。这里指定为multi-user.target，表示将服务安装为多用户模式下的启动项。</p><h4 id="配置Containerd所需的模块"><a href="#配置Containerd所需的模块" class="headerlink" title="配置Containerd所需的模块"></a>配置Containerd所需的模块</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/modules-load.d/containerd.conf</span>overlaybr_netfilterEOF</span></code></pre><p>参数解释：</p><ul><li>containerd是一个容器运行时，用于管理和运行容器。它支持多种不同的参数配置来自定义容器运行时的行为和功能。</li></ul><ol><li><p>overlay：overlay是容器默认使用的存储驱动，它提供了一种轻量级的、可堆叠的、逐层增量的文件系统。它通过在现有文件系统上叠加文件系统层来创建容器的文件系统视图。每个容器可以有自己的一组文件系统层，这些层可以共享基础镜像中的文件，并在容器内部进行修改。使用overlay可以有效地使用磁盘空间，并使容器更加轻量级。</p></li><li><p>br_netfilter：br_netfilter是Linux内核提供的一个网络过滤器模块，用于在容器网络中进行网络过滤和NAT转发。当容器和主机之间的网络通信需要进行DNAT或者SNAT时，br_netfilter模块可以将IP地址进行转换。它还可以提供基于iptables规则的网络过滤功能，用于限制容器之间或容器与外部网络之间的通信。</p></li></ol><p>这些参数可以在containerd的配置文件或者命令行中指定。例如，可以通过设置–storage-driver参数来选择使用overlay作为存储驱动，通过设置–iptables参数来启用或禁用br_netfilter模块。具体的使用方法和配置细节可以参考containerd的官方文档。</p><h4 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h4><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl restart systemd-modules-load.service</code></pre><p>参数解释：</p><ul><li><code>systemctl</code>: 是Linux系统管理服务的命令行工具，可以管理systemd init系统。</li><li><code>restart</code>: 是systemctl命令的一个选项，用于重新启动服务。</li><li><code>systemd-modules-load.service</code>: 是一个系统服务，用于加载内核模块。</li></ul><p>将上述参数结合在一起来解释<code>systemctl restart systemd-modules-load.service</code>的含义：<br>这个命令用于重新启动系统服务<code>systemd-modules-load.service</code>，它是负责加载内核模块的服务。在重新启动该服务后，系统会重新加载所有的内核模块。</p><h4 id="配置Containerd所需的内核"><a href="#配置Containerd所需的内核" class="headerlink" title="配置Containerd所需的内核"></a>配置Containerd所需的内核</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/sysctl.d/99-kubernetes-cri.conf</span>net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward  = 1net.bridge.bridge-nf-call-ip6tables = 1EOF</span><span class="token comment">#加载内核</span><span class="token function">sysctl</span> <span class="token parameter variable">--system</span></code></pre><p>参数解释：<br>这些参数是Linux操作系统中用于网络和网络桥接设置的参数。</p><ul><li><p>net.bridge.bridge-nf-call-iptables：这个参数控制网络桥接设备是否调用iptables规则处理网络数据包。当该参数设置为1时，网络数据包将被传递到iptables进行处理；当该参数设置为0时，网络数据包将绕过iptables直接传递。默认情况下，这个参数的值是1，即启用iptables规则处理网络数据包。</p></li><li><p>net.ipv4.ip_forward：这个参数用于控制是否启用IP转发功能。IP转发使得操作系统可以将接收到的数据包从一个网络接口转发到另一个网络接口。当该参数设置为1时，启用IP转发功能；当该参数设置为0时，禁用IP转发功能。在网络环境中，通常需要启用IP转发功能来实现不同网络之间的通信。默认情况下，这个参数的值是0，即禁用IP转发功能。</p></li><li><p>net.bridge.bridge-nf-call-ip6tables：这个参数与net.bridge.bridge-nf-call-iptables类似，但是它用于IPv6数据包的处理。当该参数设置为1时，IPv6数据包将被传递到ip6tables进行处理；当该参数设置为0时，IPv6数据包将绕过ip6tables直接传递。默认情况下，这个参数的值是1，即启用ip6tables规则处理IPv6数据包。</p></li></ul><p>这些参数的值可以通过修改操作系统的配置文件（通常是’/etc/sysctl.conf’）来进行设置。修改完成后，需要使用’sysctl -p’命令重载配置文件使参数生效。</p><p>参数解释：<br>这段代码是用于修改并配置containerd的参数。</p><ol><li>首先使用命令<code>mkdir -p /etc/containerd</code>创建/etc/containerd目录，如果该目录已存在，则不进行任何操作。</li><li>使用命令<code>containerd config default | tee /etc/containerd/config.toml</code>创建默认配置文件，并将输出同时传递给/etc/containerd/config.toml文件。</li><li>使用sed命令修改/etc/containerd/config.toml文件，将SystemdCgroup参数的值从false改为true。-i参数表示直接在原文件中进行编辑。</li><li>使用cat命令结合grep命令查看/etc/containerd/config.toml文件中SystemdCgroup参数的值是否已修改为true。</li><li>使用sed命令修改/etc/containerd/config.toml文件，将registry.k8s.io的地址替换为m.daocloud.io/registry.k8s.io。-i参数表示直接在原文件中进行编辑。</li><li>使用cat命令结合grep命令查看/etc/containerd/config.toml文件中sandbox_image参数的值是否已修改为m.daocloud.io/registry.k8s.io。</li><li>使用sed命令修改/etc/containerd/config.toml文件，将config_path参数的值从””改为”/etc/containerd/certs.d”。-i参数表示直接在原文件中进行编辑。</li><li>使用cat命令结合grep命令查看/etc/containerd/config.toml文件中certs.d参数的值是否已修改为/etc/containerd/certs.d。</li><li>使用mkdir命令创建/etc/containerd/certs.d/docker.io目录，如果目录已存在，则不进行任何操作。-p参数表示创建目录时，如果父级目录不存在，则自动创建父级目录。</li><li>最后，使用cat重定向操作符将内容写入/etc/containerd/certs.d/docker.io/hosts.toml文件。该文件会配置加速器，其中server参数设置为”<a href="https://docker.io" ,host参数设置为"https="" hub-mirror.c.163.com%22%ef%bc%8c%e5%b9%b6%e6%b7%bb%e5%8a%a0capabilities%e5%8f%82%e6%95%b0%e3%80%82"="">https://docker.io"，host参数设置为"https://hub-mirror.c.163.com"，并添加capabilities参数。</a></li></ol><p><del>#创建cni插件所需目录<br>mkdir -p /etc/cni/net.d /opt/cni/bin<br>#解压cni二进制包<br>tar xf cni-plugins-linux-amd64-v*.tgz -C /opt/cni/bin/<br>mkdir -p /etc/containerd</del></p><h4 id="创建Containerd的配置文件"><a href="#创建Containerd的配置文件" class="headerlink" title="创建Containerd的配置文件"></a>创建Containerd的配置文件</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建默认配置文件</span>containerd config default <span class="token operator">|</span> <span class="token function">tee</span> /etc/containerd/config.toml<span class="token comment">#修改Containerd的配置文件</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">"s#SystemdCgroup\ \=\ false#SystemdCgroup\ \=\ true#g"</span> /etc/containerd/config.toml<span class="token function">cat</span> /etc/containerd/config.toml <span class="token operator">|</span> <span class="token function">grep</span> SystemdCgroup<span class="token comment">#沙箱pause镜像</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s#registry.k8s.io#registry.aliyuncs.com/google_containers#g"</span> /etc/containerd/config.toml<span class="token function">cat</span> /etc/containerd/config.toml <span class="token operator">|</span> <span class="token function">grep</span> sandbox</code></pre><h4 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/containerd/config.toml <span class="token operator">|</span> <span class="token function">grep</span> certs.d <span class="token parameter variable">-C</span> <span class="token number">5</span>  <span class="token punctuation">[</span>plugins.<span class="token string">'io.containerd.cri.v1.images'</span>.pinned_images<span class="token punctuation">]</span>   sandbox <span class="token operator">=</span> <span class="token string">'registry.aliyuncs.com/chenby/pause:3.10'</span>  <span class="token punctuation">[</span>plugins.<span class="token string">'io.containerd.cri.v1.images'</span>.registry<span class="token punctuation">]</span>   config_path <span class="token operator">=</span> <span class="token string">'/etc/containerd/certs.d'</span>  <span class="token punctuation">[</span>plugins.<span class="token string">'io.containerd.cri.v1.images'</span>.image_decryption<span class="token punctuation">]</span>   key_model <span class="token operator">=</span> <span class="token string">'node'</span> <span class="token punctuation">[</span>plugins.<span class="token string">'io.containerd.cri.v1.runtime'</span><span class="token punctuation">]</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /etc/containerd/certs.d/docker.io <span class="token parameter variable">-pv</span><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/containerd/certs.d/docker.io/hosts.toml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFserver = "https://docker.io"[host."https://docker.1ms.run"]  capabilities = ["pull", "resolve"][host."https://dockerproxy.com/"]  capabilities = ["pull", "resolve"]EOF</span></code></pre><ul><li>SystemdCgroup参数是containerd中的一个配置参数，用于设置containerd在运行过程中使用的Cgroup（控制组）路径。Containerd使用SystemdCgroup参数来指定应该使用哪个Cgroup来跟踪和管理容器的资源使用。</li><li>Cgroup是Linux内核提供的一种资源隔离和管理机制，可以用于限制、分配和监控进程组的资源使用。使用Cgroup，可以将容器的资源限制和隔离，以防止容器之间的资源争用和不公平的竞争。</li><li>通过设置SystemdCgroup参数，可以确保containerd能够找到正确的Cgroup路径，并正确地限制和隔离容器的资源使用，确保容器可以按照预期的方式运行。如果未正确设置SystemdCgroup参数，可能会导致容器无法正确地使用资源，或者无法保证资源的公平分配和隔离。</li></ul><p>SystemdCgroup参数的作用是为了确保containerd能够正确地管理容器的资源使用，以实现资源的限制、隔离和公平分配。</p><p>启动并设置为开机启动</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload<span class="token comment">#用于重新加载systemd管理的单位文件。当你新增或修改了某个单位文件（如.service文件、.socket文件等），需要运行该命令来刷新systemd对该文件的配置。</span>systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> containerd.service<span class="token comment">#启用并立即启动docker.service单元。docker.service是Docker守护进程的systemd服务单元。</span>systemctl stop containerd.service<span class="token comment">#停止运行中的docker.service单元，即停止Docker守护进程。</span>systemctl start containerd.service<span class="token comment">#启动docker.service单元，即启动Docker守护进程。</span>systemctl restart containerd.service<span class="token comment">#重启docker.service单元，即重新启动Docker守护进程。</span>systemctl status containerd.service<span class="token comment">#显示docker.service单元的当前状态，包括运行状态、是否启用等信息。</span></code></pre><p>配置crictl客户端连接的运行时位置<br>#<a href="https://github.com/kubernetes-sigs/cri-tools/releases/">https://github.com/kubernetes-sigs/cri-tools/releases/</a><br>wget <a href="https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.33.0/crictl-v1.33.0-linux-amd64.tar.gz">https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.33.0/crictl-v1.33.0-linux-amd64.tar.gz</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#解压</span><span class="token function">tar</span> xf crictl-v*-linux-amd64.tar.gz <span class="token parameter variable">-C</span> /usr/bin/<span class="token comment">#生成配置文件</span><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/crictl.yaml <span class="token operator">&lt;&lt;</span><span class="token string">EOFruntime-endpoint: unix:///run/containerd/containerd.sockimage-endpoint: unix:///run/containerd/containerd.socktimeout: 10debug: falseEOF</span><span class="token comment">#测试</span>systemctl restart containerdcrictl info</code></pre><p>#下面是参数<code>crictl</code>的详细解释<br>#<code>crictl</code>是一个用于与容器运行时通信的命令行工具。它是容器运行时接口（CRI）工具的一个实现，可以对容器运行时进行管理和操作。</p><ol><li><p><code>runtime-endpoint: unix:///run/containerd/containerd.sock</code><br>#指定容器运行时的终端套接字地址。在这个例子中，指定的地址是<code>unix:///run/containerd/containerd.sock</code>，这是一个Unix域套接字地址。</p></li><li><p><code>image-endpoint: unix:///run/containerd/containerd.sock</code><br>#指定容器镜像服务的终端套接字地址。在这个例子中，指定的地址是<code>unix:///run/containerd/containerd.sock</code>，这是一个Unix域套接字地址。</p></li><li><p><code>timeout: 10</code><br>#设置与容器运行时通信的超时时间，单位是秒。在这个例子中，超时时间被设置为10秒。</p></li><li><p><code>debug:false</code><br>#指定是否开启调式模式。在这个例子中，调式模式被设置为关闭，即<code>false</code>。如果设置为<code>true</code>，则会输出更详细的调试信息。</p></li></ol><p>#这些参数可以根据需要进行修改，以便与容器运行时进行有效的通信和管理。</p><h1 id="高可用配置keepalive和haproxy"><a href="#高可用配置keepalive和haproxy" class="headerlink" title="高可用配置keepalive和haproxy"></a>高可用配置keepalive和haproxy</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> keepalived haproxy</code></pre><h2 id="修改haproxy配置文件"><a href="#修改haproxy配置文件" class="headerlink" title="修改haproxy配置文件"></a>修改haproxy配置文件</h2><p>（配置文件一样）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.bak</span><span class="token function">cat</span> <span class="token operator">&gt;</span>/etc/haproxy/haproxy.cfg<span class="token operator">&lt;&lt;</span><span class="token string">"EOF"global  maxconn 2000  ulimit-n 16384  log 127.0.0.1 local0 err  stats timeout 30sdefaults  log global  mode http  option httplog  timeout connect 5000  timeout client 50000  timeout server 50000  timeout http-request 15s  timeout http-keep-alive 15sfrontend monitor-in  bind *:33305  mode http  option httplog  monitor-uri /monitorfrontend k8s-master  bind 0.0.0.0:9443  bind 127.0.0.1:9443  mode tcp  option tcplog  tcp-request inspect-delay 5s  default_backend k8s-masterbackend k8s-master  mode tcp  option tcplog  option tcp-check  balance roundrobin    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100  server k8s-master01 192.168.1.21:6443 check  server k8s-master02 192.168.1.22:6443 check  server k8s-master03 192.168.1.23:6443 checkEOF</span></code></pre><p>参数<br>这段配置代码是指定了一个HAProxy负载均衡器的配置。下面对各部分进行详细解释：</p><ol><li><code>global</code>:</li></ol><ul><li>maxconn 2000: 设置每个进程的最大连接数为2000。</li><li>ulimit-n 16384: 设置每个进程的最大文件描述符数为16384。</li><li>log 127.0.0.1 local0 err: 指定日志的输出地址为本地主机的127.0.0.1，并且只记录错误级别的日志。</li><li>stats timeout 30s: 设置查看负载均衡器统计信息的超时时间为30秒。</li></ul><ol start="2"><li><code>defaults</code>:</li></ol><ul><li>log global: 使默认日志与global部分相同。</li><li>mode http: 设定负载均衡器的工作模式为HTTP模式。</li><li>option httplog: 使负载均衡器记录HTTP协议的日志。</li><li>timeout connect 5000: 设置与后端服务器建立连接的超时时间为5秒。</li><li>timeout client 50000: 设置与客户端的连接超时时间为50秒。</li><li>timeout server 50000: 设置与后端服务器连接的超时时间为50秒。</li><li>timeout http-request 15s: 设置处理HTTP请求的超时时间为15秒。</li><li>timeout http-keep-alive 15s: 设置保持HTTP连接的超时时间为15秒。</li></ul><ol start="3"><li><code>frontend monitor-in</code>:</li></ol><ul><li>bind *:33305: 监听所有IP地址的33305端口。</li><li>mode http: 设定frontend的工作模式为HTTP模式。</li><li>option httplog: 记录HTTP协议的日志。</li><li>monitor-uri /monitor: 设置监控URI为/monitor。</li></ul><ol start="4"><li><code>frontend k8s-master</code>:</li></ol><ul><li>bind 0.0.0.0:9443: 监听所有IP地址的9443端口。</li><li>bind 127.0.0.1:9443: 监听本地主机的9443端口。</li><li>mode tcp: 设定frontend的工作模式为TCP模式。</li><li>option tcplog: 记录TCP协议的日志。</li><li>tcp-request inspect-delay 5s: 设置在接收到请求后延迟5秒进行检查。</li><li>default_backend k8s-master: 设置默认的后端服务器组为k8s-master。</li></ul><ol start="5"><li><code>backend k8s-master</code>:</li></ol><ul><li>mode tcp: 设定backend的工作模式为TCP模式。</li><li>option tcplog: 记录TCP协议的日志。</li><li>option tcp-check: 启用TCP检查功能。</li><li>balance roundrobin: 使用轮询算法进行负载均衡。</li><li>default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100: 设置默认的服务器参数。</li><li>server k8s-master01 192.168.1.21:6443 check: 增加一个名为k8s-master01的服务器，IP地址为192.168.1.21，端口号为6443，并对其进行健康检查。</li><li>server k8s-master02 192.168.1.22:6443 check: 增加一个名为k8s-master02的服务器，IP地址为192.168.1.22，端口号为6443，并对其进行健康检查。</li><li>server k8s-master03 192.168.1.23:6443 check: 增加一个名为k8s-master03的服务器，IP地址为192.168.1.23，端口号为6443，并对其进行健康检查。</li></ul><p>以上就是这段配置代码的详细解释。它主要定义了全局配置、默认配置、前端监听和后端服务器组的相关参数和设置。通过这些配置，可以实现负载均衡和监控功能。</p><h2 id="Master01配置keepalived-master节点"><a href="#Master01配置keepalived-master节点" class="headerlink" title="Master01配置keepalived master节点"></a>Master01配置keepalived master节点</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#cp /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak</span><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/keepalived/keepalived.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOF! Configuration File for keepalivedglobal_defs { router_id LVS_DEVEL}vrrp_script chk_apiserver { script "/etc/keepalived/check_apiserver.sh" interval 5 weight -5 fall 2 rise 1}vrrp_instance VI_1 { state MASTER # 注意网卡名 interface ens160 mcast_src_ip 192.168.1.21 virtual_router_id 51 priority 100 nopreempt advert_int 2 authentication {  auth_type PASS  auth_pass K8SHA_KA_AUTH } virtual_ipaddress {  192.168.1.36 } track_script {  chk_apiserver} }EOF</span></code></pre><p>参数<br>这是一个用于配置keepalived的配置文件。下面是对每个部分的详细解释：</p><ul><li><code>global_defs</code>部分定义了全局参数。</li><li><code>router_id</code>参数指定了当前路由器的标识，这里设置为”LVS_DEVEL”。</li><li><code>vrrp_script</code>部分定义了一个VRRP脚本。<code>chk_apiserver</code>是脚本的名称，</li><li><code>script</code>参数指定了脚本的路径。该脚本每5秒执行一次，返回值为0表示服务正常，返回值为1表示服务异常。</li><li><code>weight</code>参数指定了根据脚本返回的值来调整优先级，这里设置为-5。</li><li><code>fall</code>参数指定了失败阈值，当连续2次脚本返回值为1时认为服务异常。</li><li><code>rise</code>参数指定了恢复阈值，当连续1次脚本返回值为0时认为服务恢复正常。</li><li><code>vrrp_instance</code>部分定义了一个VRRP实例。<code>VI_1</code>是实例的名称。</li><li><code>state</code>参数指定了当前实例的状态，这里设置为MASTER表示当前实例是主节点。</li><li><code>interface</code>参数指定了要监听的网卡，这里设置为ens160。</li><li><code>mcast_src_ip</code>参数指定了VRRP报文的源IP地址，这里设置为192.168.1.21。</li><li><code>virtual_router_id</code>参数指定了虚拟路由器的ID，这里设置为51。</li><li><code>priority</code>参数指定了实例的优先级，优先级越高（数值越大）越有可能被选为主节点。</li><li><code>nopreempt</code>参数指定了当主节点失效后不要抢占身份，即不要自动切换为主节点。</li><li><code>advert_int</code>参数指定了发送广播的间隔时间，这里设置为2秒。</li><li><code>authentication</code>部分指定了认证参数</li><li><code>auth_type</code>参数指定了认证类型，这里设置为PASS表示使用密码认证，</li><li><code>auth_pass</code>参数指定了认证密码，这里设置为K8SHA_KA_AUTH。</li><li><code>virtual_ipaddress</code>部分指定了虚拟IP地址，这里设置为192.168.1.36。</li><li><code>track_script</code>部分指定了要跟踪的脚本，这里跟踪了chk_apiserver脚本。</li></ul><h2 id="Master02配置keepalived-backup节点"><a href="#Master02配置keepalived-backup节点" class="headerlink" title="Master02配置keepalived backup节点"></a>Master02配置keepalived backup节点</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cp /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak</span><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/keepalived/keepalived.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOF! Configuration File for keepalivedglobal_defs {    router_id LVS_DEVEL}vrrp_script chk_apiserver {    script "/etc/keepalived/check_apiserver.sh"    interval 5     weight -5    fall 2    rise 1}vrrp_instance VI_1 {    state BACKUP    # 注意网卡名    interface ens160    mcast_src_ip 192.168.1.22    virtual_router_id 51    priority 80    nopreempt    advert_int 2    authentication {        auth_type PASS        auth_pass K8SHA_KA_AUTH    }    virtual_ipaddress {        192.168.1.36    }    track_script {      chk_apiserver } }EOF</span></code></pre><h2 id="Master03配置keepalived-backup节点"><a href="#Master03配置keepalived-backup节点" class="headerlink" title="Master03配置keepalived backup节点"></a>Master03配置keepalived backup节点</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cp /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak</span><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/keepalived/keepalived.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOF! Configuration File for keepalivedglobal_defs {    router_id LVS_DEVEL}vrrp_script chk_apiserver {    script "/etc/keepalived/check_apiserver.sh"    interval 5     weight -5    fall 2    rise 1}vrrp_instance VI_1 {    state BACKUP    # 注意网卡名    interface ens160    mcast_src_ip 192.168.1.23    virtual_router_id 51    priority 50    nopreempt    advert_int 2    authentication {        auth_type PASS        auth_pass K8SHA_KA_AUTH    }    virtual_ipaddress {        192.168.1.36    }    track_script {      chk_apiserver } }EOF</span></code></pre><p>参数</p><p>这是一个用于配置keepalived的配置文件。下面是对每个部分的详细解释：</p><ul><li><p><code>global_defs</code>部分定义了全局参数。</p></li><li><p><code>router_id</code>参数指定了当前路由器的标识，这里设置为”LVS_DEVEL”。</p></li><li><p><code>vrrp_script</code>部分定义了一个VRRP脚本。<code>chk_apiserver</code>是脚本的名称，</p></li><li><p><code>script</code>参数指定了脚本的路径。该脚本每5秒执行一次，返回值为0表示服务正常，返回值为1表示服务异常。</p></li><li><p><code>weight</code>参数指定了根据脚本返回的值来调整优先级，这里设置为-5。</p></li><li><p><code>fall</code>参数指定了失败阈值，当连续2次脚本返回值为1时认为服务异常。</p></li><li><p><code>rise</code>参数指定了恢复阈值，当连续1次脚本返回值为0时认为服务恢复正常。</p></li><li><p><code>vrrp_instance</code>部分定义了一个VRRP实例。<code>VI_1</code>是实例的名称。</p><ul><li><p><code>state</code>参数指定了当前实例的状态，这里设置为MASTER表示当前实例是主节点。</p></li><li><p><code>interface</code>参数指定了要监听的网卡，这里设置为ens160。</p></li><li><p><code>mcast_src_ip</code>参数指定了VRRP报文的源IP地址，这里设置为192.168.1.21。</p></li><li><p><code>virtual_router_id</code>参数指定了虚拟路由器的ID，这里设置为51。</p></li><li><p><code> priority</code>参数指定了实例的优先级，优先级越高（数值越大）越有可能被选为主节点。</p></li><li><p><code>nopreempt</code>参数指定了当主节点失效后不要抢占身份，即不要自动切换为主节点。</p></li><li><p><code>advert_int</code>参数指定了发送广播的间隔时间，这里设置为2秒。</p></li><li><p><code>authentication</code>部分指定了认证参数</p><ul><li><code>auth_type</code>参数指定了认证类型，这里设置为PASS表示使用密码认证，</li><li><code>auth_pass</code>参数指定了认证密码，这里设置为K8SHA_KA_AUTH。</li></ul></li><li><p><code>virtual_ipaddress</code>部分指定了虚拟IP地址，这里设置为192.168.1.36。</p></li><li><p><code>track_script</code>部分指定了要跟踪的脚本，这里跟踪了chk_apiserver脚本。</p></li></ul></li></ul><h2 id="健康检查脚本配置（lb主机）"><a href="#健康检查脚本配置（lb主机）" class="headerlink" title="健康检查脚本配置（lb主机）"></a>健康检查脚本配置（lb主机）</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/keepalived/check_apiserver.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/bin/basherr=0for k in \<span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">3</span><span class="token variable">)</span></span>do check_code=\<span class="token variable"><span class="token variable">$(</span>pgrep haproxy<span class="token variable">)</span></span> if [[ \<span class="token variable">$check_code</span> == "" ]]; then  err=\<span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> <span class="token punctuation">\</span>$err + <span class="token number">1</span><span class="token variable">)</span></span>  sleep 1  continue else  err=0  break fidoneif [[ \<span class="token variable">$err</span> != "0" ]]; then echo "systemctl stop keepalived" /usr/bin/systemctl stop keepalived exit 1else exit 0fiEOF</span><span class="token comment">#给脚本授权</span><span class="token function">chmod</span> +x /etc/keepalived/check_apiserver.sh</code></pre><p>#这段脚本是一个简单的bash脚本，主要用来检查是否有名为haproxy的进程正在运行。<br>#脚本的主要逻辑如下：</p><ol><li><p>首先设置一个变量err为0，用来记录错误次数。</p></li><li><p>使用一个循环，在循环内部执行以下操作：</p><ol><li>使用pgrep命令检查是否有名为haproxy的进程在运行。如果不存在该进程，将err加1，并暂停1秒钟，然后继续下一次循环。</li><li>如果存在haproxy进程，将err重置为0，并跳出循环。</li></ol></li><li><p>检查err的值，如果不为0，表示检查失败，输出一条错误信息并执行“systemctl stop keepalived”命令停止keepalived进程，并退出脚本返回1。</p></li><li><p>如果err的值为0，表示检查成功，退出脚本返回0。</p></li><li><p>该脚本的主要作用是检查是否存在运行中的haproxy进程，如果无法检测到haproxy进程，将停止keepalived进程并返回错误状态。如果haproxy进程存在，则返回成功状态。这个脚本可能是作为一个健康检查脚本的一部分，在确保haproxy服务可用的情况下，才继续运行其他操作。</p></li></ol><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload<span class="token comment">#用于重新加载systemd管理的单位文件。当你新增或修改了某个单位文件（如.service文件、.socket文件等），需要运行该命令来刷新systemd对该文件的配置。</span>systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> haproxy.service<span class="token comment">#启用并立即启动haproxy.service单元。haproxy.service是haproxy守护进程的systemd服务单元。</span>systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> keepalived.service<span class="token comment">#启用并立即启动keepalived.service单元。keepalived.service是keepalived守护进程的systemd服务单元。</span>systemctl status haproxy.service<span class="token comment">#haproxy.service单元的当前状态，包括运行状态、是否启用等信息。</span>systemctl status keepalived.service<span class="token comment">#keepalived.service单元的当前状态，包括运行状态、是否启用等信息。</span></code></pre><hr><h1 id="初始化安装整改镜像"><a href="#初始化安装整改镜像" class="headerlink" title="初始化安装整改镜像"></a>初始化安装整改镜像</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看最新版本有那些镜像</span><span class="token punctuation">[</span>root@k8s-master01 ~<span class="token punctuation">]</span><span class="token comment"># kubeadm config images list --image-repository registry.aliyuncs.com/google_containers</span>registry.aliyuncs.com/google_containers/kube-apiserver:v1.32.3registry.aliyuncs.com/google_containers/kube-controller-manager:v1.32.3registry.aliyuncs.com/google_containers/kube-scheduler:v1.32.3registry.aliyuncs.com/google_containers/kube-proxy:v1.32.3registry.aliyuncs.com/google_containers/coredns:v1.11.3registry.aliyuncs.com/google_containers/pause:3.10registry.aliyuncs.com/google_containers/etcd:3.5.16-0<span class="token punctuation">[</span>root@k8s-master01 ~<span class="token punctuation">]</span><span class="token comment">#</span><span class="token comment">#只有一个CRI的情况下</span>kubeadm config images pull --image-repository registry.aliyuncs.com/google_containers<span class="token comment">#指定CRI拉取镜像</span>kubeadm config images pull --image-repository registry.aliyuncs.com/google_containers --cri-socket unix:///var/run/cri-dockerd.sockkubeadm config images pull --image-repository registry.aliyuncs.com/google_containers --cri-socket unix:///var/run/containerd/containerd.sock</code></pre><h1 id="修改初始化配置创建默认配置"><a href="#修改初始化配置创建默认配置" class="headerlink" title="修改初始化配置创建默认配置"></a>修改初始化配置创建默认配置</h1><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm config print init-defaults <span class="token operator">&gt;</span> kubeadm-init.yaml</code></pre><p>#这是我使用的配置文件</p><h2 id="初始化Master01"><a href="#初始化Master01" class="headerlink" title="初始化Master01"></a>初始化Master01</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml">cat <span class="token punctuation">&gt;</span> kubeadm.yaml &lt;&lt; EOF<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeadm.k8s.io/v1beta4<span class="token key atrule">bootstrapTokens</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">groups</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> system<span class="token punctuation">:</span>bootstrappers<span class="token punctuation">:</span>kubeadm<span class="token punctuation">:</span>default<span class="token punctuation">-</span>node<span class="token punctuation">-</span>token <span class="token key atrule">token</span><span class="token punctuation">:</span> abcdef.0123456789abcdef <span class="token key atrule">ttl</span><span class="token punctuation">:</span> 24h0m0s <span class="token key atrule">usages</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> signing <span class="token punctuation">-</span> authentication<span class="token key atrule">kind</span><span class="token punctuation">:</span> InitConfiguration<span class="token key atrule">localAPIEndpoint</span><span class="token punctuation">:</span> <span class="token key atrule">advertiseAddress</span><span class="token punctuation">:</span> 192.168.1.21 <span class="token key atrule">bindPort</span><span class="token punctuation">:</span> <span class="token number">6443</span><span class="token key atrule">nodeRegistration</span><span class="token punctuation">:</span> <span class="token comment">#criSocket: unix:///run/containerd/containerd.sock</span> <span class="token key atrule">criSocket</span><span class="token punctuation">:</span> unix<span class="token punctuation">:</span>///var/run/cri<span class="token punctuation">-</span>dockerd.sock <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent <span class="token key atrule">imagePullSerial</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">kubeletExtraArgs</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"node-ip"</span> <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"192.168.1.21,fc00::21"</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> k8s<span class="token punctuation">-</span>master01 <span class="token key atrule">taints</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token key atrule">effect</span><span class="token punctuation">:</span> PreferNoSchedule <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master<span class="token key atrule">timeouts</span><span class="token punctuation">:</span> <span class="token key atrule">controlPlaneComponentHealthCheck</span><span class="token punctuation">:</span> 4m0s <span class="token key atrule">discovery</span><span class="token punctuation">:</span> 5m0s <span class="token key atrule">etcdAPICall</span><span class="token punctuation">:</span> 2m0s <span class="token key atrule">kubeletHealthCheck</span><span class="token punctuation">:</span> 4m0s <span class="token key atrule">kubernetesAPICall</span><span class="token punctuation">:</span> 1m0s <span class="token key atrule">tlsBootstrap</span><span class="token punctuation">:</span> 5m0s <span class="token key atrule">upgradeManifests</span><span class="token punctuation">:</span> 5m0s<span class="token punctuation">---</span><span class="token key atrule">apiServer</span><span class="token punctuation">:</span> <span class="token key atrule">certSANs</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> x.oiox.cn <span class="token punctuation">-</span> z.oiox.cn <span class="token punctuation">-</span> k8s<span class="token punctuation">-</span>master01 <span class="token punctuation">-</span> k8s<span class="token punctuation">-</span>master02 <span class="token punctuation">-</span> k8s<span class="token punctuation">-</span>master03 <span class="token punctuation">-</span> 192.168.1.21 <span class="token punctuation">-</span> 192.168.1.22 <span class="token punctuation">-</span> 192.168.1.23 <span class="token punctuation">-</span> 192.168.1.24 <span class="token punctuation">-</span> 192.168.1.25 <span class="token punctuation">-</span> 192.168.1.26 <span class="token punctuation">-</span> 192.168.1.27 <span class="token punctuation">-</span> 192.168.1.28 <span class="token punctuation">-</span> 192.168.1.29 <span class="token punctuation">-</span> 127.0.0.1 <span class="token key atrule">timeoutForControlPlane</span><span class="token punctuation">:</span> 4m0s<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeadm.k8s.io/v1beta4<span class="token key atrule">caCertificateValidityPeriod</span><span class="token punctuation">:</span> 87600h0m0s<span class="token key atrule">certificateValidityPeriod</span><span class="token punctuation">:</span> 8760h0m0s<span class="token key atrule">certificatesDir</span><span class="token punctuation">:</span> /etc/kubernetes/pki<span class="token key atrule">clusterName</span><span class="token punctuation">:</span> kubernetes<span class="token key atrule">controllerManager</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">dns</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">encryptionAlgorithm</span><span class="token punctuation">:</span> RSA<span class="token punctuation">-</span><span class="token number">2048</span><span class="token key atrule">etcd</span><span class="token punctuation">:</span> <span class="token key atrule">local</span><span class="token punctuation">:</span> <span class="token key atrule">dataDir</span><span class="token punctuation">:</span> /var/lib/etcd<span class="token key atrule">imageRepository</span><span class="token punctuation">:</span> registry.aliyuncs.com/google_containers<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterConfiguration<span class="token key atrule">kubernetesVersion</span><span class="token punctuation">:</span> 1.32.3<span class="token key atrule">networking</span><span class="token punctuation">:</span> <span class="token key atrule">dnsDomain</span><span class="token punctuation">:</span> cluster.local <span class="token key atrule">podSubnet</span><span class="token punctuation">:</span> 172.16.0.0/12 <span class="token key atrule">serviceSubnet</span><span class="token punctuation">:</span> 10.96.0.0/16<span class="token key atrule">proxy</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">scheduler</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">controlPlaneEndpoint</span><span class="token punctuation">:</span> <span class="token string">"192.168.1.36:9443"</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeproxy.config.k8s.io/v1alpha1<span class="token key atrule">kind</span><span class="token punctuation">:</span> KubeProxyConfiguration<span class="token key atrule">mode</span><span class="token punctuation">:</span> ipvs<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubelet.config.k8s.io/v1beta1<span class="token key atrule">authentication</span><span class="token punctuation">:</span> <span class="token key atrule">anonymous</span><span class="token punctuation">:</span> <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token key atrule">webhook</span><span class="token punctuation">:</span> <span class="token key atrule">cacheTTL</span><span class="token punctuation">:</span> 0s <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">x509</span><span class="token punctuation">:</span> <span class="token key atrule">clientCAFile</span><span class="token punctuation">:</span> /etc/kubernetes/pki/ca.crt<span class="token key atrule">authorization</span><span class="token punctuation">:</span> <span class="token key atrule">mode</span><span class="token punctuation">:</span> Webhook <span class="token key atrule">webhook</span><span class="token punctuation">:</span> <span class="token key atrule">cacheAuthorizedTTL</span><span class="token punctuation">:</span> 0s <span class="token key atrule">cacheUnauthorizedTTL</span><span class="token punctuation">:</span> 0s<span class="token key atrule">clusterDNS</span><span class="token punctuation">:</span><span class="token punctuation">-</span> 10.96.0.10<span class="token key atrule">clusterDomain</span><span class="token punctuation">:</span> cluster.local<span class="token key atrule">cpuManagerReconcilePeriod</span><span class="token punctuation">:</span> 0s<span class="token key atrule">evictionPressureTransitionPeriod</span><span class="token punctuation">:</span> 0s<span class="token key atrule">fileCheckFrequency</span><span class="token punctuation">:</span> 0s<span class="token key atrule">healthzBindAddress</span><span class="token punctuation">:</span> 127.0.0.1<span class="token key atrule">healthzPort</span><span class="token punctuation">:</span> <span class="token number">10248</span><span class="token key atrule">httpCheckFrequency</span><span class="token punctuation">:</span> 0s<span class="token key atrule">imageMinimumGCAge</span><span class="token punctuation">:</span> 0s<span class="token key atrule">kind</span><span class="token punctuation">:</span> KubeletConfiguration<span class="token key atrule">cgroupDriver</span><span class="token punctuation">:</span> systemd<span class="token key atrule">logging</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">memorySwap</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">nodeStatusReportFrequency</span><span class="token punctuation">:</span> 0s<span class="token key atrule">nodeStatusUpdateFrequency</span><span class="token punctuation">:</span> 0s<span class="token key atrule">rotateCertificates</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">runtimeRequestTimeout</span><span class="token punctuation">:</span> 0s<span class="token key atrule">shutdownGracePeriod</span><span class="token punctuation">:</span> 0s<span class="token key atrule">shutdownGracePeriodCriticalPods</span><span class="token punctuation">:</span> 0s<span class="token key atrule">staticPodPath</span><span class="token punctuation">:</span> /etc/kubernetes/manifests<span class="token key atrule">streamingConnectionIdleTimeout</span><span class="token punctuation">:</span> 0s<span class="token key atrule">syncFrequency</span><span class="token punctuation">:</span> 0s<span class="token key atrule">volumeStatsAggPeriod</span><span class="token punctuation">:</span> 0sEOF</code></pre><p><strong>开始初始化部署</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm init <span class="token parameter variable">--config</span> kubeadm.yaml</code></pre><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用脚本将这如果你睡拷贝到其他maser节点</span><span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span>root<span class="token assign-left variable">CONTROL_PLANE_IPS</span><span class="token operator">=</span><span class="token string">"192.168.1.22 192.168.1.23"</span><span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> <span class="token variable">${CONTROL_PLANE_IPS}</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token function">scp</span> /etc/kubernetes/pki/ca.crt <span class="token string">"<span class="token variable">${<span class="token environment constant">USER</span>}</span>"</span>@<span class="token variable">$host</span><span class="token builtin class-name">:</span>    <span class="token function">scp</span> /etc/kubernetes/pki/ca.key <span class="token string">"<span class="token variable">${<span class="token environment constant">USER</span>}</span>"</span>@<span class="token variable">$host</span><span class="token builtin class-name">:</span>    <span class="token function">scp</span> /etc/kubernetes/pki/sa.key <span class="token string">"<span class="token variable">${<span class="token environment constant">USER</span>}</span>"</span>@<span class="token variable">$host</span><span class="token builtin class-name">:</span>    <span class="token function">scp</span> /etc/kubernetes/pki/sa.pub <span class="token string">"<span class="token variable">${<span class="token environment constant">USER</span>}</span>"</span>@<span class="token variable">$host</span><span class="token builtin class-name">:</span>    <span class="token function">scp</span> /etc/kubernetes/pki/front-proxy-ca.crt <span class="token string">"<span class="token variable">${<span class="token environment constant">USER</span>}</span>"</span>@<span class="token variable">$host</span><span class="token builtin class-name">:</span>    <span class="token function">scp</span> /etc/kubernetes/pki/front-proxy-ca.key <span class="token string">"<span class="token variable">${<span class="token environment constant">USER</span>}</span>"</span>@<span class="token variable">$host</span><span class="token builtin class-name">:</span>    <span class="token function">scp</span> /etc/kubernetes/pki/etcd/ca.crt <span class="token string">"<span class="token variable">${<span class="token environment constant">USER</span>}</span>"</span>@<span class="token variable">$host</span>:etcd-ca.crt    <span class="token comment"># 如果你正使用外部 etcd，忽略下一行</span>    <span class="token function">scp</span> /etc/kubernetes/pki/etcd/ca.key <span class="token string">"<span class="token variable">${<span class="token environment constant">USER</span>}</span>"</span>@<span class="token variable">$host</span>:etcd-ca.key<span class="token keyword">done</span><span class="token comment"># 在其他的maser上面执行 ，将证书文件放入所需目录</span><span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span>root<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/kubernetes/pki/etcd<span class="token function">mv</span> /<span class="token variable">${<span class="token environment constant">USER</span>}</span>/ca.crt /etc/kubernetes/pki/<span class="token function">mv</span> /<span class="token variable">${<span class="token environment constant">USER</span>}</span>/ca.key /etc/kubernetes/pki/<span class="token function">mv</span> /<span class="token variable">${<span class="token environment constant">USER</span>}</span>/sa.pub /etc/kubernetes/pki/<span class="token function">mv</span> /<span class="token variable">${<span class="token environment constant">USER</span>}</span>/sa.key /etc/kubernetes/pki/<span class="token function">mv</span> /<span class="token variable">${<span class="token environment constant">USER</span>}</span>/front-proxy-ca.crt /etc/kubernetes/pki/<span class="token function">mv</span> /<span class="token variable">${<span class="token environment constant">USER</span>}</span>/front-proxy-ca.key /etc/kubernetes/pki/<span class="token function">mv</span> /<span class="token variable">${<span class="token environment constant">USER</span>}</span>/etcd-ca.crt /etc/kubernetes/pki/etcd/ca.crt<span class="token comment"># 如果你正使用外部 etcd，忽略下一行</span><span class="token function">mv</span> /<span class="token variable">${<span class="token environment constant">USER</span>}</span>/etcd-ca.key /etc/kubernetes/pki/etcd/ca.key</code></pre><h2 id="初始化Master2"><a href="#初始化Master2" class="headerlink" title="初始化Master2"></a>初始化Master2</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在maser02上执行操作，将加入控制节点</span>kubeadm config print join-defaults <span class="token operator">&gt;</span> kubeadm-join-master-02.yaml<span class="token function">cat</span> <span class="token operator">&gt;</span> kubeadm-join-master-02.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFapiVersion: kubeadm.k8s.io/v1beta4caCertPath: /etc/kubernetes/pki/ca.crtdiscovery:  bootstrapToken:    apiServerEndpoint: 192.168.1.36:9443    token: abcdef.0123456789abcdef    caCertHashes:    - "sha256:1a6196cd63edf4e78f39d34d448d6333d25e1ad0ff650839260fc7df25ec8a92"    unsafeSkipCAVerification: true  tlsBootstrapToken: abcdef.0123456789abcdefkind: JoinConfigurationcontrolPlane:  localAPIEndpoint:    advertiseAddress: "192.168.1.22"    bindPort: 6443nodeRegistration:  # criSocket: unix:///run/containerd/containerd.sock  criSocket: unix:///var/run/cri-dockerd.sock  imagePullPolicy: IfNotPresent  imagePullSerial: true  name: k8s-master02  taints:  - effect: PreferNoSchedule    key: node-role.kubernetes.io/master  kubeletExtraArgs:  - name: "node-ip"    value: "192.168.1.22,fc00::22"timeouts:  controlPlaneComponentHealthCheck: 4m0s  discovery: 5m0s  etcdAPICall: 2m0s  kubeletHealthCheck: 4m0s  kubernetesAPICall: 1m0s  tlsBootstrap: 5m0s  upgradeManifests: 5m0sEOF</span>kubeadm <span class="token function">join</span> <span class="token parameter variable">--config</span><span class="token operator">=</span>kubeadm-join-master-02.yaml</code></pre><h2 id="初始化Master3"><a href="#初始化Master3" class="headerlink" title="初始化Master3"></a>初始化Master3</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在maser03上执行操作，将加入控制节点</span>kubeadm config print join-defaults <span class="token operator">&gt;</span> kubeadm-join-master-03.yaml<span class="token function">cat</span> <span class="token operator">&gt;</span> kubeadm-join-master-03.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFapiVersion: kubeadm.k8s.io/v1beta4caCertPath: /etc/kubernetes/pki/ca.crtdiscovery:  bootstrapToken:    apiServerEndpoint: 192.168.1.36:9443    token: abcdef.0123456789abcdef    caCertHashes:    - "sha256:1a6196cd63edf4e78f39d34d448d6333d25e1ad0ff650839260fc7df25ec8a92"    unsafeSkipCAVerification: true  tlsBootstrapToken: abcdef.0123456789abcdefkind: JoinConfigurationcontrolPlane:  localAPIEndpoint:    advertiseAddress: "192.168.1.23"    bindPort: 6443nodeRegistration:  # criSocket: unix:///run/containerd/containerd.sock  criSocket: unix:///var/run/cri-dockerd.sock  imagePullPolicy: IfNotPresent  imagePullSerial: true  name: k8s-master03  taints:  - effect: PreferNoSchedule    key: node-role.kubernetes.io/master  kubeletExtraArgs:  - name: "node-ip"    value: "192.168.1.23,fc00::23"timeouts:  controlPlaneComponentHealthCheck: 4m0s  discovery: 5m0s  etcdAPICall: 2m0s  kubeletHealthCheck: 4m0s  kubernetesAPICall: 1m0s  tlsBootstrap: 5m0s  upgradeManifests: 5m0sEOF</span>kubeadm <span class="token function">join</span> <span class="token parameter variable">--config</span><span class="token operator">=</span>kubeadm-join-master-03.yaml</code></pre><h2 id="初始化Node1"><a href="#初始化Node1" class="headerlink" title="初始化Node1"></a>初始化Node1</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在node01上执行操作，将加入工作节点</span>kubeadm config print join-defaults <span class="token operator">&gt;</span> kubeadm-join-node-01.yaml<span class="token function">cat</span> <span class="token operator">&gt;</span> kubeadm-join-node-01.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFapiVersion: kubeadm.k8s.io/v1beta4caCertPath: /etc/kubernetes/pki/ca.crtdiscovery:  bootstrapToken:    apiServerEndpoint: 192.168.1.36:9443    token: abcdef.0123456789abcdef    caCertHashes:    - "sha256:1a6196cd63edf4e78f39d34d448d6333d25e1ad0ff650839260fc7df25ec8a92"    unsafeSkipCAVerification: true  tlsBootstrapToken: abcdef.0123456789abcdefkind: JoinConfigurationnodeRegistration:  # criSocket: unix:///run/containerd/containerd.sock  criSocket: unix:///var/run/cri-dockerd.sock  imagePullPolicy: IfNotPresent  imagePullSerial: true  name: k8s-node01  taints: null  kubeletExtraArgs:  - name: "node-ip"    value: "192.168.1.24,fc00::24"timeouts:  controlPlaneComponentHealthCheck: 4m0s  discovery: 5m0s  etcdAPICall: 2m0s  kubeletHealthCheck: 4m0s  kubernetesAPICall: 1m0s  tlsBootstrap: 5m0s  upgradeManifests: 5m0sEOF</span>kubeadm <span class="token function">join</span> <span class="token parameter variable">--config</span><span class="token operator">=</span>kubeadm-join-node-01.yaml</code></pre><h2 id="初始化Node2"><a href="#初始化Node2" class="headerlink" title="初始化Node2"></a>初始化Node2</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在node02上执行操作，将加入工作节点</span>kubeadm config print join-defaults <span class="token operator">&gt;</span> kubeadm-join-node-02.yaml<span class="token function">cat</span> <span class="token operator">&gt;</span> kubeadm-join-node-02.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFapiVersion: kubeadm.k8s.io/v1beta4caCertPath: /etc/kubernetes/pki/ca.crtdiscovery:  bootstrapToken:    apiServerEndpoint: 192.168.1.36:9443    token: abcdef.0123456789abcdef    caCertHashes:    - "sha256:1a6196cd63edf4e78f39d34d448d6333d25e1ad0ff650839260fc7df25ec8a92"    unsafeSkipCAVerification: true  tlsBootstrapToken: abcdef.0123456789abcdefkind: JoinConfigurationnodeRegistration:  # criSocket: unix:///run/containerd/containerd.sock  criSocket: unix:///var/run/cri-dockerd.sock  imagePullPolicy: IfNotPresent  imagePullSerial: true  name: k8s-node02  taints: null  kubeletExtraArgs:  - name: "node-ip"    value: "192.168.1.25,fc00::25"timeouts:  controlPlaneComponentHealthCheck: 4m0s  discovery: 5m0s  etcdAPICall: 2m0s  kubeletHealthCheck: 4m0s  kubernetesAPICall: 1m0s  tlsBootstrap: 5m0s  upgradeManifests: 5m0sEOF</span>kubeadm <span class="token function">join</span> <span class="token parameter variable">--config</span><span class="token operator">=</span>kubeadm-join-node-02.yaml</code></pre><h3 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h3><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get no <span class="token parameter variable">-O</span> wide </code></pre>]]></content>
      
      
      <categories>
          
          <category> deploy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Shell </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> Keepalived </tag>
            
            <tag> HAproxy </tag>
            
            <tag> Containerd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HELM命令详解</title>
      <link href="/2025/02/18/helm/"/>
      <url>/2025/02/18/helm/</url>
      
        <content type="html"><![CDATA[<h4 id="1、Helm的命令详解"><a href="#1、Helm的命令详解" class="headerlink" title="1、Helm的命令详解"></a>1、Helm的命令详解</h4><p><strong>查看helm的命令帮助</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master01 ~<span class="token punctuation">]</span><span class="token comment"># helm --help</span>Usage:  helm <span class="token punctuation">[</span>command<span class="token punctuation">]</span>Available Commands:  completion  generate autocompletions script <span class="token keyword">for</span> the specified shell  create      create a new chart with the given name  dependency  manage a chart's dependencies  <span class="token function">env</span>         helm client environment information  get         download extended information of a named release  <span class="token builtin class-name">help</span>        Help about any <span class="token builtin class-name">command</span>  <span class="token function">history</span>     fetch release <span class="token function">history</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Flags:      --add-dir-header                   If true, adds the <span class="token function">file</span> directory to the header      <span class="token parameter variable">--alsologtostderr</span>                  log to standard error as well as files      <span class="token parameter variable">--debug</span>                            <span class="token builtin class-name">enable</span> verbose output  -h, <span class="token parameter variable">--help</span>                             <span class="token builtin class-name">help</span> <span class="token keyword">for</span> helm      --kube-apiserver string            the address and the port <span class="token keyword">for</span> the Kubernetes API server      --kube-context string              name of the kubeconfig context to use      --kube-token string                bearer token used <span class="token keyword">for</span> authentication      <span class="token parameter variable">--kubeconfig</span> string                path to the kubeconfig <span class="token function">file</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Use <span class="token string">"helm [command] --help"</span> <span class="token keyword">for</span> <span class="token function">more</span> information about a command.</code></pre><p>从上面可以看到Helm的命令有三类，分别对应<strong>repo、Chart、release</strong>。</p><pre class="language-helm" data-language="helm"><code class="language-helm">repo:helm repo list 列举出添加的repository仓库helm repo add [RepoName] [RepoUrl] 添加仓库helm repo update 更新仓库Chart:helm search 查找可用的Chart模板helm pull, fetch [chart URL | repo/chartname] 下载指定的Chart包到本地helm install 根据指定的Chart 部署一个Release到K8shelm create 创建自己的Chart模板helm lint PATH 检查自定义的Chart模板是否正确helm package 打包Chart，一般是一个压缩包文件helm show, inspect [command] 查看关于chart的信息，如定义信息、README和values.yaml文件内容 [command]包含all、chart、readme、values等资源release: release基于namespace进行隔离helm list, ls 列出已经部署的Releasehelm delete [RELEASE] 删除一个Release。helm status [RELEASE] 查看指定的Release信息。helm upgrade 升级某个Release。helm rollback [RELEASE] [REVISION] 回滚Release到指定发布版本。helm get values [RELEASE] 查看Release的配置文件值。helm history [RELEASE] 查看某个release的升级记录</code></pre><h4 id="2-、使用Helm部署常见的应用"><a href="#2-、使用Helm部署常见的应用" class="headerlink" title="2 、使用Helm部署常见的应用"></a>2 、使用Helm部署常见的应用</h4><h5 id="2-1-部署、测试nfs-client-provisioner"><a href="#2-1-部署、测试nfs-client-provisioner" class="headerlink" title="2.1 部署、测试nfs-client-provisioner"></a>2.1 部署、测试nfs-client-provisioner</h5><p>之前创建的PV都是静态PV，是提前创建好的PV，可供PVC进行绑定。如果每次都要手动创建PV，那样太麻烦了。<br>我们可以创建一个StorageClass，然后在定义PVC时，声明使用自定义的StorageClass，然后根据PVC动态地创建PV。PVC然后去绑定PV，这样就省去了每次需要手工创建PV的麻烦。</p><h5 id="2-1-1-安装NFS服务器"><a href="#2-1-1-安装NFS服务器" class="headerlink" title="2.1.1 安装NFS服务器"></a>2.1.1 安装NFS服务器</h5><p>在k8s-master01上安装nfs服务器</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在k8s-master01节点安装NFS服务器</span><span class="token punctuation">[</span>root@k8s-master01 helm<span class="token punctuation">]</span><span class="token comment"># yum install -y nfs-common nfs-utils  rpcbind</span><span class="token punctuation">[</span>root@k8s-master01 helm<span class="token punctuation">]</span><span class="token comment"># mkdir /data &amp;&amp; chmod 777 /data</span><span class="token punctuation">[</span>root@k8s-master01 helm<span class="token punctuation">]</span><span class="token comment"># chown nfsnobody /data</span><span class="token punctuation">[</span>root@k8s-master01 helm<span class="token punctuation">]</span><span class="token comment"># cat &gt; /etc/exports &lt;&lt; EOF</span>/data *<span class="token punctuation">(</span>rw,no_root_squash,no_all_squash,sync<span class="token punctuation">)</span>EOF<span class="token comment">#启动nfs</span><span class="token punctuation">[</span>root@k8s-master01 helm<span class="token punctuation">]</span><span class="token comment"># systemctl start rpcbind &amp;&amp; systemctl start nfs-server</span><span class="token comment">#设置开启自启</span><span class="token punctuation">[</span>root@k8s-master01 helm<span class="token punctuation">]</span><span class="token comment"># systemctl enable rpcbind &amp;&amp; systemctl enable nfs-server</span>在k8s-node01、k8s-node02安装客户端工具<span class="token punctuation">[</span>root@k8s-node01 helm<span class="token punctuation">]</span><span class="token comment"># yum install -y nfs-utils</span><span class="token punctuation">[</span>root@k8s-node01 helm<span class="token punctuation">]</span><span class="token comment"># systemctl start nfs-utils &amp;&amp; systemctl enable nfs-utils</span></code></pre><h5 id="2-1-2-部署nfs-client-provisioner动态创建PV"><a href="#2-1-2-部署nfs-client-provisioner动态创建PV" class="headerlink" title="2.1.2 部署nfs-client-provisioner动态创建PV"></a>2.1.2 部署nfs-client-provisioner动态创建PV</h5><p>在日常学习kubernetes时，经常需要使用把一些数据（例如：数据库、日志等）存储起来，不随着容器的删除而丢失，也就是说一些pod需要持久化存储。对于需要持久化的工作负载可以声明一个pvc，然后需要有合适的pv可供绑定。现在可以使用helm部署nfs-client-provisioner，可以根据pvc（在资源清单中需要<strong>storeageClass</strong>定义为<strong>nfs-client-provisioner</strong>）动态地创建pv。存储卷的实现有很多种，此处选择比较容易实现的NFS作为存储。</p><p>可以访问 nfs-client-provisioner地址里面有关于配置的详细说明。</p><p>安装nfs-client-provisioner</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master01 helm<span class="token punctuation">]</span><span class="token comment"># helm install nfs-client-provisioner stable/nfs-client-provisioner --set nfs.server=x.x.x.x --set nfs.path=/xxxx --set storageClass.defaultClass=true</span></code></pre><p>上面的命令创建一个release实例、配置nfs-server地址、挂载的路径、设置为默认的class</p><p>查看创建的nfs-client-provisioner</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master01 nfs-client-provisioner<span class="token punctuation">]</span><span class="token comment"># helm list</span>NAME                  NAMESPACEREVISIONUPDATED                                STATUS  CHART                       APP VERSIONnfs-client-provisionerdefault  <span class="token number">1</span>       <span class="token number">2020</span>-09-23 <span class="token number">15</span>:04:48.690645046 +0800 CSTdeployednfs-client-provisioner-1.2.9<span class="token number">3.1</span>.0</code></pre><p>查看<strong>storageclass</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master01 nfs<span class="token punctuation">]</span><span class="token comment"># kubectl get sc</span>NAME                   PROVISIONER                            AGEnfs-client <span class="token punctuation">(</span>default<span class="token punctuation">)</span>   cluster.local/nfs-client-provisioner   63m</code></pre><p>这里default的含义是当定义pvc时，不声明storageClassName时，就会使用默认的default。</p><p>查看nfs-client-provisioner对应的Pod</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master01 nfs-client-provisioner<span class="token punctuation">]</span><span class="token comment"># kubectl get pod</span>NAME                                      READY   STATUS    RESTARTS   AGEnfs-client-provisioner-6999f4847d-ck52d   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          34m</code></pre><h5 id="2-1-3-测试能否根据pvc动态创建pv"><a href="#2-1-3-测试能否根据pvc动态创建pv" class="headerlink" title="2.1.3 测试能否根据pvc动态创建pv"></a>2.1.3 测试能否根据pvc动态创建pv</h5><p>创建一个pvc检测能否动态创建pv，并且绑定到pv中</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master01 nfs<span class="token punctuation">]</span><span class="token comment"># cat &gt; test-pvc.yaml &lt;&lt; EOF</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>pvc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteMany    <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client      <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi    EOF    <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client <span class="token comment">#需要定义为刚刚创建的nfs-client。这里不写也可以，因为已经将default设置为了nfs-client。</span></code></pre><p>创建pvc，查看能否动态创建pv，pvc能够绑定到对应的pv上。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master01 nfs<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f test-pvc.yaml </span>persistentvolumeclaim/test-nfs-pvc created<span class="token punctuation">[</span>root@k8s-master01 nfs<span class="token punctuation">]</span><span class="token comment"># kubectl get pv,pvc</span>NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                  STORAGECLASS   REASON   AGEpersistentvolume/pvc-f5207723-c172-4076-bedb-f603115230eb   1Gi        RWX            Delete           Bound    default/test-nfs-pvc   nfs-client              6sNAME                                 STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGEpersistentvolumeclaim/test-nfs-pvc   Bound    pvc-f5207723-c172-4076-bedb-f603115230eb   1Gi        RWX            nfs-client     6s</code></pre><p>这里动态创建了一个pv，可以看到PVC处于Bound的状态。<br>查看/nfs文件夹下的内容。这里的/nfs为使用helm创建nfs-client的release实例时设置的nfs.path的值</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master01 nfs<span class="token punctuation">]</span><span class="token comment"># ls -l /data</span>总用量 <span class="token number">0</span>drwxrwxrwx <span class="token number">2</span> root root <span class="token number">6</span> <span class="token number">9</span>月  <span class="token number">23</span> <span class="token number">16</span>:03 default-test-nfs-pvc-pvc-f5207723-c172-4076-bedb-f603115230eb</code></pre><p>文件夹的格式为</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>namespace-name<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>pvc-name<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>pv-name<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>uuid<span class="token operator">&gt;</span></code></pre><h4 id="3、关于StorageClass回收策略对数据的影响"><a href="#3、关于StorageClass回收策略对数据的影响" class="headerlink" title="3、关于StorageClass回收策略对数据的影响"></a>3、关于StorageClass回收策略对数据的影响</h4><h6 id="3-1第一种配置"><a href="#3-1第一种配置" class="headerlink" title="3.1第一种配置"></a>3.1第一种配置</h6><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">archiveOnDelete</span><span class="token punctuation">:</span> <span class="token string">"false"</span>  <span class="token key atrule">reclaimPolicy</span><span class="token punctuation">:</span> Delete   <span class="token comment">#默认没有配置,默认值为Delete</span></code></pre><p>测试结果</p><p><strong>1.pod删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用</strong><br><strong>2.sc删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用</strong><br><strong>3.删除PVC后,PV被删除且NFS Server对应数据被删除</strong></p><h6 id="3-2第二种配置"><a href="#3-2第二种配置" class="headerlink" title="3.2第二种配置"></a>3.2第二种配置</h6> <pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">archiveOnDelete</span><span class="token punctuation">:</span> <span class="token string">"false"</span>  <span class="token key atrule">reclaimPolicy</span><span class="token punctuation">:</span> Retain  </code></pre><p>测试结果</p><p><strong>1.pod删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用</strong><br><strong>2.sc删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用</strong><br><strong>3.删除PVC后,PV不会别删除,且状态由Bound变为Released,NFS Server对应数据被保留</strong><br><strong>4.重建sc后,新建PVC会绑定新的pv,旧数据可以通过拷贝到新的PV中</strong></p><h6 id="3-3第三种配置"><a href="#3-3第三种配置" class="headerlink" title="3.3第三种配置"></a>3.3第三种配置</h6>   <pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">archiveOnDelete</span><span class="token punctuation">:</span> <span class="token string">"ture"</span>  <span class="token key atrule">reclaimPolicy</span><span class="token punctuation">:</span> Retain  </code></pre><p>测试结果</p><p><strong>1.pod删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用</strong><br><strong>2.sc删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用</strong><br><strong>3.删除PVC后,PV不会别删除,且状态由Bound变为Released,NFS Server对应数据被保留</strong><br><strong>4.重建sc后,新建PVC会绑定新的pv,旧数据可以通过拷贝到新的PV中</strong></p><h6 id="3-4第四种配置"><a href="#3-4第四种配置" class="headerlink" title="3.4第四种配置"></a>3.4第四种配置</h6> <pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">archiveOnDelete</span><span class="token punctuation">:</span> <span class="token string">"ture"</span>  <span class="token key atrule">reclaimPolicy</span><span class="token punctuation">:</span> Delete </code></pre><p>测试结果</p><p><strong>1.pod删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用</strong><br><strong>2.sc删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用</strong><br><strong>3.删除PVC后,PV不会别删除,且状态由Bound变为Released,NFS Server对应数据被保留</strong><br><strong>4.重建sc后,新建PVC会绑定新的pv,旧数据可以通过拷贝到新的PV中</strong><br><strong>总结:除以第一种配置外,其他三种配置在PV/PVC被删除后数据依然保留</strong></p>]]></content>
      
      
      <categories>
          
          <category> K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Container </tag>
            
            <tag> Shell </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> Kylin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wget、curl简单介绍使用</title>
      <link href="/2024/03/12/wget-ji-curl-jian-dan-jie-shao-shi-yong/"/>
      <url>/2024/03/12/wget-ji-curl-jian-dan-jie-shao-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="一、wget的用法"><a href="#一、wget的用法" class="headerlink" title="一、wget的用法"></a>一、wget的用法</h2><p>wget是一款广泛应用于类Unix系统和Linux系统的网络下载工具，其不仅能够方便地下载HTTP、HTTPS和FTP等多种协议的网络资源，还具备断点续传、递归下载和自动重试等功能特性，表现出高度的稳定性和灵活性。</p><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><pre class="language-none"><code class="language-none">wget [option]... [URL]...</code></pre><h3 id="2、常用选项"><a href="#2、常用选项" class="headerlink" title="2、常用选项"></a>2、常用选项</h3><p>-b：后台执行。如果没有通过-o指定输出文件，则输出将重定向到wget日志。</p><p>-o logfile：将所有消息记录到日志文件中。消息通常报告为标准错误。</p><p>-a logfile：消息追加到日志文件中。</p><p>-q：静默模式，不显示下载信息。</p><p>-c：断点续传。如果目标文件已经存在并且是一个不完整的下载，wget将从中断的地方继续下载，而不是重新开始。</p><p>-O file：将下载的内容保存为指定的文件名，而非URL中包含的文件名。</p><p>-r：启用递归检索，默认递归深度为5。</p><p>-l depth：指定递归最大深度。</p><p>-t number：指定重试次数，指定0或inf以进行无限重试。默认20次。但“连接被拒绝”或“找不到”（404）等致命错误除外，这些错误不会重试。</p><p>-T seconds：设置网络超时时间。这相当于同时指定–dns-timeout、–connect-timeout和–read-timeout。</p><p>-m：打开适合镜像的选项。此选项打开递归和时间戳，设置无限递归深度并保留FTP目录列表。它目前相当于-r -N -l inf –no-remove-listing。</p><p>–no-remove-listing：不要删除FTP检索生成的临时.listing文件。通常，这些文件包含从FTP服务器接收的原始目录列表。不删除它们可能有助于调试，或者当您希望能够轻松检查远程服务器目录的内容时（例如，验证您正在运行的镜像是否完整）。</p><p>-k：下载完成后，转换文档中的链接，使其适合本地查看。</p><p>示例：如果下载的文件/share/doc.html链接到/test/img.gif（或../test/img.gif），则doc.html中的链接将被修改为指向<a href="http://hostname/test/img.gif%E3%80%82">http://hostname/test/img.gif。</a></p><p>-p：下载正确显示给定HTML页面所需的所有文件。这包括诸如内联图像、声音和引用的样式表之类的东西。</p><p>-np：当递归检索时，永远不要上升到父目录。这是一个有用的选项，因为它保证只下载特定层次结构以下的文件。</p><p>–proxy-user=user –proxy-password=password：指定用于在代理服务器上进行身份验证的用户名和密码。</p><h2 id="二、wget下载文件"><a href="#二、wget下载文件" class="headerlink" title="二、wget下载文件"></a>二、wget下载文件</h2><p>使用wget命令，我们可以轻松地下载各种网络资源。无论是单个文件还是整个网站的内容，只需在命令行中输入相应的wget命令即可。</p><p>例如，要下载一个软件安装包，可以执行如下命令：</p><pre class="language-none"><code class="language-none">wget http://example.com/software.tar.gz</code></pre><p>这将会将名为software.tar.gz的软件安装包下载到当前目录下。</p><p>如果安装包较大，在下载过程中遇到网络中断或其他问题导致下载失败，可以使用-c选项继续之前的下载：</p><pre class="language-none"><code class="language-none">wget -c http://example.com/software.tar.gz</code></pre><p>如果需要下载整个网站的内容，可以使用递归下载选项：</p><pre class="language-none"><code class="language-none">wget -r http://example.com/</code></pre><p>或者下载某个目录：</p><pre class="language-none"><code class="language-none">wget -r -np http://example.com/dir1/</code></pre><h2 id="三、curl的用法"><a href="#三、curl的用法" class="headerlink" title="三、curl的用法"></a>三、curl的用法</h2><p>curl是一种使用支持的协议（DICT、FILE、FTP、FTPS、GOPHER、HTTP、HTTPS、IMAP、IMAPS、LDAP、LDAPS、POP3、POP3S、RTMP、RTSP、SCP、SFTP、SMB、SMBS、SMTP、SMTPS、TELNET和TFTP）从服务器传输数据或向服务器传输数据的工具。该命令被设计为在没有用户交互的情况下工作。</p><p>curl提供了大量有用的技巧，如代理支持、用户身份验证、FTP上传、HTTP post、SSL连接、cookie、文件传输恢复、Metalink等。</p><p><strong>curl命令用法</strong></p><h3 id="1、-基本语法"><a href="#1、-基本语法" class="headerlink" title="1、 基本语法"></a>1、 基本语法</h3><p>curl命令的基本语法是：</p><pre class="language-none"><code class="language-none">curl [options] [URL...]</code></pre><p>其中，options是可选的参数，用于定制curl的行为；URL是要访问的网址，可以通过在大括号中写入元素集合，或通过中括号获得字母数字序列，来指定多个URL或URL的一部分，如：</p><pre class="language-none"><code class="language-none">http://example.com/vol[1-4]/part{a,b,c}.html</code></pre><h3 id="2、常用选项-1"><a href="#2、常用选项-1" class="headerlink" title="2、常用选项"></a>2、常用选项</h3><p>curl提供了大量的选项，以下是一些常用的选项：</p><p>-X, –request <command>指定HTTP请求方法，如GET、POST等。</command></p><p>-H, –header <line>添加自定义的请求头。</line></p><p>-d, –data <data>发送POST请求的数据体。</data></p><p>-o, –output <file>将输出保存到文件，而不是标准输出。</file></p><p>-s, –silent静默模式，不显示进度和错误消息。</p><p>-u, –user <a href="user:password">user:password</a> 指定HTTP认证的用户名和密码。</p><p>-U, –proxy-user <a href="user:password">user:password</a>：指定用于代理身份验证的用户名和密码。</p><p>-v, –verbose显示详细的调试信息。</p><p>-k, –insecure允许连接到SSL证书不受信任的服务器。</p><p>-I, –head：（I是字母i大写）仅显示请求头/文档信息。在FTP或FILE文件上使用时，curl仅显示文件大小和上次修改时间。</p><p>-L, –location：自动跟踪重定向。当使用身份验证时，curl只将其凭据发送到初始主机。</p><p>-h, –help：用法帮助。列出所有当前的命令行选项，并附有简短的说明。</p><p><strong>日常使用示例</strong></p><h3 id="1、-发送GET请求"><a href="#1、-发送GET请求" class="headerlink" title="1、 发送GET请求"></a>1、 发送GET请求</h3><pre class="language-none"><code class="language-none">curl https://www.example.com</code></pre><h3 id="2、-发送POST请求，通过请求头设置post内容为json："><a href="#2、-发送POST请求，通过请求头设置post内容为json：" class="headerlink" title="2、 发送POST请求，通过请求头设置post内容为json："></a>2、 发送POST请求，通过请求头设置post内容为json：</h3><pre class="language-none"><code class="language-none">curl -X POST -H "Content-Type: application/json" -d '{"key":"value"}' https://www.example.com/api</code></pre><h3 id="3、下载文件并保存到本地"><a href="#3、下载文件并保存到本地" class="headerlink" title="3、下载文件并保存到本地"></a>3、下载文件并保存到本地</h3><pre class="language-none"><code class="language-none">curl -o output.txt https://www.example.com/file.txt</code></pre><h3 id="4、-使用HTTP认证"><a href="#4、-使用HTTP认证" class="headerlink" title="4、 使用HTTP认证"></a>4、 使用HTTP认证</h3><pre class="language-none"><code class="language-none">curl -u username:password https://www.example.com/protected</code></pre><p><strong>实战案例</strong>：借助curl为Spring Cloud Config编写配置加密与解密脚本</p><p>在微服务架构中，Spring Cloud Config作为一个配置中心，提供了对敏感信息的安全管理功能。通过curl命令，我们能够编写简洁高效的Shell脚本来远程调用Config Server的加密与解密API，从而保障配置数据的安全性和灵活性。</p><p>加密脚本示例：</p><pre class="language-none"><code class="language-none">#!/bin/bashcurl -X POST -H "Content-Type:text/plain" -u $SPRING_SECURITY_USER_NAME:$SPRING_SECURITY_USER_PASSWORD http://127.0.0.1:8888/encrypt -d $1</code></pre><p>该脚本接收一个参数，参数值为待加密的文本。</p><p>解密脚本示例：</p><pre class="language-none"><code class="language-none">#!/bin/bashcurl -X POST -H "Content-Type: text/plain" -u $SPRING_SECURITY_USER_NAME:$SPRING_SECURITY_USER_PASSWORD http://127.0.0.1:8888/decrypt -d $1</code></pre><p>该脚本接收一个参数，参数值为待解密的文本。</p><p>其中，SPRING_SECURITY_USER_NAME和SPRING_SECURITY_USER_PASSWORD是Spring Cloud Config Server中用于配置安全认证的用户名和密码的环境变量，这两个环境变量定义了访问Config Server时所需的基本认证凭据。当Config Server收到一个请求时，它会检查请求头中是否包含正确的认证信息，只有提供有效的认证信息才允许访问。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Awk入门到放弃</title>
      <link href="/2024/03/11/awk-ru-men-dao-fang-qi/"/>
      <url>/2024/03/11/awk-ru-men-dao-fang-qi/</url>
      
        <content type="html"><![CDATA[<p>​awk是一个报告生成器，它拥有强大的文本格式化的能力，这就是专业的说法。<br>​你可能不理解所谓的报告生成器中的”报告”是什么，你可以把”报告”理解为”报表”或者”表格”,也就是说，我们可以利用awk命令，将一些文本整理成我们想要的样子，比如把一些文本整理成”表”的样子，然后再展示出来，刚才概念中提到的”文本格式化的能力”，也就是这个意思，其实这样说可能还是不太容易理解，不用着急，当你看到后面的”示例”时，自然会明白awk所擅长的”文本格式化”能力是什么。<br>​awk是由Alfred Aho 、Peter Weinberger 和 Brian Kernighan这三个人创造的，awk由这个三个人的姓氏的首个字母组成。<br>​awk早期是在unix上实现的，所以，我们现在在linux的所使用的awk其实是gawk，也就是GNU awk，简称为gawk，awk还有一个版本，New awk，简称为nawk，但是linux中最常用的还是gawk。</p><p>​awk其实是一门编程语言，它支持条件判断、数组、循环等功能。所以，我们也可以把awk理解成一个脚本语言解释器。</p><p>grep 、sed、awk被称为linux中的”三剑客”。</p><p>我们总结一下这三个”剑客”的特长。</p><p>grep 更适合单纯的查找或匹配文本</p><p>sed  更适合编辑匹配到的文本</p><p>awk  更适合格式化文本，对文本进行较复杂格式处理</p>]]></content>
      
      
      <categories>
          
          <category> deploy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S配置管理 ConfigMap和Sercret</title>
      <link href="/2024/03/05/k8s-pei-zhi-guan-li-configmap-he-sercret/"/>
      <url>/2024/03/05/k8s-pei-zhi-guan-li-configmap-he-sercret/</url>
      
        <content type="html"><![CDATA[<h1 id="K8S配置管理-ConfigMap和Sercret"><a href="#K8S配置管理-ConfigMap和Sercret" class="headerlink" title="K8S配置管理 ConfigMap和Sercret"></a>K8S配置管理 ConfigMap和Sercret</h1><h3 id="一、ConfigMap"><a href="#一、ConfigMap" class="headerlink" title="一、ConfigMap"></a><strong>一、ConfigMap</strong></h3><h4 id="1、ConfigMap的基本介绍"><a href="#1、ConfigMap的基本介绍" class="headerlink" title="1、ConfigMap的基本介绍"></a>1、ConfigMap的基本介绍</h4><pre class="language-latex" data-language="latex"><code class="language-latex">ConfigMap 是 Kubernetes 中的一种资源对象，用于存储应用程序的配置数据。它可以用于将配置信息与应用程序的 Pod 解耦，从而实现配置的动态管理和灵活性。以下是 ConfigMap 的一些基本介绍和特点：1、存储配置数据：ConfigMap 可以存储各种类型的配置数据，例如环境变量、命令行参数、配置文件等。它将配置数据以键值对的形式组织，并提供一个唯一的名称供应用程序使用。2、解耦配置与应用程序：ConfigMap 允许将应用程序的配置从应用程序本身中分离出来，以实现配置和应用程序的解耦。这样，配置可以在不重启应用程序的情况下进行修改和更新，提供了更好的灵活性和可维护性3、应用程序访问配置：应用程序可以通过环境变量、命令行参数或在容器内挂载配置文件的方式来访问 ConfigMap 中的配置数据。这使得应用程序可以在运行时动态地获取和使用配置信息。4、容易管理和更新：ConfigMap 的配置数据可以通过命令行工具（如 kubectl）或使用Kubernetes 的 API 进行创建、更新和删除。这使得管理和更新配置变得简单和可扩展，可以与应用程序的部署和扩展自动化流程结合使用。5、与 Pod 的关联：ConfigMap 可以与 Pod 进行关联，以便将配置数据传递给 Pod 中的容器。您可以通过将 ConfigMap 挂载为容器的卷（Volume）或设置容器的环境变量来实现配置的传递。总而言之，ConfigMap 是 Kubernetes 中的一种资源对象，用于存储应用程序的配置数据。它通过解耦配置和应用程序，提供了配置的动态管理和灵活性。使用 ConfigMap，您可以轻松地管理和更新应用程序的配置，同时使配置与应用程序的部署和扩展过程解耦。</code></pre><h4 id="2、ConfigMap的创建方法"><a href="#2、ConfigMap的创建方法" class="headerlink" title="2、ConfigMap的创建方法"></a>2、ConfigMap的创建方法</h4><h6 id="1-直接在命令行创建"><a href="#1-直接在命令行创建" class="headerlink" title="1.直接在命令行创建"></a>1.直接在命令行创建</h6><pre class="language-yaml" data-language="yaml"><code class="language-yaml">kubectl create configmap nginx <span class="token punctuation">-</span><span class="token punctuation">-</span>from<span class="token punctuation">-</span>literal=tomcat_port=90 <span class="token punctuation">-</span><span class="token punctuation">-</span>from<span class="token punctuation">-</span>literal=server_name=myapp.nginx.comkubectl describe configmap nginx<span class="token key atrule">Name</span><span class="token punctuation">:</span>         nginx<span class="token key atrule">Namespace</span><span class="token punctuation">:</span>    default<span class="token key atrule">Labels</span><span class="token punctuation">:</span>       &lt;none<span class="token punctuation">&gt;</span><span class="token key atrule">Annotations</span><span class="token punctuation">:</span>  &lt;none<span class="token punctuation">&gt;</span>Data====<span class="token key atrule">tomcat_port</span><span class="token punctuation">:</span><span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token number">90</span><span class="token key atrule">server_name</span><span class="token punctuation">:</span><span class="token punctuation">---</span><span class="token punctuation">-</span>myapp.nginx.comBinaryData====<span class="token key atrule">Events</span><span class="token punctuation">:</span>  &lt;none<span class="token punctuation">&gt;</span></code></pre><h6 id="2-通过文件创建"><a href="#2-通过文件创建" class="headerlink" title="2.通过文件创建"></a>2.通过文件创建</h6><pre class="language-yaml" data-language="yaml"><code class="language-yaml">vim nginx.confserver <span class="token punctuation">{</span> server_name www.nginx.com; listen 80;<span class="token punctuation">}</span>kubectl create configmap nginx <span class="token punctuation">-</span><span class="token punctuation">-</span>from<span class="token punctuation">-</span>file=www=./nginx.conf kubectl describe cm nginx<span class="token key atrule">Name</span><span class="token punctuation">:</span>         nginx<span class="token key atrule">Namespace</span><span class="token punctuation">:</span>    default<span class="token key atrule">Labels</span><span class="token punctuation">:</span>       &lt;none<span class="token punctuation">&gt;</span><span class="token key atrule">Annotations</span><span class="token punctuation">:</span>  &lt;none<span class="token punctuation">&gt;</span>Data====<span class="token key atrule">www</span><span class="token punctuation">:</span><span class="token punctuation">---</span><span class="token punctuation">-</span>server <span class="token punctuation">{</span> server_name www.nginx.com; listen 80;<span class="token punctuation">}</span>BinaryData====<span class="token key atrule">Events</span><span class="token punctuation">:</span>  &lt;none<span class="token punctuation">&gt;</span></code></pre><h6 id="3-编写configmap"><a href="#3-编写configmap" class="headerlink" title="3.编写configmap"></a>3.编写configmap</h6><pre class="language-yaml" data-language="yaml"><code class="language-yaml">cat mysql<span class="token punctuation">-</span>cm.yaml <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqlconfig  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">mysqlConfig</span><span class="token punctuation">:</span> <span class="token string">'123'</span>kubectl apply <span class="token punctuation">-</span>f mysql<span class="token punctuation">-</span>cm.yamlkubectl describe cm mysqlconfig<span class="token key atrule">Name</span><span class="token punctuation">:</span>         mysqlconfig<span class="token key atrule">Namespace</span><span class="token punctuation">:</span>    default<span class="token key atrule">Labels</span><span class="token punctuation">:</span>       app=mysql<span class="token key atrule">Annotations</span><span class="token punctuation">:</span>  &lt;none<span class="token punctuation">&gt;</span>Data====<span class="token key atrule">mysqlConfig</span><span class="token punctuation">:</span><span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token number">123</span>BinaryData====<span class="token key atrule">Events</span><span class="token punctuation">:</span>  &lt;none<span class="token punctuation">&gt;</span></code></pre><h4 id="3、使用ConfigMap"><a href="#3、使用ConfigMap" class="headerlink" title="3、使用ConfigMap"></a>3、使用ConfigMap</h4><h5 id="1-通过环境变量引入-单个"><a href="#1-通过环境变量引入-单个" class="headerlink" title="1.通过环境变量引入(单个)"></a>1.通过环境变量引入(单个)</h5><pre class="language-yaml" data-language="yaml"><code class="language-yaml">创建一个存储MySQL配置的configmapcat mysql.yaml <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token string">"1"</span>  <span class="token key atrule">lower</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>config  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql创建pod引用Configmap中的内容cat mysql<span class="token punctuation">-</span>pod.yaml <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqlpod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sleep 3600"</span><span class="token punctuation">]</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> log_bin    <span class="token comment">#定义环境变量log_bin</span>      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>           <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>config    <span class="token comment">#指定configMap的名字</span>          <span class="token key atrule">key</span><span class="token punctuation">:</span> log              <span class="token comment">#指定ConfigMap中的key</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lower      <span class="token comment">#定义环境变量lower</span>      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>config    <span class="token comment">#指定configMap的名字</span>          <span class="token key atrule">key</span><span class="token punctuation">:</span> lower            <span class="token comment">#指定ConfigMap中的key</span>进入podkubectl exec mysqlpod  <span class="token punctuation">-</span>it <span class="token punctuation">-</span><span class="token punctuation">-</span> /bin/sh查看环境变量是否存在/ <span class="token comment"># printenv | grep lower</span>lower=1/ <span class="token comment"># printenv | grep log</span>log_bin=1</code></pre><h5 id="2-通过环境变量引入-整个configmap"><a href="#2-通过环境变量引入-整个configmap" class="headerlink" title="2.通过环境变量引入(整个configmap)"></a>2.通过环境变量引入(整个configmap)</h5><pre class="language-yaml" data-language="yaml"><code class="language-yaml">cat mysql<span class="token punctuation">-</span>pod.yaml <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqlpod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sleep 3600"</span><span class="token punctuation">]</span>    <span class="token key atrule">envFrom</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">configMapRef</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>config  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never测试：kubectl exec mysqlpod  <span class="token punctuation">-</span>it <span class="token punctuation">-</span><span class="token punctuation">-</span> /bin/sh/ <span class="token comment"># printenv | grep log</span>log=1/ <span class="token comment"># printenv | grep lower</span>lower=1/ <span class="token comment"># exit</span></code></pre><h5 id="3-把ConfigMap做成volume，挂载到Pod"><a href="#3-把ConfigMap做成volume，挂载到Pod" class="headerlink" title="3.把ConfigMap做成volume，挂载到Pod"></a>3.把ConfigMap做成volume，挂载到Pod</h5><pre class="language-yaml" data-language="yaml"><code class="language-yaml">创建ConfigMapcat mysql<span class="token punctuation">-</span>1.yaml <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token string">"1"</span>  <span class="token key atrule">lower</span><span class="token punctuation">:</span> <span class="token string">"1"</span>  <span class="token key atrule">my.cnf</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    [mysqld]    Welcome=IW</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span><span class="token number">1</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql创建Podcat mysql<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>volume.yaml <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>volume  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>volume<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sleep 3600"</span><span class="token punctuation">]</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>config      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /tmp/config  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>config    <span class="token key atrule">configMap</span><span class="token punctuation">:</span>       <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span><span class="token number">1</span>  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never测试：kubectl exec mysql<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>volume  <span class="token punctuation">-</span>it <span class="token punctuation">-</span><span class="token punctuation">-</span> /bin/sh/ <span class="token comment"># ls /tmp/config/</span>log     lower   my.cnf/ <span class="token comment"># cat /tmp/config/log </span>/ <span class="token comment"># cat /tmp/config/log </span>1/ <span class="token comment"># </span>/ <span class="token comment"># cat /tmp/config/lower </span>1/ <span class="token comment"># </span>/ <span class="token comment"># cat /tmp/config/my.cnf  </span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>Welcome=IW</code></pre><h4 id="4、ConfigMap热更新"><a href="#4、ConfigMap热更新" class="headerlink" title="4、ConfigMap热更新"></a>4、ConfigMap热更新</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml">kubectl edit cm mysql<span class="token punctuation">-</span><span class="token number">1</span><span class="token comment"># Please edit the object below. Lines beginning with a '#' will be ignored,</span><span class="token comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span><span class="token comment"># reopened with the relevant failures.</span><span class="token comment">#</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token string">"2"</span>         <span class="token comment">#这里将1修改为2</span>  <span class="token key atrule">lower</span><span class="token punctuation">:</span> <span class="token string">"1"</span>  <span class="token key atrule">my.cnf</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    [mysqld]    Welcome=IW</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">kubectl.kubernetes.io/last-applied-configuration</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">      {"apiVersion":"v1","data":{"log":"1","lower":"1","my.cnf":"[mysqld]\nWelcome=liangxi\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"app":"mysql"},"name":"mysql-1","namespace":"default"}}</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">"2024-03-01T07:19:22Z"</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span><span class="token number">1</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">"435348"</span>  <span class="token key atrule">uid</span><span class="token punctuation">:</span> 9c5plc69<span class="token punctuation">-</span>7249<span class="token punctuation">-</span>3786<span class="token punctuation">-</span>b756<span class="token punctuation">-</span>3344ddjgmbc5<span class="token key atrule">测试</span><span class="token punctuation">:</span>cat /tmp/config/log 2<span class="token comment">#####注意######</span>更新 ConfigMap 后：使用该 ConfigMap 挂载的 Env 不会同步更新使用该 ConfigMap 挂载的 Volume 中的数据需要一段时间（实测大概 10 秒）才能同步更新ENV 是在容器启动的时候注入的，启动之后 kubernetes 就不会再改变环境变量的值，且同一个namespace 中的 pod 的环境变量是不断累加的，为了更新容器中使用 ConfigMap 挂载的配置，可以通过滚动更新 pod 的方式来强制重新挂载 ConfigMap，也可以在更新了 ConfigMap 后，先将副本数设置为 0，再扩容 pod</code></pre><h3 id="二、Secret"><a href="#二、Secret" class="headerlink" title="二、Secret"></a>二、Secret</h3><h4 id="1-Secret描述"><a href="#1-Secret描述" class="headerlink" title="1.Secret描述"></a>1.Secret描述</h4><pre class="language-latex" data-language="latex"><code class="language-latex">Kubernetes (k8s) Secrets 是 Kubernetes 集群中的一种资源对象，用于存储和管理敏感信息，例如密码、令牌、API 密钥和证书等。Kubernetes Secrets 的主要目的是将敏感数据与应用程序代码分离，并提供一种安全的方式来存储和传递这些敏感数据给容器化的应用程序。它们以加密的形式保存，并且只能在需要时才能被解密和使用。以下是关于 Kubernetes Secrets 的一些基本特点和用法：1、类型：Kubernetes Secrets 可以存储任意字节的数据，但通常用于存储字符串格式的敏感信息。2、创建和管理：可以使用 Kubernetes 命令行工具（kubectl）或 Kubernetes API 来创建和管理Secrets。3、加密和解密：Kubernetes Secrets 会将存储的敏感数据加密，并使用 Base64 编码进行存储。在使用 Secrets 时，Kubernetes 会自动将其解码并将解密的值提供给应用程序。4、Secret 类型：Kubernetes 提供了几种不同的 Secret 类型，包括：1）Opaque：适用于存储任意类型的敏感数据，默认情况下以 Base64 编码进行存储。2）Service Account：用于将 Pod 与 Service Account 关联，并将 Service Account 的 Token注入到 Pod 中，以便 Pod 可以与 Kubernetes API 进行交互。3）Docker Registry：用于存储与私有 Docker 注册表的认证信息，以便 Kubernetes 可以拉取私有镜像。4）TLS：用于存储 TLS 证书和私钥。5、使用 Secrets：在 Kubernetes 中使用 Secrets 时，可以通过环境变量、挂载文件或通过卷的方式将其传递给 Pod 中的应用程序。1）环境变量：可以将 Secret 的值作为环境变量传递给应用程序。2）挂载文件：可以将 Secret 中的值以文件的形式挂载到 Pod 中，应用程序可以读取这些文件。3）通过卷：可以将 Secret 中的值作为卷挂载到 Pod 中，应用程序可以从该卷中读取敏感数据。Kubernetes Secrets 提供了一种安全和可扩展的方式来管理敏感数据，并帮助将敏感信息与应用程序代码分离，从而更好地保护应用程序和集群的安全性。</code></pre><h4 id="2-Secret的创建方式"><a href="#2-Secret的创建方式" class="headerlink" title="2.Secret的创建方式"></a>2.Secret的创建方式</h4><h5 id="1-通过命令行创建Secret"><a href="#1-通过命令行创建Secret" class="headerlink" title="1.通过命令行创建Secret"></a>1.通过命令行创建Secret</h5><pre class="language-yaml" data-language="yaml"><code class="language-yaml">kubectl create secret generic mysql<span class="token punctuation">-</span>password <span class="token punctuation">-</span><span class="token punctuation">-</span>from<span class="token punctuation">-</span>literal=password=1kubectl describe secret mysql<span class="token punctuation">-</span>password<span class="token key atrule">Name</span><span class="token punctuation">:</span>         mysql<span class="token punctuation">-</span>password<span class="token key atrule">Namespace</span><span class="token punctuation">:</span>    default<span class="token key atrule">Labels</span><span class="token punctuation">:</span>       &lt;none<span class="token punctuation">&gt;</span><span class="token key atrule">Annotations</span><span class="token punctuation">:</span>  &lt;none<span class="token punctuation">&gt;</span><span class="token key atrule">Type</span><span class="token punctuation">:</span>  OpaqueData====<span class="token key atrule">password</span><span class="token punctuation">:</span>  7 bytes</code></pre><h5 id="2-编写yaml文件"><a href="#2-编写yaml文件" class="headerlink" title="2.编写yaml文件"></a>2.编写yaml文件</h5><pre class="language-yaml" data-language="yaml"><code class="language-yaml">手动加密，基于base64加密<span class="token punctuation">[</span>root@master configmap<span class="token punctuation">]</span><span class="token comment"># echo -n 'admin' | base64</span>YWRtaW4=<span class="token punctuation">[</span>root@master configmap<span class="token punctuation">]</span><span class="token comment"># echo -n '1' | base64</span>MQ==解码：<span class="token punctuation">[</span>root@master configmap<span class="token punctuation">]</span><span class="token comment"># echo MQ== | base64 -d</span>1编写yaml文件cat secret.yaml <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">username</span><span class="token punctuation">:</span> YWRtaW4=  <span class="token key atrule">password</span><span class="token punctuation">:</span> MQ==<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> secret查看资源详细信息kubectl describe secret secret<span class="token key atrule">Name</span><span class="token punctuation">:</span>         secret<span class="token key atrule">Namespace</span><span class="token punctuation">:</span>    default<span class="token key atrule">Labels</span><span class="token punctuation">:</span>       &lt;none<span class="token punctuation">&gt;</span><span class="token key atrule">Annotations</span><span class="token punctuation">:</span>  &lt;none<span class="token punctuation">&gt;</span><span class="token key atrule">Type</span><span class="token punctuation">:</span>  OpaqueData====<span class="token key atrule">password</span><span class="token punctuation">:</span>  1 bytes<span class="token key atrule">username</span><span class="token punctuation">:</span>  5 bytes</code></pre><h4 id="3-使用secret"><a href="#3-使用secret" class="headerlink" title="3.使用secret"></a>3.使用secret</h4><h5 id="1-通过环境变量引入"><a href="#1-通过环境变量引入" class="headerlink" title="1.通过环境变量引入"></a>1.通过环境变量引入</h5><pre class="language-yaml" data-language="yaml"><code class="language-yaml">cat pod<span class="token punctuation">-</span>secret.yaml <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>secert<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sleep 3600"</span><span class="token punctuation">]</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_ROOT_PASSWORD      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">secretKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>password          <span class="token key atrule">key</span><span class="token punctuation">:</span> password测试：kubectl exec <span class="token punctuation">-</span>it pod<span class="token punctuation">-</span>secert <span class="token punctuation">-</span><span class="token punctuation">-</span> /bin/sh/ <span class="token comment"># printenv | grep MYSQL</span>MYSQL_ROOT_PASSWORD=1</code></pre><h5 id="2-通过volume挂载Secret"><a href="#2-通过volume挂载Secret" class="headerlink" title="2.通过volume挂载Secret"></a>2.通过volume挂载Secret</h5><pre class="language-yaml" data-language="yaml"><code class="language-yaml">cat pod_secret_volume.yaml <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>secret<span class="token punctuation">-</span>volume<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sleep 3600"</span><span class="token punctuation">]</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> secret<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/secret      <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> secret<span class="token punctuation">-</span>volume    <span class="token key atrule">secret</span><span class="token punctuation">:</span>      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> secret测试：kubectl exec <span class="token punctuation">-</span>it pod<span class="token punctuation">-</span>secret<span class="token punctuation">-</span>volume <span class="token punctuation">-</span><span class="token punctuation">-</span> /bin/sh/ <span class="token comment"># ls /etc/secret/</span>..2024_03_01_09_21_27.3393208461/  password..data/                            username/ <span class="token comment"># cat /etc/secret/password </span>1/ <span class="token comment"># </span>/ <span class="token comment"># </span>/ <span class="token comment"># cat /etc/secret/username </span>admin/ <span class="token comment"># </span></code></pre>]]></content>
      
      
      <categories>
          
          <category> K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Harbor部署及自签证书</title>
      <link href="/2024/02/06/harbor-bu-shu-zi-qian-zheng-shu/"/>
      <url>/2024/02/06/harbor-bu-shu-zi-qian-zheng-shu/</url>
      
        <content type="html"><![CDATA[<p>​通常我们在使用Docker后会产生很多容器镜像，在这里我们搭建一个Harbor镜像仓库来存放容器镜像，使得拉取镜像时速度更快，更方便，这里会自签证书，在局域网内登录时可以避免登录显示不安全，从而减少编辑/etc/daemon.json文件</p><h2 id="一、基础配置"><a href="#一、基础配置" class="headerlink" title="一、基础配置"></a>一、基础配置</h2><h3 id="1、更换软件源"><a href="#1、更换软件源" class="headerlink" title="1、更换软件源"></a>1、更换软件源</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#备份源文件</span><span class="token function">mkdir</span> /etc/yum.repos.d/bak<span class="token function">mv</span> /etc/yum.repos.d/* /etc/yum.repos.d/bak/ <span class="token operator">&gt;&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token comment">#下载源文件</span><span class="token function">curl</span> <span class="token parameter variable">-L</span> http://mirrors.aliyun.com/repo/Centos-7.repo <span class="token parameter variable">-o</span> /etc/yum.repos.d/CentOS-Base.repo<span class="token comment">#清楚缓存并创建元数据</span>yum clean all <span class="token operator">&amp;&amp;</span> yum makecache</code></pre><h3 id="2、安装基础软件"><a href="#2、安装基础软件" class="headerlink" title="2、安装基础软件"></a>2、安装基础软件</h3><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">vim</span> epel-release.noarch yum-utils device-mapper-persistent-data lvm2 bash-completion <span class="token function">wget</span> tree <span class="token parameter variable">-y</span><span class="token comment">#设置hostname</span>hostnamectl set-hostname server<span class="token builtin class-name">exec</span> <span class="token function">bash</span></code></pre><h3 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加Docker软件源</span>yum-config-manager --add-repo<span class="token operator">=</span>http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment">#安装Docker</span>yum <span class="token function">install</span> docker-ce docker-ce-cli <span class="token parameter variable">-y</span>systemctl start <span class="token function">docker</span>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> <span class="token parameter variable">--now</span><span class="token comment">#验证是否安装成功</span><span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment"># docker info</span>Client: Docker Engine - Community Version:    <span class="token number">25.0</span>.2 Context:    default Debug Mode: <span class="token boolean">false</span> Plugins:  buildx: Docker Buildx <span class="token punctuation">(</span>Docker Inc.<span class="token punctuation">)</span>    Version:  v0.12.1    Path:     /usr/libexec/docker/cli-plugins/docker-buildx  compose: Docker Compose <span class="token punctuation">(</span>Docker Inc.<span class="token punctuation">)</span>    Version:  v2.24.5    Path:     /usr/libexec/docker/cli-plugins/docker-composeServer: Containers: <span class="token number">0</span>  Running: <span class="token number">0</span>  Paused: <span class="token number">0</span>  Stopped: <span class="token number">0</span> Images: <span class="token number">0</span> Server Version: <span class="token number">25.0</span>.2 Storage Driver: overlay2  Backing Filesystem: xfs  Supports d_type: <span class="token boolean">true</span>  Using metacopy: <span class="token boolean">false</span>  Native Overlay Diff: <span class="token boolean">true</span>  userxattr: <span class="token boolean">false</span> Logging Driver: json-file Cgroup Driver: cgroupfs Cgroup Version: <span class="token number">1</span> Plugins:  Volume: <span class="token builtin class-name">local</span>  Network: bridge <span class="token function">host</span> ipvlan macvlan null overlay  Log: awslogs fluentd gcplogs gelf journald json-file <span class="token builtin class-name">local</span> splunk syslog Swarm: inactive Runtimes: io.containerd.runc.v2 runc Default Runtime: runc Init Binary: docker-init containerd version: ae07eda36dd25f8a1b98dfbf587313b99c0190bb runc version: v1.1.12-0-g51d5e94 init version: de40ad0 Security Options:  seccomp   Profile: <span class="token builtin class-name">builtin</span> Kernel Version: <span class="token number">3.10</span>.0-862.el7.x86_64 Operating System: CentOS Linux <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span> OSType: linux Architecture: x86_64 CPUs: <span class="token number">4</span> Total Memory: <span class="token number">3</span>.685GiB Name: localhost.localdomain ID: 3e8c1b2a-50e1-473c-b280-764df30bf4ec Docker Root Dir: /var/lib/docker Debug Mode: <span class="token boolean">false</span> Experimental: <span class="token boolean">false</span> Insecure Registries:  <span class="token number">127.0</span>.0.0/8 Live Restore Enabled: <span class="token boolean">false</span></code></pre><h3 id="4、安装docker-compose"><a href="#4、安装docker-compose" class="headerlink" title="4、安装docker-compose"></a>4、安装docker-compose</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span>  <span class="token string">"https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-O</span> /usr/local/bin/docker-compose<span class="token comment">#增加执行权限</span><span class="token function">chmod</span> a+x /usr/local/bin/docker-compose <span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment"># docker-compose version</span>Docker Compose version v2.24.5</code></pre><h3 id="5、内核升级"><a href="#5、内核升级" class="headerlink" title="5、内核升级"></a>5、内核升级</h3><p>​我这里为了后续软件支持需要升级内核，如不想升级内核可直接跳过此步</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看内核</span><span class="token function">uname</span> <span class="token parameter variable">-sr</span></code></pre><h5 id="1、导入公钥"><a href="#1、导入公钥" class="headerlink" title="1、导入公钥"></a>1、导入公钥</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">--import</span> https://www.elrepo.org/RPM-GPG-KEY-elrepo.org<span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</code></pre><h5 id="2、加载elrepo-kernel元数据"><a href="#2、加载elrepo-kernel元数据" class="headerlink" title="2、加载elrepo-kernel元数据"></a>2、加载elrepo-kernel元数据</h5><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">--disablerepo</span><span class="token operator">=</span><span class="token string">"*"</span> <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span><span class="token string">"elrepo-kernel"</span> repolist</code></pre><blockquote><p><code>kernel-lt</code> 和 <code>kernel-ml</code> 二者的区别：</p><ul><li><code>kernel-ml</code>软件包是根据<code>Linux Kernel Archives</code>的主线稳定分支提供的源构建的。 内核配置基于默认的<code>RHEL-7</code>配置，并根据需要启用了添加的功能。 这些软件包有意命名为<code>kernel-ml</code>，以免与<code>RHEL-7</code>内核发生冲突，因此，它们可以与常规内核一起安装和更新。</li><li><code>kernel-lt</code>包是从<code>Linux Kernel Archives</code>提供的源代码构建的，就像<code>kernel-ml</code>软件包一样。 不同之处在于<code>kernel-lt</code>基于长期支持分支，而<code>kernel-ml</code>基于主线稳定分支。</li></ul><p>在 <code>ELRepo</code>中有两个内核选项，一个是<code>kernel-lt</code>（长期支持版），一个是 <code>kernel-ml</code>（主线最新版本），采用长期支持版本（<code>kernel-lt</code>），会更加稳定。</p></blockquote><h5 id="3、查看可用内核版本"><a href="#3、查看可用内核版本" class="headerlink" title="3、查看可用内核版本"></a>3、查看可用内核版本</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment">#  yum --disablerepo="*" --enablerepo="elrepo-kernel" list available | sort -c</span>Loaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * elrepo-kernel: hkg.mirror.rackspace.comAvailable Packageskernel-ml.x86_64                        <span class="token number">6.7</span>.3-1.el7.elrepo         elrepo-kernelkernel-ml-tools.x86_64                  <span class="token number">6.7</span>.3-1.el7.elrepo         elrepo-kernelkernel-ml-tools-libs.x86_64             <span class="token number">6.7</span>.3-1.el7.elrepo         elrepo-kernelkernel-ml-tools-libs-devel.x86_64       <span class="token number">6.7</span>.3-1.el7.elrepo         elrepo-kernelkernel-ml-headers.x86_64                <span class="token number">6.7</span>.3-1.el7.elrepo         elrepo-kernelkernel-ml-doc.noarch                    <span class="token number">6.7</span>.3-1.el7.elrepo         elrepo-kernelkernel-ml-devel.x86_64                  <span class="token number">6.7</span>.3-1.el7.elrepo         elrepo-kernelkernel-lt-tools.x86_64                  <span class="token number">5.4</span>.268-1.el7.elrepo       elrepo-kernelkernel-lt-tools-libs.x86_64             <span class="token number">5.4</span>.268-1.el7.elrepo       elrepo-kernelkernel-lt-tools-libs-devel.x86_64       <span class="token number">5.4</span>.268-1.el7.elrepo       elrepo-kernelkernel-lt-headers.x86_64                <span class="token number">5.4</span>.268-1.el7.elrepo       elrepo-kernelkernel-lt-doc.noarch                    <span class="token number">5.4</span>.268-1.el7.elrepo       elrepo-kernelkernel-lt-devel.x86_64                  <span class="token number">5.4</span>.268-1.el7.elrepo       elrepo-kernelperf.x86_64                             <span class="token number">5.4</span>.268-1.el7.elrepo       elrepo-kernelpython-perf.x86_64                      <span class="token number">5.4</span>.268-1.el7.elrepo       elrepo-kernel</code></pre><h5 id="4、安装长期支持版本"><a href="#4、安装长期支持版本" class="headerlink" title="4、安装长期支持版本"></a>4、安装长期支持版本</h5><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span><span class="token string">"elrepo-kernel"</span> <span class="token function">install</span> kernel-lt</code></pre><p>​查看当前系统下可用内核</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment"># awk -F\' '$1=="menuentry " {print $2}' /etc/grub2.cfg</span>CentOS Linux <span class="token punctuation">(</span><span class="token number">5.4</span>.268-1.el7.elrepo.x86_64<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>CentOS Linux <span class="token punctuation">(</span><span class="token number">3.10</span>.0-862.el7.x86_64<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>CentOS Linux <span class="token punctuation">(</span><span class="token number">0</span>-rescue-4e37109fc2c64b78804e7b0263d94b67<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span></code></pre><h5 id="5、创建内核配置"><a href="#5、创建内核配置" class="headerlink" title="5、创建内核配置"></a>5、创建内核配置</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span>Generating grub configuration <span class="token function">file</span> <span class="token punctuation">..</span>.Found linux image: /boot/vmlinuz-5.4.268-1.el7.elrepo.x86_64Found initrd image: /boot/initramfs-5.4.268-1.el7.elrepo.x86_64.imgFound linux image: /boot/vmlinuz-3.10.0-862.el7.x86_64Found initrd image: /boot/initramfs-3.10.0-862.el7.x86_64.imgFound linux image: /boot/vmlinuz-0-rescue-4e37109fc2c64b78804e7b0263d94b67Found initrd image: /boot/initramfs-0-rescue-4e37109fc2c64b78804e7b0263d94b67.img<span class="token keyword">done</span><span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><h5 id="6、设置开机加载新内核"><a href="#6、设置开机加载新内核" class="headerlink" title="6、设置开机加载新内核"></a>6、设置开机加载新内核</h5><pre class="language-bash" data-language="bash"><code class="language-bash">grub2-set-default <span class="token number">0</span></code></pre><p>​重启并验证</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">reboot</span></code></pre><p><img src="https://s2.loli.net/2024/02/06/vDIp9es8aflERAu.png" alt="启动内核顺序.png"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment"># uname -sr</span>Linux <span class="token number">5.4</span>.268-1.el7.elrepo.x86_64<span class="token punctuation">[</span>root@server ~<span class="token punctuation">]</span><span class="token comment"># </span></code></pre><h2 id="二、自签证书"><a href="#二、自签证书" class="headerlink" title="二、自签证书"></a>二、自签证书</h2><p>​以下用到域名的地方自行替换成自己的域名我的域名是：iw.harbor</p><h3 id="1、创建ca证书私钥"><a href="#1、创建ca证书私钥" class="headerlink" title="1、创建ca证书私钥"></a>1、创建ca证书私钥</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server /<span class="token punctuation">]</span><span class="token comment"># mkdir /data/cert &amp;&amp; cd /data/cert</span><span class="token punctuation">[</span>root@server cert<span class="token punctuation">]</span><span class="token comment"># openssl genrsa -out ca.key 4096</span>Generating RSA private key, <span class="token number">4096</span> bit long modulus<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>++<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>++e is <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span></code></pre><h3 id="2、创建ca证书"><a href="#2、创建ca证书" class="headerlink" title="2、创建ca证书"></a>2、创建ca证书</h3><pre class="language-bash" data-language="bash"><code class="language-bash">openssl req <span class="token parameter variable">-x509</span> <span class="token parameter variable">-new</span> <span class="token parameter variable">-sha512</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-subj</span> <span class="token string">"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=iw.harbor"</span> <span class="token parameter variable">-key</span> ca.key <span class="token parameter variable">-out</span> ca.crt</code></pre><h3 id="3、生成域名证书"><a href="#3、生成域名证书" class="headerlink" title="3、生成域名证书"></a>3、生成域名证书</h3><h6 id="1、生成私钥"><a href="#1、生成私钥" class="headerlink" title="1、生成私钥"></a>1、生成私钥</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server cert<span class="token punctuation">]</span><span class="token comment"># openssl genrsa -out iw.harbor.key 4096</span>Generating RSA private key, <span class="token number">4096</span> bit long modulus<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.++<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.++e is <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span></code></pre><h6 id="2、生成证书签名请求（CSR）"><a href="#2、生成证书签名请求（CSR）" class="headerlink" title="2、生成证书签名请求（CSR）"></a>2、生成证书签名请求（CSR）</h6><pre class="language-bash" data-language="bash"><code class="language-bash">openssl req <span class="token parameter variable">-sha512</span> <span class="token parameter variable">-new</span> <span class="token parameter variable">-subj</span> <span class="token string">"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=iw.harbor"</span> <span class="token parameter variable">-key</span> iw.harbor.key <span class="token parameter variable">-out</span> iw.harbor.csr</code></pre><h6 id="3、生成x509-v3扩展文件"><a href="#3、生成x509-v3扩展文件" class="headerlink" title="3、生成x509 v3扩展文件"></a>3、生成x509 v3扩展文件</h6><p>​这里有两种方式，如果是域名则选择第一种，IP则选择第二种</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################</span><span class="token comment">#域名访问，注意修改域名等信息</span><span class="token function">cat</span> <span class="token operator">&gt;</span> v3.ext <span class="token operator">&lt;&lt;-</span><span class="token string">EOFauthorityKeyIdentifier=keyid,issuerbasicConstraints=CA:FALSEkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEnciphermentextendedKeyUsage = serverAuthsubjectAltName = @alt_names[alt_names]DNS.1=iw.harbor  #xxxx.yourdomain 加上二级域名DNS.2=harbor     #yourdomainDNS.3=server     #hostnameEOF</span><span class="token comment">################################</span><span class="token comment">#下面是第二种（IP访问）注意IP更换为自己的服务器IP</span><span class="token function">cat</span> <span class="token operator">&gt;</span> v3.ext <span class="token operator">&lt;&lt;-</span><span class="token string">EOFauthorityKeyIdentifier=keyid,issuerbasicConstraints=CA:FALSEkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEnciphermentextendedKeyUsage = serverAuthsubjectAltName = IP:192.168.200.147EOF</span></code></pre><h3 id="4、生成主机证书"><a href="#4、生成主机证书" class="headerlink" title="4、生成主机证书"></a>4、生成主机证书</h3><p>​使用上面生出的v3.ext证书生出harbor主机证书</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server cert<span class="token punctuation">]</span><span class="token comment"># openssl x509 -req -sha512 -days 3650 -extfile v3.ext -CA ca.crt -CAkey ca.key -CAcreateserial -in iw.harbor.csr -out iw.harbor.crt</span>Signature ok<span class="token assign-left variable">subject</span><span class="token operator">=</span>/C<span class="token operator">=</span>CN/ST<span class="token operator">=</span>Beijing/L<span class="token operator">=</span>Beijing/O<span class="token operator">=</span>example/OU<span class="token operator">=</span>Personal/CN<span class="token operator">=</span>iw.harborGetting CA Private Key</code></pre><h3 id="5、提供证书给Harbor和Docker"><a href="#5、提供证书给Harbor和Docker" class="headerlink" title="5、提供证书给Harbor和Docker"></a>5、提供证书给Harbor和Docker</h3><h6 id="1、转换crt为cert，提供给Docker守护进程"><a href="#1、转换crt为cert，提供给Docker守护进程" class="headerlink" title="1、转换crt为cert，提供给Docker守护进程"></a>1、转换crt为cert，提供给Docker守护进程</h6><p>​Docker守护进程会将.crt文件解释为CA证书，并将.cert文件解释为客户端证书</p><pre class="language-bash" data-language="bash"><code class="language-bash">openssl x509 <span class="token parameter variable">-inform</span> PEM <span class="token parameter variable">-in</span> iw.harbor.crt <span class="token parameter variable">-out</span> iw.harbor.cert</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> iw.harbor.crt /etc/pki/ca-trust/source/anchors/iw.harbor.crt </code></pre><h6 id="2、创建文件夹并将服务器证书、密钥和CA文件复制到Harbor主机的Docker-certificate文件夹中"><a href="#2、创建文件夹并将服务器证书、密钥和CA文件复制到Harbor主机的Docker-certificate文件夹中" class="headerlink" title="2、创建文件夹并将服务器证书、密钥和CA文件复制到Harbor主机的Docker certificate文件夹中"></a>2、创建文件夹并将服务器证书、密钥和CA文件复制到Harbor主机的Docker certificate文件夹中</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker/certs.d/iw.harbor/<span class="token function">cp</span> iw.harbor.cert iw.harbor.key ca.crt /etc/docker/certs.d/iw.harbor/</code></pre><p>​最终Docker目录结构如下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server cert<span class="token punctuation">]</span><span class="token comment"># tree /etc/docker/certs.d/</span>/etc/docker/certs.d/└── iw.harbor    ├── ca.crt    ├── iw.harbor.cert    └── iw.harbor.key<span class="token number">1</span> directory, <span class="token number">3</span> files</code></pre><h6 id="3、重启Docker"><a href="#3、重启Docker" class="headerlink" title="3、重启Docker"></a>3、重启Docker</h6><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl restart <span class="token function">docker</span></code></pre><h2 id="三、部署Harbor"><a href="#三、部署Harbor" class="headerlink" title="三、部署Harbor"></a>三、部署Harbor</h2><h3 id="1、下载harbor离线安装包"><a href="#1、下载harbor离线安装包" class="headerlink" title="1、下载harbor离线安装包"></a>1、下载harbor离线安装包</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/goharbor/harbor/releases/download/v2.10.0/harbor-offline-installer-v2.10.0.tgz</code></pre><h5 id="1、解压文件"><a href="#1、解压文件" class="headerlink" title="1、解压文件"></a>1、解压文件</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> harbor-offline-installer-v2.10.0.tgz</code></pre><h5 id="2、修改Harbor配置文件"><a href="#2、修改Harbor配置文件" class="headerlink" title="2、修改Harbor配置文件"></a>2、修改Harbor配置文件</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> harbor/<span class="token comment">#复制配置文件</span><span class="token function">cp</span> harbor.yml.tmpl harbor.yml<span class="token function">vim</span> harbor.yml</code></pre><p><img src="https://s2.loli.net/2024/02/06/lhIGe3tyvHYEgDu.png" alt="Harbor配置文件修改.png"></p><h5 id="3、运行脚本部署harbor"><a href="#3、运行脚本部署harbor" class="headerlink" title="3、运行脚本部署harbor"></a>3、运行脚本部署harbor</h5><pre class="language-bash" data-language="bash"><code class="language-bash">./install.sh</code></pre><p>完成后出现以下界面</p><p><img src="https://s2.loli.net/2024/02/06/Bz9isAMopfYcOm7.png" alt="部署完成.png"></p><p>用浏览器访问还是会出现不安全提示，可以把CA证书下载到需要访问该仓库的服务器手动导入浏览器</p><p>可以看到导入证书后，浏览器url左侧不再提示不安全等字样</p><p><img src="https://s2.loli.net/2024/02/06/h4VdK1W2QOs6FYD.png" alt="CA证书导入.png"></p>]]></content>
      
      
      <categories>
          
          <category> deploy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Deploy </tag>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qcow2格式镜像密码重置</title>
      <link href="/2023/09/20/qcow2-ge-shi-jing-xiang-mi-ma-chong-zhi/"/>
      <url>/2023/09/20/qcow2-ge-shi-jing-xiang-mi-ma-chong-zhi/</url>
      
        <content type="html"><![CDATA[<p>在使用Qemu&amp;KVM的时候，除了能通过下载正常ISO镜像自己制作qcow2格式镜像外，还可以通过官方给出的网站直接下载qcow2的镜像，但是qcow2镜像的密码在使用前需要修改一下，否则无法登陆系统</p><h3 id="一、下载镜像"><a href="#一、下载镜像" class="headerlink" title="一、下载镜像"></a>一、下载镜像</h3><p>通过镜像网站下载合适镜像，这里给大家提供一个镜像网站</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//mirrors.ustc.edu.cn/</span></span></code></pre><h3 id="二、安装guestfish相关软件"><a href="#二、安装guestfish相关软件" class="headerlink" title="二、安装guestfish相关软件"></a>二、安装guestfish相关软件</h3><pre class="language-none"><code class="language-none">apt-get install guestfish libguestfs-tools -y</code></pre><h3 id="三、用openssl生成密码的哈希值"><a href="#三、用openssl生成密码的哈希值" class="headerlink" title="三、用openssl生成密码的哈希值"></a>三、用openssl生成密码的哈希值</h3><p><strong>这里假设用户密码为123456</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">root@controller:~<span class="token comment"># openssl passwd -1 123456</span><span class="token variable">$1</span><span class="token variable">$fyhDdJd5</span><span class="token variable">$j5ul5YBIiskv8eVtUZhXO</span><span class="token builtin class-name">.</span> <span class="token comment">#这是生成的密码哈希值，复制后一会儿替换到shadow文件中</span></code></pre><h3 id="四、挂载运行需改密码的镜像"><a href="#四、挂载运行需改密码的镜像" class="headerlink" title="四、挂载运行需改密码的镜像"></a>四、挂载运行需改密码的镜像</h3><pre class="language-bash" data-language="bash"><code class="language-bash">root@controller:~<span class="token comment"># guestfish --rw -a exam.qcow2</span>Welcome to guestfish, the guest filesystem shell <span class="token keyword">for</span>editing virtual machine filesystems and disk images.Type: ‘help’ <span class="token keyword">for</span> <span class="token builtin class-name">help</span> on commands      ‘man’ to <span class="token builtin class-name">read</span> the manual      ‘quit’ to quit the shell<span class="token operator">&gt;</span><span class="token operator">&lt;</span>fs<span class="token operator">&gt;</span> run  <span class="token number">100</span>% ⟦▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒⟧ 00:00<span class="token operator">&gt;</span><span class="token operator">&lt;</span>fs<span class="token operator">&gt;</span> list-filesystems  <span class="token comment">#查看镜像分区信息</span>/dev/sda1: xfs<span class="token operator">&gt;</span><span class="token operator">&lt;</span>fs<span class="token operator">&gt;</span> <span class="token function">mount</span> /dev/sda1 / <span class="token comment">#挂载sda1分区到/目录</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>fs<span class="token operator">&gt;</span> <span class="token function">vi</span> /etc/shadow <span class="token comment">#用上方生成的密码哈希值替换下图圈出位置</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>fs<span class="token operator">&gt;</span> quit <span class="token comment">#保存退出，该镜像现在的root用户登录密码为123456</span></code></pre><p><img src="https://s2.loli.net/2023/09/20/nEsgF5CiNVTcZ4p.png" alt="更换密码哈希值"></p><h3 id="五、验证"><a href="#五、验证" class="headerlink" title="五、验证"></a>五、验证</h3><p>将修改后的镜像上传到Openstack平台或使用KVM进行验证，下面以Openstack平台进行验证</p><h4 id="1、上传镜像"><a href="#1、上传镜像" class="headerlink" title="1、上传镜像"></a>1、上传镜像</h4><pre class="language-bash" data-language="bash"><code class="language-bash">glance image-create <span class="token parameter variable">--name</span> exam <span class="token punctuation">\</span>--disk-format qcow2 --container-format bare <span class="token punctuation">\</span><span class="token parameter variable">--progress</span> <span class="token operator">&lt;</span>./exam.qcow2<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token number">100</span>%+------------------+----------------------------------------------------------------------------------+<span class="token operator">|</span> Property         <span class="token operator">|</span> Value                                                                            <span class="token operator">|</span>+------------------+----------------------------------------------------------------------------------+<span class="token operator">|</span> checksum         <span class="token operator">|</span> e098998a68cd7d7db9ea5067295100a5                                                 <span class="token operator">|</span><span class="token operator">|</span> container_format <span class="token operator">|</span> bare                                                                             <span class="token operator">|</span><span class="token operator">|</span> created_at       <span class="token operator">|</span> <span class="token number">2023</span>-09-20T02:15:30Z                                                             <span class="token operator">|</span><span class="token operator">|</span> disk_format      <span class="token operator">|</span> qcow2                                                                            <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">id</span>               <span class="token operator">|</span> e3336bdd-06b3-4e8c-8f44-2ecd869dc2e5                                             <span class="token operator">|</span><span class="token operator">|</span> min_disk         <span class="token operator">|</span> <span class="token number">0</span>                                                                                <span class="token operator">|</span><span class="token operator">|</span> min_ram          <span class="token operator">|</span> <span class="token number">0</span>                                                                                <span class="token operator">|</span><span class="token operator">|</span> name             <span class="token operator">|</span> exam                                                                             <span class="token operator">|</span><span class="token operator">|</span> os_hash_algo     <span class="token operator">|</span> sha512                                                                           <span class="token operator">|</span><span class="token operator">|</span> os_hash_value    <span class="token operator">|</span> c0efa9b784967c73aca670f8db1bdc2f94e6becbfe685ae97418dcc4360904d271270243b39b973b <span class="token operator">|</span><span class="token operator">|</span>                  <span class="token operator">|</span> f39196b8a8736e27a9e6511b6cdb85d95051b14341853174                                 <span class="token operator">|</span><span class="token operator">|</span> os_hidden        <span class="token operator">|</span> False                                                                            <span class="token operator">|</span><span class="token operator">|</span> owner            <span class="token operator">|</span> e9af856c4210432dac35bbc8127765fa                                                 <span class="token operator">|</span><span class="token operator">|</span> protected        <span class="token operator">|</span> False                                                                            <span class="token operator">|</span><span class="token operator">|</span> size             <span class="token operator">|</span> <span class="token number">615710720</span>                                                                        <span class="token operator">|</span><span class="token operator">|</span> status           <span class="token operator">|</span> active                                                                           <span class="token operator">|</span><span class="token operator">|</span> tags             <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                                                               <span class="token operator">|</span><span class="token operator">|</span> updated_at       <span class="token operator">|</span> <span class="token number">2023</span>-09-20T02:15:35Z                                                             <span class="token operator">|</span><span class="token operator">|</span> virtual_size     <span class="token operator">|</span> <span class="token number">42949672960</span>                                                                      <span class="token operator">|</span><span class="token operator">|</span> visibility       <span class="token operator">|</span> shared                                                                           <span class="token operator">|</span>+------------------+----------------------------------------------------------------------------------+</code></pre><h4 id="2、创建实例"><a href="#2、创建实例" class="headerlink" title="2、创建实例"></a>2、创建实例</h4><pre class="language-bash" data-language="bash"><code class="language-bash">root@controller:~<span class="token comment"># openstack server create --image exam --flavor test --network ext test-server</span>+-------------------------------------+---------------------------------------------+<span class="token operator">|</span> Field                               <span class="token operator">|</span> Value                                       <span class="token operator">|</span>+-------------------------------------+---------------------------------------------+<span class="token operator">|</span> OS-DCF:diskConfig                   <span class="token operator">|</span> MANUAL                                      <span class="token operator">|</span><span class="token operator">|</span> OS-EXT-AZ:availability_zone         <span class="token operator">|</span>                                             <span class="token operator">|</span><span class="token operator">|</span> OS-EXT-SRV-ATTR:host                <span class="token operator">|</span> None                                        <span class="token operator">|</span><span class="token operator">|</span> OS-EXT-SRV-ATTR:hypervisor_hostname <span class="token operator">|</span> None                                        <span class="token operator">|</span><span class="token operator">|</span> OS-EXT-SRV-ATTR:instance_name       <span class="token operator">|</span>                                             <span class="token operator">|</span><span class="token operator">|</span> OS-EXT-STS:power_state              <span class="token operator">|</span> NOSTATE                                     <span class="token operator">|</span><span class="token operator">|</span> OS-EXT-STS:task_state               <span class="token operator">|</span> scheduling                                  <span class="token operator">|</span><span class="token operator">|</span> OS-EXT-STS:vm_state                 <span class="token operator">|</span> building                                    <span class="token operator">|</span><span class="token operator">|</span> OS-SRV-USG:launched_at              <span class="token operator">|</span> None                                        <span class="token operator">|</span><span class="token operator">|</span> OS-SRV-USG:terminated_at            <span class="token operator">|</span> None                                        <span class="token operator">|</span><span class="token operator">|</span> accessIPv4                          <span class="token operator">|</span>                                             <span class="token operator">|</span><span class="token operator">|</span> accessIPv6                          <span class="token operator">|</span>                                             <span class="token operator">|</span><span class="token operator">|</span> addresses                           <span class="token operator">|</span>                                             <span class="token operator">|</span><span class="token operator">|</span> adminPass                           <span class="token operator">|</span> WJnr5VxzZ2aP                                <span class="token operator">|</span><span class="token operator">|</span> config_drive                        <span class="token operator">|</span>                                             <span class="token operator">|</span><span class="token operator">|</span> created                             <span class="token operator">|</span> <span class="token number">2023</span>-09-20T02:18:18Z                        <span class="token operator">|</span><span class="token operator">|</span> flavor                              <span class="token operator">|</span> <span class="token builtin class-name">test</span> <span class="token punctuation">(</span>cc42047d-0958-4d4a-bdce-b77fe8cdddb7<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span> hostId                              <span class="token operator">|</span>                                             <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">id</span>                                  <span class="token operator">|</span> 0e77fc99-9eea-48a8-931e-edc741d8c079        <span class="token operator">|</span><span class="token operator">|</span> image                               <span class="token operator">|</span> exam <span class="token punctuation">(</span>e3336bdd-06b3-4e8c-8f44-2ecd869dc2e5<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span> key_name                            <span class="token operator">|</span> None                                        <span class="token operator">|</span><span class="token operator">|</span> name                                <span class="token operator">|</span> test-server                                 <span class="token operator">|</span><span class="token operator">|</span> progress                            <span class="token operator">|</span> <span class="token number">0</span>                                           <span class="token operator">|</span><span class="token operator">|</span> project_id                          <span class="token operator">|</span> e9af856c4210432dac35bbc8127765fa            <span class="token operator">|</span><span class="token operator">|</span> properties                          <span class="token operator">|</span>                                             <span class="token operator">|</span><span class="token operator">|</span> security_groups                     <span class="token operator">|</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">'default'</span>                              <span class="token operator">|</span><span class="token operator">|</span> status                              <span class="token operator">|</span> BUILD                                       <span class="token operator">|</span><span class="token operator">|</span> updated                             <span class="token operator">|</span> <span class="token number">2023</span>-09-20T02:18:18Z                        <span class="token operator">|</span><span class="token operator">|</span> user_id                             <span class="token operator">|</span> 8f99a870714b468c9c1500e6ff41f90c            <span class="token operator">|</span><span class="token operator">|</span> volumes_attached                    <span class="token operator">|</span>                                             <span class="token operator">|</span>+-------------------------------------+---------------------------------------------+</code></pre><h4 id="3、验证登录"><a href="#3、验证登录" class="headerlink" title="3、验证登录"></a>3、验证登录</h4><pre class="language-bash" data-language="bash"><code class="language-bash">openstack console url show test-server <span class="token comment">#通过该命令查看实例vnc链接</span>+----------+-----------------------------------------------------------------------------------------------+<span class="token operator">|</span> Field    <span class="token operator">|</span> Value                                                                                         <span class="token operator">|</span>+----------+-----------------------------------------------------------------------------------------------+<span class="token operator">|</span> protocol <span class="token operator">|</span> vnc                                                                                           <span class="token operator">|</span><span class="token operator">|</span> <span class="token builtin class-name">type</span>     <span class="token operator">|</span> novnc                                                                                         <span class="token operator">|</span><span class="token operator">|</span> url      <span class="token operator">|</span> http://192.168.200.99:6080/vnc_auto.html?path<span class="token operator">=</span>%3Ftoken%3D744f5bd3-dc42-4163-b549-53d0299b52c4 <span class="token operator">|</span>+----------+-----------------------------------------------------------------------------------------------+</code></pre><p><strong>通过浏览器访问上方URL链接</strong></p><p><img src="https://s2.loli.net/2023/09/20/BmqIYXVgxb5u4iF.png" alt="验证"></p>]]></content>
      
      
      <categories>
          
          <category> Qemu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Openstack </tag>
            
            <tag> Qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack_install</title>
      <link href="/2023/09/19/openstack-install/"/>
      <url>/2023/09/19/openstack-install/</url>
      
        <content type="html"><![CDATA[<p>脚本内需修改部分变量为你当前系统的环境</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#/bin/bash</span><span class="token comment">#############Ubuntu2204#############</span><span class="token assign-left variable">provider_net</span><span class="token operator">=</span><span class="token string">"ens36"</span><span class="token assign-left variable">host_name</span><span class="token operator">=</span><span class="token string">"controller"</span><span class="token assign-left variable">host_ip</span><span class="token operator">=</span><span class="token string">"192.168.26.153"</span><span class="token assign-left variable">mariadb_root_pass</span><span class="token operator">=</span><span class="token string">"1"</span><span class="token comment">#rabbit_pass="RABBIT_PASS"</span><span class="token comment">#keystone_pass="ADMIN_PASS"</span><span class="token keyword">function</span> <span class="token function-name function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[32m<span class="token variable">$1</span><span class="token entity" title="\033">\033</span>[0m"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">showErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[31m<span class="token variable">$1</span><span class="token entity" title="\033">\033</span>[0m"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   showMsg <span class="token string">"配置主机名以及hosts解析"</span>   hostnamectl set-hostname <span class="token variable">$host_name</span>   <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$host_ip</span> <span class="token variable">$host_name</span>"</span> <span class="token operator">&gt;</span> /etc/hosts<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">apt_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"配置Apt源"</span>    <span class="token function">cp</span> <span class="token parameter variable">-rfv</span> /etc/apt/sources.list /etc/apt/sources.list.back    <span class="token function">cat</span> /etc/apt/sources.list.back <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/cn.archive.ubuntu.com/mirrors.163.com/'</span> <span class="token operator">&gt;</span> /etc/apt/sources.list    showMsg <span class="token string">"更新Apt源"</span>    <span class="token function">apt</span> update    showMsg <span class="token string">"升级软件包"</span>    <span class="token function">apt</span> upgrade <span class="token parameter variable">-y</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        showMsg <span class="token string">"添加openstack zed源"</span>        add-apt-repository cloud-archive:zed <span class="token parameter variable">-y</span>    <span class="token keyword">else</span>        <span class="token function">apt-get</span> update --fix-missing        dpkg <span class="token parameter variable">--configure</span> <span class="token parameter variable">-a</span>        <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-f</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">mariadb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"安装Mariadb数据库"</span>    <span class="token function">apt</span> <span class="token function">install</span> mariadb-server python3-pymysql <span class="token parameter variable">-y</span>    showMsg <span class="token string">"配置数据库"</span>    <span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/mysql/mariadb.conf.d/99-openstack.cnf <span class="token operator">&lt;&lt;</span><span class="token string">EOF[mysqld]bind-address = <span class="token variable">$host_ip</span>default-storage-engine = innodbinnodb_file_per_table = onmax_connections = 4096collation-server = utf8_general_cicharacter-set-server = utf8EOF</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">mariadb_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"重启数据库服务"</span>    <span class="token function">service</span> mysql restart    showMsg <span class="token string">"初始化数据库"</span>    <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">expect</span> <span class="token parameter variable">-y</span> <span class="token operator">&amp;&gt;</span> /dev/null    <span class="token function">expect</span> <span class="token parameter variable">-c</span> <span class="token string">"    spawn mysql_secure_installation    expect <span class="token entity" title="\&quot;">\"</span>none):<span class="token entity" title="\&quot;">\"</span>    send <span class="token entity" title="\&quot;">\"</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\&quot;">\"</span>    expect <span class="token entity" title="\&quot;">\"</span>authentication<span class="token entity" title="\&quot;">\"</span>    send <span class="token entity" title="\&quot;">\"</span>n<span class="token entity" title="\r">\r</span><span class="token entity" title="\&quot;">\"</span>    expect <span class="token entity" title="\&quot;">\"</span>password?<span class="token entity" title="\&quot;">\"</span>    send <span class="token entity" title="\&quot;">\"</span>y<span class="token entity" title="\r">\r</span><span class="token entity" title="\&quot;">\"</span>    expect <span class="token entity" title="\&quot;">\"</span>password:<span class="token entity" title="\&quot;">\"</span>    send <span class="token entity" title="\&quot;">\"</span><span class="token variable">${mariadb_root_pass}</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\&quot;">\"</span>    expect <span class="token entity" title="\&quot;">\"</span>password:<span class="token entity" title="\&quot;">\"</span>    send <span class="token entity" title="\&quot;">\"</span><span class="token variable">${mariadb_root_pass}</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\&quot;">\"</span>    expect <span class="token entity" title="\&quot;">\"</span>users?<span class="token entity" title="\&quot;">\"</span>    send <span class="token entity" title="\&quot;">\"</span>y<span class="token entity" title="\r">\r</span><span class="token entity" title="\&quot;">\"</span>    expect <span class="token entity" title="\&quot;">\"</span>remotely?<span class="token entity" title="\&quot;">\"</span>    send <span class="token entity" title="\&quot;">\"</span>n<span class="token entity" title="\r">\r</span><span class="token entity" title="\&quot;">\"</span>    expect <span class="token entity" title="\&quot;">\"</span>it?<span class="token entity" title="\&quot;">\"</span>    send <span class="token entity" title="\&quot;">\"</span>y<span class="token entity" title="\r">\r</span><span class="token entity" title="\&quot;">\"</span>    expect <span class="token entity" title="\&quot;">\"</span>now?<span class="token entity" title="\&quot;">\"</span>    send <span class="token entity" title="\&quot;">\"</span>y<span class="token entity" title="\r">\r</span><span class="token entity" title="\&quot;">\"</span>    expect eof    "</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">rabbitmq_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"安装Rabbitmq-server"</span>    <span class="token function">apt</span> <span class="token function">install</span> rabbitmq-server <span class="token parameter variable">-y</span>    rabbitmqctl add_user openstack RABBIT_PASS    rabbitmqctl set_permissions openstack <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">memcached_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"安装Memcached"</span>    <span class="token function">apt</span> <span class="token function">install</span> memcached python3-memcache <span class="token parameter variable">-y</span>    showMsg <span class="token string">"配置Memcached"</span>    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/127.0.0.1/<span class="token variable">${host_ip}</span>/"</span> /etc/memcached.conf<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">etcd_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"安装Etcd"</span>    <span class="token function">apt</span> <span class="token function">install</span> etcd <span class="token parameter variable">-y</span>    <span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/default/etcd <span class="token operator">&lt;&lt;</span><span class="token string">EOFETCD_NAME="<span class="token variable">$host_name</span>"ETCD_DATA_DIR="/var/lib/etcd"ETCD_INITIAL_CLUSTER_STATE="new"ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster-01"ETCD_INITIAL_CLUSTER="controller=http://<span class="token variable">$host_ip</span>:2380"ETCD_INITIAL_ADVERTISE_PEER_URLS="http://<span class="token variable">$host_ip</span>:2380"ETCD_ADVERTISE_CLIENT_URLS="http://<span class="token variable">$host_ip</span>:2379"ETCD_LISTEN_PEER_URLS="http://<span class="token variable">$host_ip</span>:2380"ETCD_LISTEN_CLIENT_URLS="http://<span class="token variable">$host_ip</span>:2379"EOF</span>    systemctl <span class="token builtin class-name">enable</span> etcd    systemctl restart etcd<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">keystone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"配置Keystone数据库"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"CREATE DATABASE keystone;"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY 'KEYSTONE_DBPASS';"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'KEYSTONE_DBPASS';"</span>    showMsg <span class="token string">"安装Keystone软件包"</span>    <span class="token function">apt</span> <span class="token function">install</span> keystone  python3-openstackclient crudini <span class="token parameter variable">-y</span>    <span class="token function">cp</span> /etc/keystone/keystone.conf /etc/keystone/keystone.conf.back    <span class="token function">cat</span> /etc/keystone/keystone.conf.back <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-Ev</span> <span class="token string">"^$|^#"</span> <span class="token operator">&gt;</span> /etc/keystone/keystone.conf    crudini <span class="token parameter variable">--set</span> /etc/keystone/keystone.conf database connection mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone    crudini <span class="token parameter variable">--set</span> /etc/keystone/keystone.conf token provider fernet    showMsg <span class="token string">"同步数据库"</span>    <span class="token function">su</span> <span class="token parameter variable">-s</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"keystone-manage db_sync"</span> keystone    keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone    keystone-manage credential_setup --keystone-user keystone --keystone-group keystone    showMsg <span class="token string">"引导服务"</span>    keystone-manage bootstrap --bootstrap-password ADMIN_PASS --bootstrap-admin-url http://controller:5000/v3/ --bootstrap-internal-url http://controller:5000/v3/ --bootstrap-public-url http://controller:5000/v3/ --bootstrap-region-id RegionOne    <span class="token builtin class-name">echo</span> <span class="token string">"ServerName <span class="token variable">$host_name</span>"</span> <span class="token operator">&gt;&gt;</span> /etc/apache2/apache2.conf    <span class="token function">cat</span> <span class="token operator">&gt;</span> admin-openrc.sh <span class="token operator">&lt;&lt;</span><span class="token string">EOFexport OS_USERNAME=adminexport OS_PASSWORD=ADMIN_PASSexport OS_PROJECT_NAME=adminexport OS_USER_DOMAIN_NAME=Defaultexport OS_PROJECT_DOMAIN_NAME=Defaultexport OS_AUTH_URL=http://controller:5000/v3export OS_IDENTITY_API_VERSION=3EOF</span>    showMsg <span class="token string">"keystone测试"</span>    <span class="token builtin class-name">source</span> admin-openrc.sh    openstack token issue    openstack project create <span class="token parameter variable">--domain</span> default <span class="token parameter variable">--description</span> <span class="token string">"Service Project"</span> <span class="token function">service</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">glance_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"配置Glance数据库"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"CREATE DATABASE glance;"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' IDENTIFIED BY 'GLANCE_DBPASS';"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%'  IDENTIFIED BY 'GLANCE_DBPASS';"</span>    showMsg <span class="token string">"创建Glance用户"</span>    <span class="token builtin class-name">source</span> admin-openrc.sh    openstack user create <span class="token parameter variable">--domain</span> default <span class="token parameter variable">--password</span> GLANCE_PASS glance    openstack role <span class="token function">add</span> <span class="token parameter variable">--project</span> <span class="token function">service</span> <span class="token parameter variable">--user</span> glance admin    showMsg <span class="token string">"创建Glance服务"</span>    openstack <span class="token function">service</span> create <span class="token parameter variable">--name</span> glance <span class="token parameter variable">--description</span> <span class="token string">"OpenStack Image"</span> image    showMsg <span class="token string">"创建Glance端点"</span>    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne  image public http://controller:9292    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne image internal http://controller:9292    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne image admin http://controller:9292    showMsg <span class="token string">"安装Glance软件包"</span>    <span class="token function">apt</span> <span class="token function">install</span> glance <span class="token parameter variable">-y</span>    showMsg <span class="token string">"修改Glance配置文件"</span>    <span class="token function">cp</span> /etc/glance/glance-api.conf /etc/glance/glance-api.conf.back    <span class="token function">cat</span> /etc/glance/glance-api.conf.back <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-Ev</span> <span class="token string">"^$|^#"</span> <span class="token operator">&gt;</span> /etc/glance/glance-api.conf    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf database use_keystone_quotas True    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf database connection mysql+pymysql://glance:GLANCE_DBPASS@controller/glance    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf keystone_authtoken www_authenticate_uri http://controller:5000    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf keystone_authtoken auth_url http://controller:5000    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf keystone_authtoken memcached_servers controller:11211    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf keystone_authtoken auth_type password    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf keystone_authtoken project_domain_name Default    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf keystone_authtoken user_domain_name Default    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf keystone_authtoken project_name <span class="token function">service</span>    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf keystone_authtoken username glance     crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf keystone_authtoken password GLANCE_PASS    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf paste_deploy flavor keystone    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store stores file,http    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store default_store <span class="token function">file</span>    crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store filesystem_store_datadir /var/lib/glance/images/    showMsg <span class="token string">"同步Glance数据库"</span>    <span class="token function">su</span> <span class="token parameter variable">-s</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"glance-manage db_sync"</span> glance    showMsg <span class="token string">"重启Glance服务"</span>    <span class="token function">service</span> glance-api restart    showMsg <span class="token string">"测试Glance"</span>    <span class="token builtin class-name">source</span> admin-openrc.sh    <span class="token function">sleep</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> openstack image list<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">placement_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"配置Placement数据库"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">" CREATE DATABASE placement;"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'localhost' IDENTIFIED BY 'PLACEMENT_DBPASS';"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'%' IDENTIFIED BY 'PLACEMENT_DBPASS';"</span>    showMsg <span class="token string">"创建Placement用户"</span>    <span class="token builtin class-name">source</span> admin-openrc.sh    openstack user create <span class="token parameter variable">--domain</span> default <span class="token parameter variable">--password</span> PLACEMENT_PASS placement    openstack role <span class="token function">add</span> <span class="token parameter variable">--project</span> <span class="token function">service</span> <span class="token parameter variable">--user</span> placement admin    showMsg <span class="token string">"创建Placement服务"</span>    openstack <span class="token function">service</span> create <span class="token parameter variable">--name</span> placement <span class="token parameter variable">--description</span> <span class="token string">"Placement API"</span> placement    showMsg <span class="token string">"创建Placement端点"</span>    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne placement public http://controller:8778    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne placement internal http://controller:8778    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne placement admin http://controller:8778    showMsg <span class="token string">"安装Placement软件包"</span>    <span class="token function">apt</span> <span class="token function">install</span> placement-api <span class="token parameter variable">-y</span>    showMsg <span class="token string">"配置Placement"</span>    <span class="token function">cp</span> /etc/placement/placement.conf /etc/placement/placement.conf.back    <span class="token function">cat</span> /etc/placement/placement.conf.back <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-Ev</span> <span class="token string">"^$|^#"</span> <span class="token operator">&gt;</span> /etc/placement/placement.conf    crudini <span class="token parameter variable">--set</span> /etc/placement/placement.conf placement_database connection mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement    crudini <span class="token parameter variable">--set</span> /etc/placement/placement.conf api auth_strategy keystone    crudini <span class="token parameter variable">--set</span> /etc/placement/placement.conf keystone_authtoken auth_url    crudini <span class="token parameter variable">--set</span> /etc/placement/placement.conf keystone_authtoken auth_url http://controller:5000/v3    crudini <span class="token parameter variable">--set</span> /etc/placement/placement.conf keystone_authtoken memcached_servers controller:11211    crudini <span class="token parameter variable">--set</span> /etc/placement/placement.conf keystone_authtoken auth_type password    crudini <span class="token parameter variable">--set</span> /etc/placement/placement.conf keystone_authtoken project_domain_name Default    crudini <span class="token parameter variable">--set</span> /etc/placement/placement.conf keystone_authtoken user_domain_name Default    crudini <span class="token parameter variable">--set</span> /etc/placement/placement.conf keystone_authtoken project_name <span class="token function">service</span>    crudini <span class="token parameter variable">--set</span> /etc/placement/placement.conf keystone_authtoken username placement    crudini <span class="token parameter variable">--set</span> /etc/placement/placement.conf keystone_authtoken password PLACEMENT_PASS    showMsg <span class="token string">"同步placement数据库"</span>    <span class="token function">su</span> <span class="token parameter variable">-s</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"placement-manage db sync"</span> placement    <span class="token function">service</span> apache2 restart <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">10</span>    showMsg <span class="token string">"服务检查"</span>    placement-status upgrade check<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">nova_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"配置Nova数据库"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"CREATE DATABASE nova_api;"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"CREATE DATABASE nova;"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"CREATE DATABASE nova_cell0;"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' IDENTIFIED BY 'NOVA_DBPASS';"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' IDENTIFIED BY 'NOVA_DBPASS';"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' IDENTIFIED BY 'NOVA_DBPASS';"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' IDENTIFIED BY 'NOVA_DBPASS';"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' IDENTIFIED BY 'NOVA_DBPASS';"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' IDENTIFIED BY 'NOVA_DBPASS';"</span>    showMsg <span class="token string">"创建Nova用户"</span>    <span class="token builtin class-name">source</span> admin-openrc.sh    openstack user create <span class="token parameter variable">--domain</span> default <span class="token parameter variable">--password</span> NOVA_PASS nova    openstack role <span class="token function">add</span> <span class="token parameter variable">--project</span> <span class="token function">service</span> <span class="token parameter variable">--user</span> nova admin    showMsg <span class="token string">"创建Nova服务"</span>    openstack <span class="token function">service</span> create <span class="token parameter variable">--name</span> nova <span class="token parameter variable">--description</span> <span class="token string">"OpenStack Compute"</span> compute    showMsg <span class="token string">"创建Nova服务端点"</span>    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne compute public http://controller:8774/v2.1    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne compute internal http://controller:8774/v2.1    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne compute admin http://controller:8774/v2.1    showMsg <span class="token string">"安装Nova软件包"</span>    <span class="token function">apt</span> <span class="token function">install</span> nova-api nova-conductor nova-novncproxy nova-scheduler nova-compute libvirt-daemon-driver-lxc qemu <span class="token parameter variable">-y</span>    showMsg <span class="token string">"修改Nova配置文件"</span>    <span class="token function">cp</span> /etc/nova/nova.conf /etc/nova/nova.conf.back    <span class="token function">cat</span> /etc/nova/nova.conf.back <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-Ev</span> <span class="token string">"^$|^#"</span> <span class="token operator">&gt;</span> /etc/nova/nova.conf    <span class="token comment">#打包错误 </span>    <span class="token comment">#sed -i '/log_dir/d' /etc/nova/nova.conf </span>    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf api_database my_ip <span class="token string">"<span class="token variable">$host_ip</span>"</span>    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf api_database connection mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf database connection mysql+pymysql://nova:NOVA_DBPASS@controller/nova    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf DEFAULT transport_url rabbit://openstack:RABBIT_PASS@controller:5672/    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf api auth_strategy keystone    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf keystone_authtoken www_authenticate_uri  http://controller:5000/    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf keystone_authtoken auth_url http://controller:5000/    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf keystone_authtoken memcached_servers controller:11211    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf keystone_authtoken auth_type password    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf keystone_authtoken project_domain_name Default    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf keystone_authtoken user_domain_name Default    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf keystone_authtoken project_name <span class="token function">service</span>    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf keystone_authtoken username nova    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf keystone_authtoken password NOVA_PASS    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf libvirt virt_type kvm    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf scheduler discover_hosts_in_cells_interval <span class="token number">300</span>    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf vnc enabled <span class="token boolean">true</span>    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf vnc server_listen <span class="token string">'$my_ip'</span>    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf vnc server_proxyclient_address <span class="token string">'$my_ip'</span>    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf vnc novncproxy_base_url http://<span class="token string">"<span class="token variable">$host_ip</span>"</span>:6080/vnc_auto.html    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf glance api_servers  http://controller:9292    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf oslo_concurrency lock_path /var/lib/nova/tmp    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf placement region_name RegionOne    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf placement project_domain_name Default    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf placement project_name <span class="token function">service</span>    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf placement auth_type password    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf placement user_domain_name Default    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf placement auth_url http://controller:5000/v3    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf placement username placement    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf placement password PLACEMENT_PASS    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf neutron auth_url http://controller:5000    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf neutron auth_type password    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf neutron project_domain_name default    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf neutron user_domain_name default    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf neutron region_name RegionOne    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf neutron project_name <span class="token function">service</span>    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf neutron username neutron    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf neutron password NEUTRON_PASS    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf neutron service_metadata_proxy <span class="token boolean">true</span>    crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf neutron metadata_proxy_shared_secret METADATA_SECRET    showMsg <span class="token string">"同步Nova数据库"</span>    <span class="token function">su</span> <span class="token parameter variable">-s</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"nova-manage api_db sync"</span> nova    <span class="token function">su</span> <span class="token parameter variable">-s</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"nova-manage cell_v2 map_cell0"</span> nova    <span class="token function">su</span> <span class="token parameter variable">-s</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"nova-manage cell_v2 create_cell --name=cell1 --verbose"</span> nova    <span class="token function">su</span> <span class="token parameter variable">-s</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"nova-manage db sync"</span> nova    showMsg <span class="token string">"注册检查"</span>    <span class="token function">su</span> <span class="token parameter variable">-s</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"nova-manage cell_v2 list_cells"</span> nova    showMsg <span class="token string">"重启Nova服务"</span>    <span class="token function">service</span> nova-api restart    <span class="token function">service</span> nova-scheduler restart    <span class="token function">service</span> nova-conductor restart    <span class="token function">service</span> nova-novncproxy restart    showMsg <span class="token string">"发现计算节点"</span>    openstack compute <span class="token function">service</span> list <span class="token parameter variable">--service</span> nova-compute    <span class="token function">su</span> <span class="token parameter variable">-s</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"nova-manage cell_v2 discover_hosts --verbose"</span> nova<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">neutron_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"配置Neutron数据库"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"CREATE DATABASE neutron;"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY 'NEUTRON_DBPASS';"</span>    mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"<span class="token variable">$mariadb_root_pass</span>"</span> <span class="token parameter variable">-e</span> <span class="token string">"GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY 'NEUTRON_DBPASS';"</span>    showMsg <span class="token string">"添加Neutron用户"</span>    <span class="token builtin class-name">source</span> admin-openrc.sh    openstack user create <span class="token parameter variable">--domain</span> default <span class="token parameter variable">--password</span> NEUTRON_PASS neutron    openstack role <span class="token function">add</span> <span class="token parameter variable">--project</span> <span class="token function">service</span> <span class="token parameter variable">--user</span> neutron admin    showMsg <span class="token string">"创建Neutron服务"</span>    openstack <span class="token function">service</span> create <span class="token parameter variable">--name</span> neutron <span class="token parameter variable">--description</span> <span class="token string">"OpenStack Networking"</span> network    showMsg <span class="token string">"创建Neutron服务端点"</span>    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne network public http://controller:9696    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne network internal http://controller:9696    openstack endpoint create <span class="token parameter variable">--region</span> RegionOne network admin http://controller:9696    showMsg <span class="token string">"安装Neutron软件包"</span>    <span class="token function">apt</span> <span class="token function">install</span> neutron-server neutron-plugin-ml2 neutron-linuxbridge-agent neutron-l3-agent neutron-dhcp-agent neutron-metadata-agent <span class="token parameter variable">-y</span>    showMsg <span class="token string">"编辑Neutron配置文件"</span>    <span class="token function">cp</span> /etc/neutron/neutron.conf /etc/neutron/neutron.conf.back    <span class="token function">cat</span> /etc/neutron/neutron.conf.back <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-Ev</span> <span class="token string">"^$|^#"</span> <span class="token operator">&gt;</span> /etc/neutron/neutron.conf    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf database connection mysql+pymysql://neutron:NEUTRON_DBPASS@controller/neutron    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf DEFAULT core_plugin ml2    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf DEFAULT service_plugins router    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf DEFAULT transport_url rabbit://openstack:RABBIT_PASS@controller    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf DEFAULT auth_strategy keystone    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_status_changes <span class="token boolean">true</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_data_changes <span class="token boolean">true</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf keystone_authtoken www_authenticate_uri http://controller:5000    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf keystone_authtoken auth_url http://controller:5000    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf keystone_authtoken memcached_servers controller:11211    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf keystone_authtoken auth_type password    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf keystone_authtoken project_domain_name default    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf keystone_authtoken user_domain_name default    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf keystone_authtoken project_name <span class="token function">service</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf keystone_authtoken username neutron    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf keystone_authtoken password NEUTRON_PASS    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf experimental linuxbridge <span class="token boolean">true</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf nova auth_url http://controller:5000    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf nova auth_type password    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf nova project_domain_name default    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf nova user_domain_name default    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf nova region_name RegionOne    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf nova project_name <span class="token function">service</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf nova username nova    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf nova password NOVA_PASS    crudini <span class="token parameter variable">--set</span> /etc/neutron/neutron.conf oslo_concurrency lock_path /var/lib/neutron/tmp    showMsg <span class="token string">"编辑二层配置文件"</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/ml2_conf.ini ml2 type_drivers flat,vlan,vxlan    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/ml2_conf.ini ml2 tenant_network_types vlan    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/ml2_conf.ini ml2 mechanism_drivers linuxbridge,l2population    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/ml2_conf.ini ml2 extension_drivers port_security    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_flat flat_networks provider    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup enable_ipset <span class="token boolean">true</span>    showMsg <span class="token string">"编辑LinuxBridge配置文件"</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini linux_bridge physical_interface_mappings provider:<span class="token variable">$provider_net</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan enable_vxlan <span class="token boolean">false</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan local_ip <span class="token variable">$host_ip</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan l2_population <span class="token boolean">true</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup enable_security_group <span class="token boolean">true</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/plugins/ml2/linuxbridge_agent.ini firewall_driver neutron.agent.linux.iptables_firewall.IptablesFirewallDriver    showMsg <span class="token string">"编辑Dhcp代理服务配置文件"</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/dhcp_agent.ini DEFAULT interface_driver linuxbridge    crudini <span class="token parameter variable">--set</span> /etc/neutron/dhcp_agent.ini DEFAULT dhcp_driver neutron.agent.linux.dhcp.Dnsmasq    crudini <span class="token parameter variable">--set</span> /etc/neutron/dhcp_agent.ini DEFAULT enable_isolated_metadata <span class="token boolean">true</span>    showMsg <span class="token string">"编辑三层配置文件"</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/l3_agent.ini DEFAULT interface_driver linuxbridge    showMsg <span class="token string">"配置元数据代理"</span>    crudini <span class="token parameter variable">--set</span> /etc/neutron/metadata_agent.ini DEFAULT nova_metadata_host controller    crudini <span class="token parameter variable">--set</span> /etc/neutron/metadata_agent.ini DEFAULT metadata_proxy_shared_secret <span class="token operator">=</span> METADATA_SECRET    showMsg <span class="token string">"同步Neutron数据库"</span>    <span class="token function">su</span> <span class="token parameter variable">-s</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head"</span> neutron    showMsg <span class="token string">"配置内核转发"</span>    <span class="token builtin class-name">echo</span> <span class="token string">'net.bridge.bridge-nf-call-iptables = 1'</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf    <span class="token builtin class-name">echo</span> <span class="token string">'net.bridge.bridge-nf-call-ip6tables = 1'</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf    <span class="token function">sysctl</span> <span class="token parameter variable">-p</span>    showMsg <span class="token string">"重启Nova,Neutron相关服务"</span>    <span class="token function">service</span> nova-compute restart    <span class="token function">service</span> neutron-linuxbridge-agent restart    systemctl restart nova-api neutron-server neutron-linuxbridge-agent neutron-dhcp-agent neutron-metadata-agent neutron-l3-agent    showMsg <span class="token string">"测试Neutron"</span>    <span class="token function">sleep</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> openstack network agent list<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">horizon_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"安装dashboard"</span>    <span class="token function">apt</span> <span class="token function">install</span> openstack-dashboard <span class="token parameter variable">-y</span>    showMsg <span class="token string">"配置dashboard"</span>    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@OPENSTACK_HOST = "127.0.0.1"@OPENSTACK_HOST = "'</span><span class="token variable">${host_ip}</span><span class="token string">'"@'</span> /etc/openstack-dashboard/local_settings.py    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@^#SESSION_ENGINE@SESSION_ENGINE@'</span> /etc/openstack-dashboard/local_settings.py    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@.signed_cookies@.cache@'</span> /etc/openstack-dashboard/local_settings.py    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@127.0.0.1:11211@'</span><span class="token variable">${host_name}</span><span class="token string">':11211@'</span> /etc/openstack-dashboard/local_settings.py    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@^OPENSTACK_KEYSTONE_URL@#OPENSTACK_KEYSTONE_URL@'</span> /etc/openstack-dashboard/local_settings.py    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'/#OPENSTACK_KEYSTONE_URL/a\OPENSTACK_KEYSTONE_URL = "http://%s:5000/identity/v3" % OPENSTACK_HOST'</span> /etc/openstack-dashboard/local_settings.py    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@UTC@Asia/Shanghai@'</span> /etc/openstack-dashboard/local_settings.py    <span class="token builtin class-name">echo</span> <span class="token string">'OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True'</span> <span class="token operator">&gt;&gt;</span> /etc/openstack-dashboard/local_settings.py    <span class="token function">cat</span> <span class="token operator">&gt;&gt;</span> /etc/openstack-dashboard/local_settings.py <span class="token operator">&lt;&lt;</span><span class="token string">EOFOPENSTACK_API_VERSIONS = {    "identity": 3,    "image": 2,    "volume": 3,}EOF</span>    <span class="token builtin class-name">echo</span> <span class="token string">'OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = "Default"'</span> <span class="token operator">&gt;&gt;</span> /etc/openstack-dashboard/local_settings.py    <span class="token builtin class-name">echo</span> <span class="token string">'OPENSTACK_KEYSTONE_DEFAULT_ROLE = "user"'</span> <span class="token operator">&gt;&gt;</span> /etc/openstack-dashboard/local_settings.py    showMsg <span class="token string">"重载apache2配置"</span>    systemctl reload apache2    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">}</span>    <span class="token keyword">do</span>        <span class="token function">sleep</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> showMsg <span class="token string">"等待服务启动...<span class="token variable">$i</span>"</span>    <span class="token keyword">done</span>    showMsg <span class="token string">"访问Horizon http://<span class="token variable">$host_ip</span>/horizon"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">service_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    showMsg <span class="token string">"Nova服务检查"</span><span class="token assign-left variable">nova_svc</span><span class="token operator">=</span><span class="token punctuation">(</span>nova-apinova-computenova-conductornova-novncproxynova-scheduler<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">${nova_svc<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token keyword">do</span>    systemctl status <span class="token variable">$i</span> <span class="token operator">&amp;&gt;</span> /dev/null    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        showMsg <span class="token string">"服务 <span class="token variable">$i</span> 正常"</span>    <span class="token keyword">else</span>        showErr <span class="token string">"服务 <span class="token variable">$i</span> 存在故障请检查日志 /var/log/<span class="token variable">$i</span>.log"</span>        showMsg <span class="token string">"尝试重启服务 <span class="token variable">$i</span>"</span>        systemctl restart <span class="token variable">$i</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sleep</span> <span class="token number">5</span>        showMsg <span class="token string">"请再次检查"</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">check_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token assign-left variable">kernel_n</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /boot/grub/grub.cfg <span class="token operator">|</span> <span class="token function">grep</span> vmlinuz <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $2}'</span> <span class="token operator">|</span><span class="token function">awk</span> -Fvmlinuz- <span class="token string">'{print $2}'</span><span class="token variable">`</span></span>    <span class="token function">uname</span> <span class="token parameter variable">-r</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"<span class="token variable">$kernel_n</span>"</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>          mariadb        mariadb_service        rabbitmq_service        memcached_service        etcd_service        keystone        glance_service        placement_service        nova_service        neutron_service        horizon_service    <span class="token keyword">else</span>        showErr <span class="token string">"请重启计算机后再次运行此脚本"</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token builtin class-name">echo</span> <span class="token string">"*******************************************************************************"</span><span class="token builtin class-name">echo</span> <span class="token string">"************************* Openstack Zed ***************************************"</span><span class="token builtin class-name">echo</span> <span class="token string">"*******************************************************************************"</span><span class="token builtin class-name">echo</span> <span class="token string">"********************** 0. 初 始 化 安 装 环 境 ********************************"</span><span class="token builtin class-name">echo</span> <span class="token string">"********************** 1. 一 键 部 署 安 装 ***********************************"</span><span class="token builtin class-name">echo</span> <span class="token string">"********************** 2. 服 务 检 查 *****************************************"</span><span class="token builtin class-name">echo</span> <span class="token string">"*******************************************************************************"</span><span class="token builtin class-name">echo</span> <span class="token string">"*************************Openstack Deploy Shell********************************"</span><span class="token builtin class-name">echo</span> <span class="token string">"*******************************************************************************"</span><span class="token builtin class-name">echo</span> <span class="token string">"*******************************************************************************"</span><span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入数字:"</span> chose<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$chose</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>       showErr <span class="token string">"请输入数字"</span>  <span class="token builtin class-name">exit</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$chose</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token keyword">then</span>  pre  apt_source<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$chose</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>  check_update<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$chose</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token keyword">then</span>  service_check<span class="token keyword">else</span>  <span class="token builtin class-name">exit</span><span class="token keyword">fi</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> deploy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> Openstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/08/hello-world/"/>
      <url>/2023/09/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Wordpress</title>
      <link href="/2023/09/07/docker-bu-shu-wordpress/"/>
      <url>/2023/09/07/docker-bu-shu-wordpress/</url>
      
        <content type="html"><![CDATA[<p>WordPress是一款能让您建立出色网站、博客或应用程序的开源软件，下面是以Docker的方式部署</p><h3 id="启动MySQL容器作为Wordpress的数据库"><a href="#启动MySQL容器作为Wordpress的数据库" class="headerlink" title="启动MySQL容器作为Wordpress的数据库"></a>启动MySQL容器作为Wordpress的数据库</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">--name</span> wp-mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root  <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">33306</span>:3306 <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:8.0</code></pre><h4 id="进入MySQL容器对数据库进行配置"><a href="#进入MySQL容器对数据库进行配置" class="headerlink" title="进入MySQL容器对数据库进行配置"></a>进入MySQL容器对数据库进行配置</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> wp-mysql /bin/bash<span class="token comment">#登录数据库</span>mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span class="token comment">#创建用户及对用户赋权</span>create user <span class="token string">'wp'</span>@<span class="token string">'%'</span> identified by <span class="token string">'wordpress'</span><span class="token punctuation">;</span>create database wordpress<span class="token punctuation">;</span>grant all privileges on wordpress.* to <span class="token string">'wp'</span>@<span class="token string">'%'</span> identified by <span class="token string">'wordpress'</span><span class="token punctuation">;</span><span class="token comment">#8.0以上版本去掉结尾identified by 'wordpress'换成with grant option</span></code></pre><h3 id="启动Wordpress容器"><a href="#启动Wordpress容器" class="headerlink" title="启动Wordpress容器"></a>启动Wordpress容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> wordpress <span class="token parameter variable">-itd</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">WORDPRESS_DB_NAME</span><span class="token operator">=</span>wordpress <span class="token punctuation">\</span>        <span class="token parameter variable">-e</span> <span class="token assign-left variable">WORDPRESS_DB_USER</span><span class="token operator">=</span>wp <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">WORDPRESS_DB_PASSWORD</span><span class="token operator">=</span>wordpress <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">WORDPRESS_DB_HOST</span><span class="token operator">=</span><span class="token number">172.17</span>.0.2 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">30912</span>:80 wordpress:latest</code></pre><h3 id="访问-http-locahost-30912-即可打开WordPress"><a href="#访问-http-locahost-30912-即可打开WordPress" class="headerlink" title="访问 http://locahost:30912 即可打开WordPress"></a>访问 <a href="http://locahost:30912/">http://locahost:30912</a> 即可打开WordPress</h3>]]></content>
      
      
      <categories>
          
          <category> deploy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S1.25.2搭建（ubuntu2002）</title>
      <link href="/2023/05/20/k8s1.25.2-da-jian-ubuntu2002/"/>
      <url>/2023/05/20/k8s1.25.2-da-jian-ubuntu2002/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes 是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。 Kubernetes 拥有一个庞大且快速增长的生态，其服务、支持和工具的使用范围相当广泛。</p><p>Kubernetes这个名字源于希腊语，意为“舵手”或“飞行员”。k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。 Google 在 2014 年开源了 Kubernetes 项目。</p><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><h3 id="containerd简介"><a href="#containerd简介" class="headerlink" title="containerd简介"></a>containerd简介</h3><p>containerd是一个工业级标准的容器运行时，它强调简单性、健壮性和可移植性。containerd可以在宿主机中管理完整的容器生命周期，包括容器镜像的传输和存储、容器的执行和管理、存储和网络等。</p><h3 id="Docker-VS-Containerd"><a href="#Docker-VS-Containerd" class="headerlink" title="Docker VS Containerd"></a>Docker VS Containerd</h3><p>containerd是从Docker中分离出来的一个项目，可以作为一个底层容器运行时，现在它成了Kubernete容器运行时更好的选择。</p><h3 id="kubernetes为什么要弃用docker作为容器运行时，而选择contianerd呢？"><a href="#kubernetes为什么要弃用docker作为容器运行时，而选择contianerd呢？" class="headerlink" title="kubernetes为什么要弃用docker作为容器运行时，而选择contianerd呢？"></a>kubernetes为什么要弃用docker作为容器运行时，而选择contianerd呢？</h3><ul><li><p>如果你使用Docker作为K8S容器运行时的话，kubelet需要先要通过 dockershim 去调用Docker，再通过Docker去调用containerd。</p></li><li><p>如果你使用containerd作为K8S容器运行时的话，由于containerd内置了 CRI (Container Runtime Interface：容器运行时接口)插件，kubelet可以直接调用containerd。</p></li></ul><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>每台机器RAM至少2G，2CPU核或更多，每台机器保证可以正常访问公网</p><table><thead><tr><th align="center">Hardware</th><th align="center">System</th><th align="center">hostname</th><th align="center">IP</th><th align="center">Cluster Version</th><th align="center">Containerd Version</th></tr></thead><tbody><tr><td align="center">2V4G100G</td><td align="center">Ubuntu20.04</td><td align="center">k8s-master-node1</td><td align="center">192.168.31.128/24</td><td align="center">1.25.2</td><td align="center">1.6.21</td></tr><tr><td align="center">2V6G60G</td><td align="center">Ubuntu20.04</td><td align="center">k8s-worker-node1</td><td align="center">192.168.31.129/24</td><td align="center">1.25.2</td><td align="center">1.6.21</td></tr><tr><td align="center">2V6G60G</td><td align="center">Ubuntu20.04</td><td align="center">k8s-worker-node2</td><td align="center">192.168.31.130/24</td><td align="center">1.25.2</td><td align="center">1.6.21</td></tr></tbody></table><h2 id="一、搭建前准备"><a href="#一、搭建前准备" class="headerlink" title="一、搭建前准备"></a>一、搭建前准备</h2><h5 id="关闭swap分区"><a href="#关闭swap分区" class="headerlink" title="关闭swap分区"></a>关闭swap分区</h5><pre class="language-bash" data-language="bash"><code class="language-bash">root@k8s:~<span class="token comment"># swapoff  -a</span>root@k8s:~<span class="token comment"># sed -ri 's/.*swap.*/#&amp;/' /etc/fstab</span>root@k8s:~<span class="token comment"># mount -a</span>root@k8s:~<span class="token comment"># free -h</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:          <span class="token number">3</span>.8Gi       <span class="token number">1</span>.2Gi       100Mi       <span class="token number">8</span>.0Mi       <span class="token number">2</span>.5Gi       <span class="token number">2</span>.3GiSwap:            0B          0B          0B</code></pre><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><pre class="language-bash" data-language="bash"><code class="language-bash">root@k8s:~<span class="token comment"># systemctl disable ufw --now</span>Synchronizing state of ufw.service with SysV <span class="token function">service</span> script with /lib/systemd/systemd-sysv-install.Executing: /lib/systemd/systemd-sysv-install disable ufw</code></pre><h5 id="安装辅助软件"><a href="#安装辅助软件" class="headerlink" title="安装辅助软件"></a>安装辅助软件</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common <span class="token function">wget</span> net-tools</code></pre><h5 id="升级所有已安装软件包"><a href="#升级所有已安装软件包" class="headerlink" title="升级所有已安装软件包"></a>升级所有已安装软件包</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> upgrade <span class="token parameter variable">-y</span></code></pre><h2 id="二、安装containerd"><a href="#二、安装containerd" class="headerlink" title="二、安装containerd"></a>二、安装containerd</h2><h4 id="1、安装前的基础配置"><a href="#1、安装前的基础配置" class="headerlink" title="1、安装前的基础配置"></a>1、安装前的基础配置</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/modules-load.d/containerd.conf</span>overlaybr_netfilterEOF</span><span class="token function">sudo</span> modprobe overlay<span class="token function">sudo</span> modprobe br_netfilter</code></pre><h4 id="2、设置必要的系统参数"><a href="#2、设置必要的系统参数" class="headerlink" title="2、设置必要的系统参数"></a>2、设置必要的系统参数</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/sysctl.d/99-kubernetes-cri.conf</span>net.bridge.bridge-nf-call-iptables  = 1net.ipv4.ip_forward                 = 1net.bridge.bridge-nf-call-ip6tables = 1EOF</span><span class="token comment"># 应用 sysctl 参数无需重新启动,并查看参数是否生效</span><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">--system</span> <span class="token operator">|</span> <span class="token function">grep</span> net.bridge. </code></pre><h4 id="3、安装containerd"><a href="#3、安装containerd" class="headerlink" title="3、安装containerd"></a>3、安装containerd</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span><span class="token function">apt-get</span> update <span class="token function">apt-get</span> <span class="token function">install</span> containerd.io <span class="token parameter variable">-y</span></code></pre><h4 id="4、配置containerd"><a href="#4、配置containerd" class="headerlink" title="4、配置containerd"></a>4、配置containerd</h4><p>用containerd生成默认配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">containerd config default <span class="token operator">&gt;</span> /etc/containerd/config.toml</code></pre><p>修改配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/containerd/config.toml<span class="token comment">#默认镜像用的是k8s官方的，需使用科学上网，这里改为国内阿里云镜像仓库。</span>sandbox_image <span class="token operator">=</span> <span class="token string">"registry.k8s.io/pause:3.6"</span>改为sandbox_image <span class="token operator">=</span> <span class="token string">"registry.aliyuncs.com/google_containers/pause:3.7"</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>plugins.<span class="token string">"io.containerd.grpc.v1.cri"</span>.containerd.runtimes.runc.options<span class="token punctuation">]</span>            BinaryName <span class="token operator">=</span> <span class="token string">""</span>            CriuImagePath <span class="token operator">=</span> <span class="token string">""</span>            CriuPath <span class="token operator">=</span> <span class="token string">""</span>            CriuWorkPath <span class="token operator">=</span> <span class="token string">""</span>            IoGid <span class="token operator">=</span> <span class="token number">0</span>            IoUid <span class="token operator">=</span> <span class="token number">0</span>            NoNewKeyring <span class="token operator">=</span> <span class="token boolean">false</span>            NoPivotRoot <span class="token operator">=</span> <span class="token boolean">false</span>            Root <span class="token operator">=</span> <span class="token string">""</span>            ShimCgroup <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#            SystemdCgroup = false</span><span class="token comment">#这里将SystemdCgroup = false改为True</span>SystemdCgroup <span class="token operator">=</span> True</code></pre><p>到这里重启containerd即可</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl restart containerd</code></pre><p>这里会遇到一个错误使用ctictl 命令会报错（具体报错如下）,需配置unix套件</p><pre class="language-bash" data-language="bash"><code class="language-bash">WARN<span class="token punctuation">[</span>0000<span class="token punctuation">]</span> image connect using default endpoints: <span class="token punctuation">[</span>unix:///var/run/dockershim.sock unix:///run/containerd/containerd.sock unix:///run/crio/crio.sock<span class="token punctuation">]</span>. As the default settings are now deprecated, you should <span class="token builtin class-name">set</span> the endpoint instead. ERRO<span class="token punctuation">[</span>0002<span class="token punctuation">]</span> connect endpoint <span class="token string">'unix:///var/run/dockershim.sock'</span>, <span class="token function">make</span> sure you are running as root and the endpoint has been started: context deadline exceeded</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置unix套件</span>crictl config runtime-endpoint unix:///run/containerd/containerd.sock</code></pre><h2 id="三、安装kubernetes"><a href="#三、安装kubernetes" class="headerlink" title="三、安装kubernetes"></a>三、安装kubernetes</h2><h4 id="1、添加国内kubernetes源"><a href="#1、添加国内kubernetes源" class="headerlink" title="1、添加国内kubernetes源"></a>1、添加国内kubernetes源</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg <span class="token operator">|</span> apt-key <span class="token function">add</span> -<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span>/etc/apt/sources.list.d/kubernetes.list</span>deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial mainEOF</span><span class="token function">apt-get</span> update</code></pre><h4 id="2、安装kubelet、kubeadm、kubectl"><a href="#2、安装kubelet、kubeadm、kubectl" class="headerlink" title="2、安装kubelet、kubeadm、kubectl"></a>2、安装kubelet、kubeadm、kubectl</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看软件有哪些版本并确定安装版本</span><span class="token function">apt-cache</span> madison kubelet<span class="token function">apt-cache</span> madison kubeadm<span class="token function">apt-cache</span> madison kubectl<span class="token comment">#这里集群安装1.25.2版本所以三个组件都安装1.25.2-00版本</span><span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token assign-left variable">kubelet</span><span class="token operator">=</span><span class="token number">1.25</span>.2-00 <span class="token assign-left variable">kubeadm</span><span class="token operator">=</span><span class="token number">1.25</span>.2-00 <span class="token assign-left variable">kubectl</span><span class="token operator">=</span><span class="token number">1.25</span>.2-00</code></pre><h2 id="四、集群初始化"><a href="#四、集群初始化" class="headerlink" title="四、集群初始化"></a>四、集群初始化</h2><h4 id="1、打印初始化yaml文件"><a href="#1、打印初始化yaml文件" class="headerlink" title="1、打印初始化yaml文件"></a>1、打印初始化yaml文件</h4><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm config print init-defaults <span class="token operator">&gt;</span> kubeadm-init.yaml</code></pre><h4 id="2、修改yaml文件"><a href="#2、修改yaml文件" class="headerlink" title="2、修改yaml文件"></a>2、修改yaml文件</h4><pre class="language-yaml" data-language="yaml"><code class="language-yaml">vim kubeadm<span class="token punctuation">-</span>init.yaml<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeadm.k8s.io/v1beta3<span class="token key atrule">bootstrapTokens</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">groups</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> system<span class="token punctuation">:</span>bootstrappers<span class="token punctuation">:</span>kubeadm<span class="token punctuation">:</span>default<span class="token punctuation">-</span>node<span class="token punctuation">-</span>token  <span class="token key atrule">token</span><span class="token punctuation">:</span> abcdef.0123456789abcdef  <span class="token key atrule">ttl</span><span class="token punctuation">:</span> 24h0m0s  <span class="token key atrule">usages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> signing  <span class="token punctuation">-</span> authentication<span class="token key atrule">kind</span><span class="token punctuation">:</span> InitConfiguration<span class="token key atrule">localAPIEndpoint</span><span class="token punctuation">:</span>  <span class="token key atrule">advertiseAddress</span><span class="token punctuation">:</span> 192.168.31.128  <span class="token comment">#填写master节点IP，也就是集群IP</span>  <span class="token key atrule">bindPort</span><span class="token punctuation">:</span> <span class="token number">6443</span><span class="token key atrule">nodeRegistration</span><span class="token punctuation">:</span>  <span class="token key atrule">criSocket</span><span class="token punctuation">:</span> unix<span class="token punctuation">:</span>///var/run/containerd/containerd.sock  <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent  <span class="token key atrule">name</span><span class="token punctuation">:</span> k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1   <span class="token comment">#填写master节点主机名</span>  <span class="token key atrule">taints</span><span class="token punctuation">:</span> <span class="token null important">null</span><span class="token punctuation">---</span><span class="token key atrule">apiServer</span><span class="token punctuation">:</span>  <span class="token key atrule">timeoutForControlPlane</span><span class="token punctuation">:</span> 4m0s<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeadm.k8s.io/v1beta3<span class="token key atrule">certificatesDir</span><span class="token punctuation">:</span> /etc/kubernetes/pki<span class="token key atrule">clusterName</span><span class="token punctuation">:</span> kubernetes<span class="token key atrule">controllerManager</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">dns</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">etcd</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>    <span class="token key atrule">dataDir</span><span class="token punctuation">:</span> /var/lib/etcd<span class="token key atrule">imageRepository</span><span class="token punctuation">:</span> registry.aliyuncs.com/google_containers  <span class="token comment">#改为国内镜像仓库</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterConfiguration<span class="token key atrule">kubernetesVersion</span><span class="token punctuation">:</span> 1.25.9<span class="token key atrule">networking</span><span class="token punctuation">:</span>  <span class="token key atrule">dnsDomain</span><span class="token punctuation">:</span> cluster.local  <span class="token key atrule">serviceSubnet</span><span class="token punctuation">:</span> 10.96.0.0/12  <span class="token key atrule">podSubnet</span><span class="token punctuation">:</span> 10.244.0.0/16<span class="token key atrule">scheduler</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="3、初始化"><a href="#3、初始化" class="headerlink" title="3、初始化"></a>3、初始化</h4><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm init <span class="token parameter variable">--config</span> kubeadm-init.yaml</code></pre><p>看到以下提示表示master节点初始化成功</p><pre class="language-bash" data-language="bash"><code class="language-bash">Your Kubernetes control-plane has initialized successfully<span class="token operator">!</span>To start using your cluster, you need to run the following as a regular user:  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube  <span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config  <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/configYou should now deploy a pod network to the cluster.Run <span class="token string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/<span class="token comment"># Then you can join any number of worker nodes by running the following on each as root:</span>kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.31.128:6443 <span class="token parameter variable">--token</span> 4m78tv.xjhrpamweyda7ya0 <span class="token punctuation">\</span>    --discovery-token-ca-cert-hash sha256:c05ae406919442d23c14a5a3f4c5ebe530bde038e7939e6e495e13eecb596051 </code></pre><h4 id="4、按照提示cp文件到用户家目录下，并做配置"><a href="#4、按照提示cp文件到用户家目录下，并做配置" class="headerlink" title="4、按照提示cp文件到用户家目录下，并做配置"></a>4、按照提示cp文件到用户家目录下，并做配置</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube<span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span class="token comment">#添加kubectl命令补全</span>root@k8s:~<span class="token comment"># vim .bashrc</span><span class="token builtin class-name">source</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>kubectl completion <span class="token function">bash</span><span class="token punctuation">)</span>root@k8s:~<span class="token comment"># source .bashrc</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get <span class="token function">node</span> NAME        STATUS   ROLES           AGE    VERSIONk8s         NotReady    control-plane   3d3h   v1.25.2<span class="token comment">#现在节点状态是NotReady，因为缺少网络组件</span>kubectl get pods <span class="token parameter variable">-A</span>NAMESPACE      NAME                              READY   STATUS    RESTARTS       AGEkube-system    coredns-c676cc86f-2ztg5           <span class="token number">1</span>/1     Pending   <span class="token number">10</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>   3d3hkube-system    coredns-c676cc86f-sxt29           <span class="token number">1</span>/1     Pending   <span class="token number">11</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>   3d3hkube-system    etcd-k8s                          <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-apiserver-k8s                <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-controller-manager-k8s       <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d2hkube-system    kube-proxy-lp9p7                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>              9hkube-system    kube-proxy-pnpvc                  <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-proxy-vxgmm                  <span class="token number">1</span>/1     Running   <span class="token number">1</span>              9hkube-system    kube-scheduler-k8s                <span class="token number">1</span>/1     Running   <span class="token number">4</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3h<span class="token comment">#可以看到没有网络组件，两个coredns的pod也是pending状态</span></code></pre><h4 id="5、部署cni网络组件flannel"><a href="#5、部署cni网络组件flannel" class="headerlink" title="5、部署cni网络组件flannel"></a>5、部署cni网络组件flannel</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载flannel的yaml文件</span><span class="token function">wget</span> https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#修改yaml文件</span>vim kube<span class="token punctuation">-</span>flannel.yaml  <span class="token key atrule">net-conf.json</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    {      "Network": "10.244.0.0/16", #这里填写和初始化时kubeadm-init.yaml文件里的podsubnet一样即可      "Backend": {        "Type": "vxlan"      }    }</span></code></pre><p>应用yaml文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> kube-flannel.yml <span class="token comment">#等待片刻</span>kubectl get pods <span class="token parameter variable">-A</span>NAMESPACE      NAME                              READY   STATUS    RESTARTS       AGEkube-flannel   kube-flannel-ds-9jm8j             <span class="token number">1</span>/1     Running   <span class="token number">0</span>              9hkube-flannel   kube-flannel-ds-cl9s9             <span class="token number">1</span>/1     Running   <span class="token number">0</span>              9hkube-flannel   kube-flannel-ds-qdbbg             <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d2hkube-system    coredns-c676cc86f-2ztg5           <span class="token number">1</span>/1     Running   <span class="token number">10</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>   3d3hkube-system    coredns-c676cc86f-sxt29           <span class="token number">1</span>/1     Running   <span class="token number">11</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>   3d3hkube-system    etcd-k8s                          <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-apiserver-k8s                <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-controller-manager-k8s       <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d2hkube-system    kube-proxy-lp9p7                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>              9hkube-system    kube-proxy-pnpvc                  <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-proxy-vxgmm                  <span class="token number">1</span>/1     Running   <span class="token number">1</span>              9hkube-system    kube-scheduler-k8s                <span class="token number">1</span>/1     Running   <span class="token number">4</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3h<span class="token comment">#集群可正常使用，节点状态也变为Ready</span></code></pre><h2 id="五、创建加入token"><a href="#五、创建加入token" class="headerlink" title="五、创建加入token"></a>五、创建加入token</h2><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm token create</code></pre><h4 id="1、查ca证书she256编码hash值"><a href="#1、查ca证书she256编码hash值" class="headerlink" title="1、查ca证书she256编码hash值"></a>1、查ca证书she256编码hash值</h4><pre class="language-bash" data-language="bash"><code class="language-bash">openssl x509 <span class="token parameter variable">-pubkey</span> <span class="token parameter variable">-in</span> /etc/kubernetes/pki/ca.crt <span class="token operator">|</span> openssl rsa <span class="token parameter variable">-pubin</span> <span class="token parameter variable">-outform</span> der <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> openssl dgst <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-hex</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/^.* //'</span></code></pre><h4 id="2、控制节点加入集群"><a href="#2、控制节点加入集群" class="headerlink" title="2、控制节点加入集群"></a>2、控制节点加入集群</h4><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm token create --print-join-command --certificate-key <span class="token variable"><span class="token variable">`</span>openssl x509 <span class="token parameter variable">-pubkey</span> <span class="token parameter variable">-in</span> /etc/kubernetes/pki/ca.crt <span class="token operator">|</span> openssl rsa <span class="token parameter variable">-pubin</span> <span class="token parameter variable">-outform</span> der <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> openssl dgst <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-hex</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/^.* //'</span><span class="token variable">`</span></span></code></pre><h4 id="3、节点加入集群"><a href="#3、节点加入集群" class="headerlink" title="3、节点加入集群"></a>3、节点加入集群</h4><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.31.127:6443 <span class="token parameter variable">--token</span> <span class="token punctuation">..</span>. --discovery-token-ca-cert-hash <span class="token punctuation">..</span>.</code></pre><h4 id="4、kubectl命令补全"><a href="#4、kubectl命令补全" class="headerlink" title="4、kubectl命令补全"></a>4、kubectl命令补全</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span class="token builtin class-name">source</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>kubectl completion <span class="token function">bash</span><span class="token punctuation">)</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token string">'kubectl'</span>complete <span class="token parameter variable">-F</span> __start_kubectl k</code></pre>]]></content>
      
      
      <categories>
          
          <category> deploy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Container </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Shell </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack开放镜像权限</title>
      <link href="/2023/05/10/kai-fang-jing-xiang-quan-xian/"/>
      <url>/2023/05/10/kai-fang-jing-xiang-quan-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="（1）创建租户"><a href="#（1）创建租户" class="headerlink" title="（1）创建租户"></a>（1）创建租户</h2><p>登录OpenStack平台，创建租户depA和depB，并且在这两个租户下各创一个用户userA和userB的普通用户，创建完之后（创建过程不再赘述），使用命令查看，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># source /etc/keystone/admin-openrc.sh </span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack project list</span>+----------------------------------+---------+<span class="token operator">|</span> ID                               <span class="token operator">|</span> Name    <span class="token operator">|</span>+----------------------------------+---------+<span class="token operator">|</span> 0dd87985eb314fed828e6888aed4880d <span class="token operator">|</span> demo    <span class="token operator">|</span><span class="token operator">|</span> 525075abb84e4e088dfe3adc4da61e72 <span class="token operator">|</span> depB    <span class="token operator">|</span><span class="token operator">|</span> 55b50cbb4dd4459b873cb15a8b03db43 <span class="token operator">|</span> admin   <span class="token operator">|</span><span class="token operator">|</span> a184a157399043c2a40abc52df0459a2 <span class="token operator">|</span> <span class="token function">service</span> <span class="token operator">|</span><span class="token operator">|</span> df58511d2c914690b48e89f1e512ae6b <span class="token operator">|</span> depA    <span class="token operator">|</span>+----------------------------------+---------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack user list</span>+----------------------------------+-------------------+<span class="token operator">|</span> ID                               <span class="token operator">|</span> Name              <span class="token operator">|</span>+----------------------------------+-------------------+<span class="token operator">|</span> 0f8782af6a654d77b587e25a32f91f28 <span class="token operator">|</span> cinder            <span class="token operator">|</span><span class="token operator">|</span> 1ab30f77400448eba6b2d47e55084540 <span class="token operator">|</span> demo              <span class="token operator">|</span><span class="token operator">|</span> 2550fa93b1fe4cb582f1f46353b836d8 <span class="token operator">|</span> ceilometer        <span class="token operator">|</span><span class="token operator">|</span> 2d2a345336184b1ebbdf022f710084e8 <span class="token operator">|</span> neutron           <span class="token operator">|</span><span class="token operator">|</span> 48b816f9db9541b4bd9ca49ad453574c <span class="token operator">|</span> glance            <span class="token operator">|</span><span class="token operator">|</span> 4c989a43a75c477bb4f9b7566cde6028 <span class="token operator">|</span> userA             <span class="token operator">|</span><span class="token operator">|</span> 765a16c99d7d42a4b69ff941f7791b54 <span class="token operator">|</span> aodh              <span class="token operator">|</span><span class="token operator">|</span> 788efa329f324b91a431ad56cd7b9a14 <span class="token operator">|</span> nova              <span class="token operator">|</span><span class="token operator">|</span> 7ecae98d16d54483b964c9c2548fd7bc <span class="token operator">|</span> swift             <span class="token operator">|</span><span class="token operator">|</span> 8a33fc3342154a3ca264ae7b918648ba <span class="token operator">|</span> userB             <span class="token operator">|</span><span class="token operator">|</span> 962612a3e7784df38d0c98fea1f30320 <span class="token operator">|</span> heat              <span class="token operator">|</span><span class="token operator">|</span> 9ee4731c00c24f659b8790be6b77bc8a <span class="token operator">|</span> admin             <span class="token operator">|</span><span class="token operator">|</span> d6fdd1e5e1a348e0b6c5b8c7f33ba5fa <span class="token operator">|</span> placement         <span class="token operator">|</span><span class="token operator">|</span> d957a578fed2452ab91bc651f2f1fb97 <span class="token operator">|</span> heat_domain_admin <span class="token operator">|</span><span class="token operator">|</span> e91070fa751e49689963b566db999bee <span class="token operator">|</span> gnocchi           <span class="token operator">|</span>+----------------------------------+-------------------+</code></pre><p>可以看见租户与用户均已存在。</p><h2 id="（2）上传镜像"><a href="#（2）上传镜像" class="headerlink" title="（2）上传镜像"></a>（2）上传镜像</h2><p>使用cirros-0.3.4-x86_64-disk.img上传至控制节点的/root目录下，并上传至云平台中，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># glance image-create --name cirros --disk-format qcow2 --container-format bare --progress ] 100%</span>+------------------+--------------------------------------+<span class="token operator">|</span> Property         <span class="token operator">|</span> Value                                <span class="token operator">|</span>+------------------+--------------------------------------+<span class="token operator">|</span> checksum         <span class="token operator">|</span> ee1eca47dc88f4879d8a229cc70a07c6     <span class="token operator">|</span><span class="token operator">|</span> container_format <span class="token operator">|</span> bare                                 <span class="token operator">|</span><span class="token operator">|</span> created_at       <span class="token operator">|</span> <span class="token number">2022</span>-02-10T05:31:48Z                 <span class="token operator">|</span><span class="token operator">|</span> disk_format      <span class="token operator">|</span> qcow2                                <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">id</span>               <span class="token operator">|</span> 1fa9cbfe-392f-437e-ad18-f00987415b15 <span class="token operator">|</span><span class="token operator">|</span> min_disk         <span class="token operator">|</span> <span class="token number">0</span>                                    <span class="token operator">|</span><span class="token operator">|</span> min_ram          <span class="token operator">|</span> <span class="token number">0</span>                                    <span class="token operator">|</span><span class="token operator">|</span> name             <span class="token operator">|</span> cirros                               <span class="token operator">|</span><span class="token operator">|</span> owner            <span class="token operator">|</span> 55b50cbb4dd4459b873cb15a8b03db43     <span class="token operator">|</span><span class="token operator">|</span> protected        <span class="token operator">|</span> False                                <span class="token operator">|</span><span class="token operator">|</span> size             <span class="token operator">|</span> <span class="token number">13287936</span>                             <span class="token operator">|</span><span class="token operator">|</span> status           <span class="token operator">|</span> active                               <span class="token operator">|</span><span class="token operator">|</span> tags             <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                   <span class="token operator">|</span><span class="token operator">|</span> updated_at       <span class="token operator">|</span> <span class="token number">2022</span>-02-10T05:31:49Z                 <span class="token operator">|</span><span class="token operator">|</span> virtual_size     <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> visibility       <span class="token operator">|</span> shared                               <span class="token operator">|</span>+------------------+--------------------------------------+</code></pre><p>上传镜像后，userA和userB都不能看到该镜像。接下来做相关配置，使得A租户中的用户可以看到该镜像。</p><h2 id="（3）权限配置"><a href="#（3）权限配置" class="headerlink" title="（3）权限配置"></a>（3）权限配置</h2><p>首先将镜像共享给A租户，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># glance member-create 1fa9cbfe-392f-437e-ad18-f00987415b15 df58511d2c914690b48e89f1e512ae6b</span>+--------------------------------------+----------------------------------+---------+<span class="token operator">|</span> Image ID                             <span class="token operator">|</span> Member ID                        <span class="token operator">|</span> Status  <span class="token operator">|</span>+--------------------------------------+----------------------------------+---------+<span class="token operator">|</span> 1fa9cbfe-392f-437e-ad18-f00987415b15 <span class="token operator">|</span> df58511d2c914690b48e89f1e512ae6b <span class="token operator">|</span> pending <span class="token operator">|</span>+--------------------------------------+----------------------------------+---------+</code></pre><p>在共享之后，镜像的状态是pending状态，此时还需要激活镜像，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@openstack ~<span class="token punctuation">]</span><span class="token comment"># glance member-update 1fa9cbfe-392f-437e-ad18-f00987415b15 df58511d2c914690b48e89f1e512ae6b accepted</span>+--------------------------------------+----------------------------------+----------+<span class="token operator">|</span> Image ID                             <span class="token operator">|</span> Member ID                        <span class="token operator">|</span> Status   <span class="token operator">|</span>+--------------------------------------+----------------------------------+----------+<span class="token operator">|</span> 1fa9cbfe-392f-437e-ad18-f00987415b15 <span class="token operator">|</span> df58511d2c914690b48e89f1e512ae6b <span class="token operator">|</span> accepted <span class="token operator">|</span>+--------------------------------------+----------------------------------+----------+</code></pre><p>此时镜像的状态就变为了accepted，可以在dashboard界面登录userA用户，查看是否可以看到cirros镜像（也可以登录userB用户，查看是否能看到镜像），如图3-1所示：<br><img src="https://ydy-resources-prod.obs.cn-north-4.myhuaweicloud.com/resource_13-1000-20220531163949522-qMDsl/wKggBmIga4KAPahqAAAg5-sMDtE487.png" alt="图31.png"></p><p><img src="https://s2.loli.net/2023/09/11/DGW8XV2BSc6nIQh.png" alt="开放镜像权限.png"></p><p>图3-1 镜像界面</p><p>通过这种方式，可以使用管理员设置不同租户对不同镜像的访问权限。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> OpenStack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu使用Xrdp黑屏</title>
      <link href="/2023/04/16/ubuntuxrdp-lian-jie-hei-ping-wen-ti/"/>
      <url>/2023/04/16/ubuntuxrdp-lian-jie-hei-ping-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="连接黑屏问题"><a href="#连接黑屏问题" class="headerlink" title="连接黑屏问题"></a>连接黑屏问题</h2><p>这个问题，<strong>主要是当你的本机没有注销的话，远程桌面就会黑屏</strong>，最佳解决策略就是退出本地登录，也就是注销登录，这个方法一定没问题。与windows那种完美的远程控制不同，在ubuntu中，本地登录和远程登陆是隔离开的，远程登录了不注销，那么本地就会黑屏，反过来本地登陆了不注销，远程就会黑屏。所谓注销就是logout，应该都懂，就是和关机、重启放在一起的那个选项。</p><p>或者使用网上的一些解决方案，但是这个放在在Ubuntu 22中会导致闪退。即，编辑<code> /etc/xrdp/startwm.sh</code> 文件：</p><h3 id="1-打开文件"><a href="#1-打开文件" class="headerlink" title="1. 打开文件"></a>1. 打开文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/xrdp/startwm.sh</code></pre><h3 id="2-添加配置"><a href="#2-添加配置" class="headerlink" title="2. 添加配置"></a>2. 添加配置</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> <span class="token environment constant">DBUS_SESSION_BUS_ADDRESS</span><span class="token builtin class-name">unset</span> <span class="token environment constant">XDG_RUNTIME_DIR</span></code></pre><h3 id="3-重启xrdp服务"><a href="#3-重启xrdp服务" class="headerlink" title="3. 重启xrdp服务"></a>3. 重启xrdp服务</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart xrdp.service</code></pre><h2 id="桌面优化"><a href="#桌面优化" class="headerlink" title="桌面优化"></a>桌面优化</h2><p>注意，一定要<strong>先修改下面配置文件，再远程连接</strong>，否则会黑屏，这个时候需要重启。</p><p>反正记住一句话，重启后不在本地登录，那么远程必不黑屏！</p><p>如果不做任何配置，启动之后的桌面是非常别扭的，因为是Gnome的原始桌面，没有左侧的任务栏，窗口也没有最小化按钮，等等一些列问题。解决方案也很简单：</p><h3 id="1-添加配置文件"><a href="#1-添加配置文件" class="headerlink" title="1. 添加配置文件"></a>1. 添加配置文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.xsessionrc添加：<span class="token builtin class-name">export</span> <span class="token assign-left variable">GNOME_SHELL_SESSION_MODE</span><span class="token operator">=</span>ubuntu<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XDG_CURRENT_DESKTOP</span></span><span class="token operator">=</span>ubuntu:GNOME<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XDG_CONFIG_DIRS</span></span><span class="token operator">=</span>/etc/xdg/xdg-ubuntu:/etc/xdg</code></pre><h3 id="2-重启xrdp服务"><a href="#2-重启xrdp服务" class="headerlink" title="2. 重启xrdp服务"></a>2. 重启xrdp服务</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart xrdp.service</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible部署OpenStack平台</title>
      <link href="/2023/03/11/ansible-bu-shu-openstack-ping-tai/"/>
      <url>/2023/03/11/ansible-bu-shu-openstack-ping-tai/</url>
      
        <content type="html"><![CDATA[<h2 id="Ansible部署OpenStack平台"><a href="#Ansible部署OpenStack平台" class="headerlink" title="Ansible部署OpenStack平台"></a>Ansible部署OpenStack平台</h2><h3 id="案例准备"><a href="#案例准备" class="headerlink" title="案例准备"></a>案例准备</h3><h4 id="1-规划节点"><a href="#1-规划节点" class="headerlink" title="1. 规划节点"></a>1. 规划节点</h4><p>Ansible服务的节点规划，见表2。</p><p>表2 规划节点</p><table><thead><tr><th><strong>IP</strong></th><th><strong>主机名</strong></th><th><strong>节点</strong></th></tr></thead><tbody><tr><td>172.128.11.33</td><td>ansible</td><td>Ansible节点</td></tr><tr><td>172.128.11.39</td><td>controller</td><td>Controller控制节点</td></tr><tr><td>172.128.11.21</td><td>compute</td><td>Compute计算节点</td></tr><tr><td>172.128.11.22</td><td></td><td>桌面化测试节点</td></tr></tbody></table><h4 id="2-基础准备"><a href="#2-基础准备" class="headerlink" title="2. 基础准备"></a>2. 基础准备</h4><p>现平台已提供三台云主机进行实验，云主机镜像使用提供的CentOS_7.9.qcow2镜像，云主机类型均为4vcpu、12G内存，40G磁盘+20G临时磁盘，另平台还提供了一台桌面化测试节点，用于访问OpenStack云平台。节点规划表中的IP地址为作者的IP地址，在进行实操案例的时候，按照自己的环境规划网络与IP地址（虚拟机需要使用两块网卡）。Ansible节点安装好Ansible服务。然后做好Ansible节点对Controller和Compute节点的无秘钥访问操作。</p><h3 id="案例实施"><a href="#案例实施" class="headerlink" title="案例实施"></a>案例实施</h3><h4 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h4><p>该实战案例为使用Ansible工具部署一个单控制单计算的OpenStack平台。</p><p>（1）配置IP并连接</p><p>连接三台云主机，并修改主机名分别为ansible、controller、compute。修改完成后刷新页面或者执行bash命令，以生效新主机名。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost opt<span class="token punctuation">]</span><span class="token comment"># hostnamectl set-hostname ansible</span><span class="token punctuation">[</span>root@localhost opt<span class="token punctuation">]</span><span class="token comment"># hostnamectl set-hostname controller</span><span class="token punctuation">[</span>root@localhost opt<span class="token punctuation">]</span><span class="token comment"># hostnamectl set-hostname compute</span></code></pre><p>需要使用fdisk /dev/vdb命令在第compute节点进行分区，三个大小为6G的分区。</p><pre class="language-SHELL" data-language="SHELL"><code class="language-SHELL">[root@compute ~]# fdisk /dev/vdb...[root@compute ~]# lsblk NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINTvda    253:0    0  40G  0 disk └─vda1 253:1    0  40G  0 part /vdb    253:16   0  20G  0 disk ├─vdb1 253:17   0   6G  0 part ├─vdb2 253:18   0   6G  0 part └─vdb3 253:19   0   6G  0 part vdc    253:32   0   1M  0 disk</code></pre><p>（2）Ansible安装FTP、Ansible服务</p><p>在Ansible节点下载CentOS-7-x86_64-DVD-2009.iso、chinaskills_cloud_iaas_v2.0.1.iso、openstack_ansible_train.tar.gz、ansible.tar.gz软件包，配置本地镜像源，安装Ansible服务。把Ansible节点的防火墙和SELinux关闭。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># curl -O http://172.128.11.22/competition/CentOS-7-x86_64-DVD-2009.iso</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># curl -O http://172.128.11.22/competition/ansible.tar.gz</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># curl -O http://172.128.11.22/competition/openstack_ansible_train.tar.gz</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># curl -O http://172.128.11.22/competition/chinaskills_cloud_iaas_v2.0.1.iso</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># mkdir /opt/{centos,iaas}</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># mount -o loop CentOS-7-x86_64-DVD-2009.iso /opt/centos/</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># mount -o loop chinaskills_cloud_iaas_v2.0.1.iso /opt/iaas/</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># tar -zxvf ansible.tar.gz -C /opt/</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># mv /etc/yum.repos.d/* /home/</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/yum.repos.d/ansible.repo</span><span class="token punctuation">[</span>ansible<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>ansible<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///opt/ansible<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">[</span>centos<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>centos<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///opt/centos<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># yum install vsftpd -y</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># echo "anon_root=/opt" &gt;&gt; /etc/vsftpd/vsftpd.conf</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># systemctl  restart vsftpd</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># setenforce 0</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># yum install ansible -y</span></code></pre><p>（3）配置无秘钥登录</p><p>配置Ansible节点无秘钥登录Controller和Compute节点。配置完无秘钥登录后，使用Ansible节点SSH连接测试。（若云主机已是无秘钥访问的，则不用配置无秘钥）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen </span>Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/root/.ssh/id_rsa<span class="token punctuation">)</span>: Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: Enter same passphrase again: Your identification has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:zOl0NDjrN697yRTmHmLXYpj2n4ijS+yxHUS3OhRG3ew root@ansibleThe key's randomart image is:+---<span class="token punctuation">[</span>RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+<span class="token operator">|</span>          <span class="token punctuation">..</span> o   <span class="token operator">|</span><span class="token operator">|</span>         o  <span class="token builtin class-name">.</span> o  <span class="token operator">|</span><span class="token operator">|</span>        o * <span class="token punctuation">..</span>   <span class="token operator">|</span><span class="token operator">|</span>       o B +o.E  <span class="token operator">|</span><span class="token operator">|</span>        S <span class="token operator">+=</span>.o   <span class="token operator">|</span><span class="token operator">|</span>       <span class="token operator">=</span> +*.B <span class="token builtin class-name">.</span>  <span class="token operator">|</span><span class="token operator">|</span>        *o*O +   <span class="token operator">|</span><span class="token operator">|</span>       o <span class="token operator">=</span>.**. <span class="token builtin class-name">.</span> <span class="token operator">|</span><span class="token operator">|</span>        <span class="token operator">=</span>o<span class="token operator">==</span>o.o  <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># scp -p .ssh/id_rsa.pub 172.128.11.21:/root/.ssh/authorized_keys     //输入密码Abc@1234</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># scp -p .ssh/id_rsa.pub 172.128.11.20:/root/.ssh/authorized_keys     //输入密码Abc@1234</span></code></pre><h4 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2. 目录结构"></a>2. 目录结构</h4><p>（1）项目目录</p><p>首先在/opt目录下创建一个项目目录openstack_ansible，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># mkdir /opt/openstack_ansible</span></code></pre><p>（2）创建角色</p><p>在创建roles角色目录之前，考虑将OpenStack云平台的安装步骤拆分为多个roles执行，这样的话，Playbook易于编写和读懂。</p><p>安装私有云平台，使用init（基础环境）、mariadb（数据库）、keystone（认证服务）、glance（镜像服务）、placement、nova-controller（计算服务）、nova-compute（计算服务）、neutron-controller（网络服务）、neutron-compute（网络服务）、dashboard（界面服务）、cinder-controller（块存储服务）、cinder-compute（块存储服务）、swift-controller（对象存储服务）、swift-compute（对象存储服务）、heat（编排服务）这些roles来完成。下面创建这些roles和相应的项目目录，具体命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p /opt/openstack_ansible/roles/{init,mariadb,keystone,glance,nova-controller,nova-compute,neutron-controller,neutron-compute,dashboard,cinder-controller,cinder-compute,swift-controller,swift-compute,heat}/{tasks,files,templates,meta,handlers,vars}</span></code></pre><p>在每个角色目录下面都有一样的目录，这些目录中的task目录一般是一定会用到的，其他的目录视情况而定来使用。</p><p>（3）创建group_vars目录</p><p>在项目目录/opt/openstack_ansible下创建group_vars目录，并在该目录下创建all文件，该目录用来存放变量声明文件all。命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/openstack_ansible/</span><span class="token punctuation">[</span>root@ansible openstack_ansible<span class="token punctuation">]</span><span class="token comment"># mkdir group_vars</span><span class="token punctuation">[</span>root@ansible openstack_ansible<span class="token punctuation">]</span><span class="token comment"># cd group_vars/</span><span class="token punctuation">[</span>root@ansible group_vars<span class="token punctuation">]</span><span class="token comment"># touch all</span></code></pre><p>（4）创建安装入口文件</p><p>进入/opt/openstack_ansible目录，创建“install_openstack.yaml”文件，该文件是安装动作的入口文件。命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible openstack_ansible<span class="token punctuation">]</span><span class="token comment">#cd /opt/openstack_ansible</span><span class="token punctuation">[</span>root@ansible openstack_ansible<span class="token punctuation">]</span><span class="token comment"># touch install_openstack.yaml</span><span class="token punctuation">[</span>root@ansible openstack_ansible<span class="token punctuation">]</span><span class="token comment"># ll</span>total <span class="token number">0</span>drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">17</span> Aug <span class="token number">26</span> <span class="token number">21</span>:31 group_vars-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">0</span> Aug <span class="token number">26</span> <span class="token number">21</span>:33 install_openstack.yamldrwxr-xr-x. <span class="token number">10</span> root root <span class="token number">114</span> Aug <span class="token number">26</span> <span class="token number">21</span>:18 roles</code></pre><p>到目前为止，ansible的目录结构与文件创建完毕。接下来对每一个role角色进行剧本的编写。</p><h4 id="3-编写Playbook剧本"><a href="#3-编写Playbook剧本" class="headerlink" title="3. 编写Playbook剧本"></a>3. 编写Playbook剧本</h4><p>配置完成后，如图9所示：</p><p><img src="https://s2.loli.net/2023/10/08/MTqNCZsiVtaEQ6p.png" alt="9.png"></p><p>图9 配置完成结果</p><p>（1）init角色</p><p>该角色执行的任务是用来部署Controller节点和Compute的基础环境，包括配置Yum源，安装iaas-xiandian脚本，安装iaas-pre-host脚本。在roles/init/tasks目录下，创建main.yaml文件，按“i”建进入编辑模式进行配置，按ESC键输入:wq保存退出，文件的内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># vi /opt/openstack_ansible/roles/init/tasks/main.yaml</span>- name: move repos  shell: <span class="token function">mv</span> /etc/yum.repos.d/* /media- name: create local.repo  copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>local.repo <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/yum.repos.d/- name: <span class="token function">install</span> openstack-iaas  yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>openstack-iaas <span class="token assign-left variable">state</span><span class="token operator">=</span>present- name: openrc.sh  template: <span class="token assign-left variable">src</span><span class="token operator">=</span>openrc.sh.j2 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/openstack/openrc.sh- name: <span class="token function">install</span> pre-host  shell: iaas-pre-host.sh</code></pre><p>该剧本用到了copy和template模块，copy模块使用的文件及镜像包，放入tasks同级目录的files目录下；template模块使用的Jinja2文件，放入tasks同级目录的templates目录下。</p><p>在该init角色剧本中，创建local.repo文件到init/files目录下，创建openrc.sh.j2文件至init/templates目录下。下面贴出local.repo和host.j2的文件内容：</p><p>local.repo内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible opt<span class="token punctuation">]</span><span class="token comment"># vi /opt/openstack_ansible/roles/init/files/local.repo</span><span class="token punctuation">[</span>centos<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>centos<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>ftp://172.128.11.33/centos<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">[</span>iaas<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>iaas<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>ftp://172.128.11.33/iaas/iaas-repo<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span></code></pre><p>openrc.sh.j2内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible opt<span class="token punctuation">]</span><span class="token comment"># vi /opt/openstack_ansible/roles/init/templates/openrc.sh.j2</span><span class="token comment">#--------------------system Config--------------------##</span><span class="token comment">#Controller Server Manager IP. example:x.x.x.x</span><span class="token assign-left variable">HOST_IP</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>controller_ip<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Controller HOST Password. example:000000 </span><span class="token assign-left variable">HOST_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Controller Server hostname. example:controller</span><span class="token assign-left variable">HOST_NAME</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>controller_name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Compute Node Manager IP. example:x.x.x.x</span><span class="token assign-left variable">HOST_IP_NODE</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>compute_ip<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Compute HOST Password. example:000000 </span><span class="token assign-left variable">HOST_PASS_NODE</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Compute Node hostname. example:compute</span><span class="token assign-left variable">HOST_NAME_NODE</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>compute_name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Chrony Config-------------------##</span><span class="token comment">#Controller network segment IP.  example:x.x.0.0/16(x.x.x.0/24)</span><span class="token assign-left variable">network_segment_IP</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>network_segment_IP<span class="token punctuation">}</span><span class="token punctuation">}</span>/24<span class="token comment">#--------------------Rabbit Config ------------------##</span><span class="token comment">#user for rabbit. example:openstack</span><span class="token assign-left variable">RABBIT_USER</span><span class="token operator">=</span>openstack<span class="token comment">#Password for rabbit user .example:000000</span><span class="token assign-left variable">RABBIT_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------MySQL Config---------------------##</span><span class="token comment">#Password for MySQL root user . exmaple:000000</span><span class="token assign-left variable">DB_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Keystone Config------------------##</span><span class="token comment">#Password for Keystore admin user. exmaple:000000</span><span class="token assign-left variable">DOMAIN_NAME</span><span class="token operator">=</span>demo<span class="token assign-left variable">ADMIN_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token assign-left variable">DEMO_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Mysql keystore user. exmaple:000000</span><span class="token assign-left variable">KEYSTONE_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Glance Config--------------------##</span><span class="token comment">#Password for Mysql glance user. exmaple:000000</span><span class="token assign-left variable">GLANCE_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore glance user. exmaple:000000</span><span class="token assign-left variable">GLANCE_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Placement Config----------------------##</span><span class="token comment">#Password for Mysql placement user. exmaple:000000</span><span class="token assign-left variable">PLACEMENT_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore placement user. exmaple:000000</span><span class="token assign-left variable">PLACEMENT_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Nova Config----------------------##</span><span class="token comment">#Password for Mysql nova user. exmaple:000000</span><span class="token assign-left variable">NOVA_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore nova user. exmaple:000000</span><span class="token assign-left variable">NOVA_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Neutron Config-------------------##</span><span class="token comment">#Password for Mysql neutron user. exmaple:000000</span><span class="token assign-left variable">NEUTRON_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore neutron user. exmaple:000000</span><span class="token assign-left variable">NEUTRON_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#metadata secret for neutron. exmaple:000000</span><span class="token assign-left variable">METADATA_SECRET</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#External Network Interface. example:eth1</span><span class="token assign-left variable">INTERFACE_NAME</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>External_Network<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#External Network The Physical Adapter. example:provider</span><span class="token assign-left variable">Physical_NAME</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>Physical_NAME<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#First Vlan ID in VLAN RANGE for VLAN Network. exmaple:101</span><span class="token assign-left variable">minvlan</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#Last Vlan ID in VLAN RANGE for VLAN Network. example:200</span><span class="token assign-left variable">maxvlan</span><span class="token operator">=</span><span class="token number">1000</span><span class="token comment">#--------------------Cinder Config--------------------##</span><span class="token comment">#Password for Mysql cinder user. exmaple:000000</span><span class="token assign-left variable">CINDER_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore cinder user. exmaple:000000</span><span class="token assign-left variable">CINDER_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Cinder Block Disk. example:md126p3</span><span class="token assign-left variable">BLOCK_DISK</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>cinder_disk<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Swift Config---------------------##</span><span class="token comment">#Password for Keystore swift user. exmaple:000000</span><span class="token assign-left variable">SWIFT_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#The NODE Object Disk for Swift. example:md126p4.</span><span class="token assign-left variable">OBJECT_DISK</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>swift_disk<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#The NODE IP for Swift Storage Network. example:x.x.x.x.</span><span class="token assign-left variable">STORAGE_LOCAL_NET_IP</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>STORAGE_LOCAL_NET_IP<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Trove Config----------------------##</span><span class="token comment">#Password for Mysql trove user. exmaple:000000</span><span class="token assign-left variable">TROVE_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore trove user. exmaple:000000</span><span class="token assign-left variable">TROVE_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Heat Config----------------------##</span><span class="token comment">#Password for Mysql heat user. exmaple:000000</span><span class="token assign-left variable">HEAT_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore heat user. exmaple:000000</span><span class="token assign-left variable">HEAT_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Ceilometer Config----------------##</span><span class="token comment">#Password for Gnocchi ceilometer user. exmaple:000000</span><span class="token assign-left variable">CEILOMETER_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore ceilometer user. exmaple:000000</span><span class="token assign-left variable">CEILOMETER_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------AODH Config----------------##</span><span class="token comment">#Password for Mysql AODH user. exmaple:000000</span><span class="token assign-left variable">AODH_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore AODH user. exmaple:000000</span><span class="token assign-left variable">AODH_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------ZUN Config----------------##</span><span class="token comment">#Password for Mysql ZUN user. exmaple:000000</span><span class="token assign-left variable">ZUN_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore ZUN user. exmaple:000000</span><span class="token assign-left variable">ZUN_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore KURYR user. exmaple:000000</span><span class="token assign-left variable">KURYR_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------OCTAVIA Config----------------##</span><span class="token comment">#Password for Mysql OCTAVIA user. exmaple:000000</span><span class="token assign-left variable">OCTAVIA_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore OCTAVIA user. exmaple:000000</span><span class="token assign-left variable">OCTAVIA_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Manila Config----------------##</span><span class="token comment">#Password for Mysql Manila user. exmaple:000000</span><span class="token assign-left variable">MANILA_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore Manila user. exmaple:000000</span><span class="token assign-left variable">MANILA_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#The NODE Object Disk for Manila. example:md126p5.</span><span class="token assign-left variable">SHARE_DISK</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>manila_disk<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Cloudkitty Config----------------##</span><span class="token comment">#Password for Mysql Cloudkitty user. exmaple:000000</span><span class="token assign-left variable">CLOUDKITTY_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore Cloudkitty user. exmaple:000000</span><span class="token assign-left variable">CLOUDKITTY_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#--------------------Barbican Config----------------##</span><span class="token comment">#Password for Mysql Barbican user. exmaple:000000</span><span class="token assign-left variable">BARBICAN_DBPASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">#Password for Keystore Barbican user. exmaple:000000</span><span class="token assign-left variable">BARBICAN_PASS</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>PASSWD<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因为设置的变量，所以需要在/opt/openstack_ansible/group_vars/all中声明变量，all文件内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible opt<span class="token punctuation">]</span><span class="token comment"># vi /opt/openstack_ansible/group_vars/all </span>controller_ip: <span class="token number">172.128</span>.11.21controller_name: controllercompute_ip: <span class="token number">172.128</span>.11.20compute_name: computePASSWD: <span class="token string">'Abc@1234'</span>cinder_disk: vdb1swift_disk: vdb2manila_disk: vdb3network_segment_IP: <span class="token number">172.128</span>.11.0External_Network: eth1Physical_NAME: providerSTORAGE_LOCAL_NET_IP: <span class="token number">172.128</span>.11.20</code></pre><p>至此，init角色剧本编写完成。</p><p>（2）其他角色</p><p>其他角色的作用是执行安装OpenStack的脚本，可以自行参考提供的案例文档，其他main.yaml文件可使用提供的软件包openstack_ansible_train.tar.gz，替换之后需要更改以下文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible openstack_ansible<span class="token punctuation">]</span><span class="token comment"># tar -zxvf /root/openstack_ansible_train.tar.gz -C /root/</span><span class="token punctuation">[</span>root@ansible openstack_ansible<span class="token punctuation">]</span><span class="token comment"># cp -rvf /root/openstack_ansible_train/* /opt/openstack_ansible/</span>cp: overwrite ‘/opt/openstack_ansible/group_vars/all’? ncp: overwrite ‘/opt/openstack_ansible/install_openstack.yaml’? n‘/root/openstack_ansible_train/roles/cinder-compute/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/cinder-compute/tasks/main.yaml’‘/root/openstack_ansible_train/roles/cinder-controller/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/cinder-controller/tasks/main.yaml’‘/root/openstack_ansible_train/roles/dashboard/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/dashboard/tasks/main.yaml’‘/root/openstack_ansible_train/roles/glance/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/glance/tasks/main.yaml’‘/root/openstack_ansible_train/roles/heat/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/heat/tasks/main.yaml’cp: overwrite ‘/opt/openstack_ansible/roles/init/files/local.repo’? ncp: overwrite ‘/opt/openstack_ansible/roles/init/tasks/main.yaml’? ncp: overwrite ‘/opt/openstack_ansible/roles/init/templates/openrc.sh.j2’? n‘/root/openstack_ansible_train/roles/keystone/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/keystone/tasks/main.yaml’‘/root/openstack_ansible_train/roles/mariadb/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/mariadb/tasks/main.yaml’‘/root/openstack_ansible_train/roles/neutron-compute/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/neutron-compute/tasks/main.yaml’‘/root/openstack_ansible_train/roles/neutron-controller/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/neutron-controller/tasks/main.yaml’‘/root/openstack_ansible_train/roles/nova-compute/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/nova-compute/tasks/main.yaml’‘/root/openstack_ansible_train/roles/nova-controller/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/nova-controller/tasks/main.yaml’‘/root/openstack_ansible_train/roles/swift-compute/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/swift-compute/tasks/main.yaml’‘/root/openstack_ansible_train/roles/swift-controller/tasks/main.yaml’ -<span class="token operator">&gt;</span> ‘/opt/openstack_ansible/roles/swift-controller/tasks/main.yaml’<span class="token punctuation">[</span>root@ansible opt<span class="token punctuation">]</span><span class="token comment"># cat /opt/openstack_ansible/roles/init/files/local.repo</span><span class="token punctuation">[</span>centos<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>centos<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>ftp://172.128.11.33/centos<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">[</span>iaas<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>iaas<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>ftp://172.128.11.33/iaas/iaas-repo<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">[</span>root@ansible opt<span class="token punctuation">]</span><span class="token comment"># cat /opt/openstack_ansible/group_vars/all</span>controller_ip: <span class="token number">172.128</span>.11.21controller_name: controllercompute_ip: <span class="token number">172.128</span>.11.20compute_name: computePASSWD: <span class="token string">'Abc@1234'</span>cinder_disk: vdb1swift_disk: vdb2manila_disk: vdb3network_segment_IP: <span class="token number">172.128</span>.11.0External_Network: eth1Physical_NAME: providerSTORAGE_LOCAL_NET_IP: <span class="token number">172.128</span>.11.20</code></pre><h4 id="4-执行Playbook"><a href="#4-执行Playbook" class="headerlink" title="4. 执行Playbook"></a>4. 执行Playbook</h4><p>在执行剧本之前，还有一些工作需要完成，具体任务如下：</p><p>（1）修改hosts文件</p><p>此处需要修改的hosts文件并不只是/etc/hosts，还有一个/etc/ansible/hosts文件，编辑/etc/ansible/hosts，在文件的最后添加需要执行剧本的目标主机组，添加的内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/ansible/hosts</span><span class="token comment">## db-[99:101]-node.example.com</span><span class="token punctuation">[</span>controller<span class="token punctuation">]</span><span class="token number">172.128</span>.11.21<span class="token punctuation">[</span>compute<span class="token punctuation">]</span><span class="token number">172.128</span>.11.20</code></pre><p>编辑/etc/hosts文件，添加IP与主机名的映射，如下所示：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/hosts</span><span class="token number">172.128</span>.11.21controller<span class="token number">172.128</span>.11.20 compute</code></pre><p>（2）编辑剧本入口文件</p><p>install_openstack.yaml文件为执行剧本的入口文件，需要将调用roles的顺序及哪些主机调用哪些roles在这个文件中体现出来，install_openstack.yaml文件的具体内容如下（如果以选择替换软件包里的内容无需修改一下内容）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># vi /opt/openstack_ansible/install_openstack.yaml</span>┅  <span class="token punctuation">\</span><span class="token punctuation">\</span>三短横请手打- hosts: controller  remote_user: root   roles:     - init    - mariadb    - keystone    - glance    - nova-controller    - neutron-controller    - dashboard    - cinder-controller    - swift-controller    - heat- hosts: compute  remote_user: root    roles:    - init    - nova-compute    - neutron-compute    - cinder-compute    - swift-compute</code></pre><p>（3）执行剧本</p><p>当所有准备工作都完成之后，使用ansible-playbook命令执行剧本，首先使用–syntax-check参数检测脚本的语法，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible opestack_ansible<span class="token punctuation">]</span><span class="token comment"># ansible-playbook install_openstack.yaml --syntax-check </span>playbook: install_openstack.yaml</code></pre><p>直接返回文件名，表示脚本没有语法错误。执行剧本，命令如下（注意需要写完所有main.yaml文件才会完整安装）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible openstack_ansible<span class="token punctuation">]</span><span class="token comment"># ansible-playbook install_openstack.yaml </span>PLAY RECAP ****************************************************************************************************************************************<span class="token number">172.128</span>.11.21              <span class="token builtin class-name">:</span> <span class="token assign-left variable">ok</span><span class="token operator">=</span><span class="token number">10</span>   <span class="token assign-left variable">changed</span><span class="token operator">=</span><span class="token number">9</span>    <span class="token assign-left variable">unreachable</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">failed</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">skipped</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">rescued</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">ignored</span><span class="token operator">=</span><span class="token number">0</span>   <span class="token number">172.128</span>.11.39              <span class="token builtin class-name">:</span> <span class="token assign-left variable">ok</span><span class="token operator">=</span><span class="token number">16</span>   <span class="token assign-left variable">changed</span><span class="token operator">=</span><span class="token number">14</span>   <span class="token assign-left variable">unreachable</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">failed</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">skipped</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">rescued</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">ignored</span><span class="token operator">=</span><span class="token number">0</span>   <span class="token punctuation">..</span>.<span class="token punctuation">..</span>.</code></pre><p>在等待一段时间之后，剧本执行完毕，若没有报错，访问Controller节点的IP地址/dashboard，可以访问OpenStack界面。访问OpenStack界面如图10所示：</p><p><img src="https://s2.loli.net/2023/10/08/BCQoNZ71bjGUJxX.png" alt="10.png"></p><p>图10 OpenStack登录界面</p><p>至此，使用Ansible一键部署OpenStack完成。关于更多组件的安装，用户可以自行编写role执行安装。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ansible </tag>
            
            <tag> OpenStack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I/O调度策略修改</title>
      <link href="/2023/03/10/io-diao-du-ce-lue-xiu-gai/"/>
      <url>/2023/03/10/io-diao-du-ce-lue-xiu-gai/</url>
      
        <content type="html"><![CDATA[<h4 id="I-O调度策略修改"><a href="#I-O调度策略修改" class="headerlink" title="I/O调度策略修改"></a>I/O调度策略修改</h4><p>调度策略的修改是比较简单的，首先查看当前使用的调度算法，使用CRT工具连接到controller节点，查看调度算法，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cat /sys/block/vda/queue/scheduler </span><span class="token punctuation">[</span>mq-deadline<span class="token punctuation">]</span> kyber none</code></pre><p>可以看到当前的I/O调度算法为mq-deadline，如果当前全是用的是SSD硬盘，那么显然none算法更合适，修改算法为none，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># echo none &gt; /sys/block/vda/queue/scheduler</span></code></pre><p>修改完之后，查看当前使用的算法，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># cat /sys/block/vda/queue/scheduler </span><span class="token punctuation">[</span>none<span class="token punctuation">]</span> mq-deadline kyber </code></pre><p>可以看到当前的I/O调度算法为none模式。</p><p>以上就是I/O策略的优化，无论是单队列还是多队列，都可以使用echo命令去修改当前的I/O策略。选择何种策略，也需要根据当前使用的硬盘与应用场景来决定，不能盲目修改。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 云计算技能大赛-私有云</title>
      <link href="/2023/03/10/2022-yun-ji-suan-ji-neng-da-sai-si-you-yun/"/>
      <url>/2023/03/10/2022-yun-ji-suan-ji-neng-da-sai-si-you-yun/</url>
      
        <content type="html"><![CDATA[<h2 id="【任务-1】私有云服务搭建-10-分"><a href="#【任务-1】私有云服务搭建-10-分" class="headerlink" title="【任务 1】私有云服务搭建[10 分]"></a>【任务 1】私有云服务搭建[10 分]</h2><h3 id="【题目-1】基础环境配置-0-5-分"><a href="#【题目-1】基础环境配置-0-5-分" class="headerlink" title="【题目 1】基础环境配置[0.5 分]"></a>【题目 1】基础环境配置[0.5 分]</h3><p>使用提供的用户名密码，登录提供的 OpenStack 私有云平台，在当前租户下，使用CentOS7.9 镜像，创建两台云主机，云主机类型使用 4vCPU/12G/100G_50G 类型。当前租户下默认存在一张网卡，自行创建第二张网卡并连接至 controller 和 compute 节点（第二张网卡的网段为 10.10.X.0/24，X 为工位号，不需要创建路由）。自行检查安全组策略，以确保网络正常通信与 ssh 连接，然后按以下要求配置服务器：<br>（1）设置控制节点主机名为 controller，设置计算节点主机名为 compute；<br>（2）修改hosts 文件将 IP 地址映射为主机名；<br>完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># hostnamectl set-hostname controller</span><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># hostnamectl set-hostname compute</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/hosts</span><span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token number">192.168</span>.100.10 controller<span class="token number">192.168</span>.100.20 compute<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>1.查看控制节点名字为 controller 正确计 0.2 分<br>2.查看 hosts 文件中有正确的主机名和 IP 映射计 0.2 分<br>3.控制节点正确使用两块网卡计 0.1 分</p><h3 id="【题目-2】Yum-源配置-0-5-分"><a href="#【题目-2】Yum-源配置-0-5-分" class="headerlink" title="【题目 2】Yum 源配置[0.5 分]"></a>【题目 2】Yum 源配置[0.5 分]</h3><p>使用提供的 http 服务地址，在 http 服务下，存在 centos7.9 和 iaas 的网络 yum 源，使用该 http 源作为安装 iaas 平台的网络源。分别设置 controller 节点和 compute 节点的 yum 源文件 http.repo。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/yum.repos.d/local.repo</span><span class="token punctuation">[</span>centos<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>centos<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///opt/centos  <span class="token comment">#比赛使用的是http远程yum源</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">[</span>iaas<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>iaas<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///opt/iaas/iaas-repo<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>1.查看/etc/yum.repos.d/http.repo 文件，有正确的 baseurl  路径，计 0.5 分</p><h3 id="【题目-3】配置无秘钥-ssh-0-5-分"><a href="#【题目-3】配置无秘钥-ssh-0-5-分" class="headerlink" title="【题目 3】配置无秘钥 ssh[0.5 分]"></a>【题目 3】配置无秘钥 ssh[0.5 分]</h3><p>配置 controller 节点可以无秘钥访问 compute 节点，配置完成后，尝试 ssh 连接 compute<br>节点的 hostname 进行测试。完成后提交 controller 节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># ssh compute</span>Last login: Sun Sep <span class="token number">20</span> <span class="token number">23</span>:40:30 <span class="token number">2022</span> from <span class="token number">192.168</span>.100.1 <span class="token comment">################################</span> <span class="token comment">#    Welcome  to  OpenStack    #</span> <span class="token comment">################################</span><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># ssh controller</span>Last login: Sun Sep <span class="token number">20</span> <span class="token number">23</span>:39:59 <span class="token number">2022</span> from <span class="token number">192.168</span>.100.1 <span class="token comment">################################</span> <span class="token comment">#    Welcome  to  OpenStack    #</span> <span class="token comment">################################</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>1.查看控制节点允许计算节点无秘钥登录计 0.5 分</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>【题目 4】基础安装[0.5 分]<br>在控制节点和计算节点上分别安装 openstack-iaas 软件包，根据表 2 配置两个节点脚本文件中的基本变量（配置脚本文件为/etc/openstack/openrc.sh）。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># yum install -y openstack-iaas</span>Loaded plugins: fastestmirrorDetermining fastest mirrorscentos                                                                                           <span class="token operator">|</span> <span class="token number">3.6</span> kB  00:00:00iaas                                                                                             <span class="token operator">|</span> <span class="token number">2.9</span> kB  00:00:00Package openstack-iaas-2.0.1-2.noarch already installed and latest versionNothing to <span class="token keyword">do</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's/^.//'g /etc/openstack/openrc.sh</span><span class="token comment">#去点第一行的注释符</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># sed -i 's/PASS=/PASS=000000/'g /etc/openstack/openrc.sh</span><span class="token comment">#替换PASS=为PASS=000000</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/openstack/openrc.sh</span><span class="token comment">#--------------------system Config--------------------##</span><span class="token comment">#Controller Server Manager IP. example:x.x.x.x</span><span class="token assign-left variable">HOST_IP</span><span class="token operator">=</span><span class="token number">192.168</span>.100.10<span class="token comment">#Controller HOST Password. example:000000</span><span class="token assign-left variable">HOST_PASS</span><span class="token operator">=</span>000000<span class="token comment">#Controller Server hostname. example:controller</span><span class="token assign-left variable">HOST_NAME</span><span class="token operator">=</span>controller<span class="token comment">#Compute Node Manager IP. example:x.x.x.x</span><span class="token assign-left variable">HOST_IP_NODE</span><span class="token operator">=</span><span class="token number">192.168</span>.100.20<span class="token comment">#Compute HOST Password. example:000000</span><span class="token assign-left variable">HOST_PASS_NODE</span><span class="token operator">=</span>000000<span class="token comment">#Compute Node hostname. example:compute</span><span class="token assign-left variable">HOST_NAME_NODE</span><span class="token operator">=</span>compute<span class="token comment">#--------------------Chrony Config-------------------##</span><span class="token comment">#Controller network segment IP.  example:x.x.0.0/16(x.x.x.0/24)</span><span class="token assign-left variable">network_segment_IP</span><span class="token operator">=</span><span class="token number">192.168</span>.100.0/24<span class="token comment">#--------------------Rabbit Config ------------------##</span><span class="token comment">#user for rabbit. example:openstack</span><span class="token assign-left variable">RABBIT_USER</span><span class="token operator">=</span>openstack<span class="token comment">#Password for rabbit user .example:000000</span><span class="token assign-left variable">RABBIT_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------MySQL Config---------------------##</span><span class="token comment">#Password for MySQL root user . exmaple:000000</span><span class="token assign-left variable">DB_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------Keystone Config------------------##</span><span class="token comment">#Password for Keystore admin user. exmaple:000000</span><span class="token assign-left variable">DOMAIN_NAME</span><span class="token operator">=</span>default<span class="token assign-left variable">ADMIN_PASS</span><span class="token operator">=</span>000000<span class="token assign-left variable">DEMO_PASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Mysql keystore user. exmaple:000000</span><span class="token assign-left variable">KEYSTONE_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------Glance Config--------------------##</span><span class="token comment">#Password for Mysql glance user. exmaple:000000</span><span class="token assign-left variable">GLANCE_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore glance user. exmaple:000000</span><span class="token assign-left variable">GLANCE_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------Placement Config----------------------##</span><span class="token comment">#Password for Mysql placement user. exmaple:000000</span><span class="token assign-left variable">PLACEMENT_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore placement user. exmaple:000000</span><span class="token assign-left variable">PLACEMENT_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------Nova Config----------------------##</span><span class="token comment">#Password for Mysql nova user. exmaple:000000</span><span class="token assign-left variable">NOVA_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore nova user. exmaple:000000</span><span class="token assign-left variable">NOVA_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------Neutron Config-------------------##</span><span class="token comment">#Password for Mysql neutron user. exmaple:000000</span><span class="token assign-left variable">NEUTRON_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore neutron user. exmaple:000000</span><span class="token assign-left variable">NEUTRON_PASS</span><span class="token operator">=</span>000000<span class="token comment">#metadata secret for neutron. exmaple:000000</span><span class="token assign-left variable">METADATA_SECRET</span><span class="token operator">=</span>000000<span class="token comment">#External Network Interface. example:eth1</span><span class="token assign-left variable">INTERFACE_NAME</span><span class="token operator">=</span>ens37<span class="token comment">#External Network The Physical Adapter. example:provider</span><span class="token assign-left variable">Physical_NAME</span><span class="token operator">=</span>provider<span class="token comment">#First Vlan ID in VLAN RANGE for VLAN Network. exmaple:101</span><span class="token assign-left variable">minvlan</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#Last Vlan ID in VLAN RANGE for VLAN Network. example:200</span><span class="token assign-left variable">maxvlan</span><span class="token operator">=</span><span class="token number">1000</span><span class="token comment">#--------------------Cinder Config--------------------##</span><span class="token comment">#Password for Mysql cinder user. exmaple:000000</span><span class="token assign-left variable">CINDER_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore cinder user. exmaple:000000</span><span class="token assign-left variable">CINDER_PASS</span><span class="token operator">=</span>000000<span class="token comment">#Cinder Block Disk. example:md126p3</span><span class="token assign-left variable">BLOCK_DISK</span><span class="token operator">=</span>sdb1<span class="token comment">#--------------------Swift Config---------------------##</span><span class="token comment">#Password for Keystore swift user. exmaple:000000</span><span class="token assign-left variable">SWIFT_PASS</span><span class="token operator">=</span>000000<span class="token comment">#The NODE Object Disk for Swift. example:md126p4.</span><span class="token assign-left variable">OBJECT_DISK</span><span class="token operator">=</span>sdb2<span class="token comment">#The NODE IP for Swift Storage Network. example:x.x.x.x.</span><span class="token assign-left variable">STORAGE_LOCAL_NET_IP</span><span class="token operator">=</span><span class="token number">192.168</span>.100.20<span class="token comment">#--------------------Trove Config----------------------##</span><span class="token comment">#Password for Mysql trove user. exmaple:000000</span><span class="token assign-left variable">TROVE_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore trove user. exmaple:000000</span><span class="token assign-left variable">TROVE_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------Heat Config----------------------##</span><span class="token comment">#Password for Mysql heat user. exmaple:000000</span><span class="token assign-left variable">HEAT_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore heat user. exmaple:000000</span><span class="token assign-left variable">HEAT_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------Ceilometer Config----------------##</span><span class="token comment">#Password for Gnocchi ceilometer user. exmaple:000000</span><span class="token assign-left variable">CEILOMETER_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore ceilometer user. exmaple:000000</span><span class="token assign-left variable">CEILOMETER_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------AODH Config----------------##</span><span class="token comment">#Password for Mysql AODH user. exmaple:000000</span><span class="token assign-left variable">AODH_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore AODH user. exmaple:000000</span><span class="token assign-left variable">AODH_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------ZUN Config----------------##</span><span class="token comment">#Password for Mysql ZUN user. exmaple:000000</span><span class="token assign-left variable">ZUN_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore ZUN user. exmaple:000000</span><span class="token assign-left variable">ZUN_PASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore KURYR user. exmaple:000000</span><span class="token assign-left variable">KURYR_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------OCTAVIA Config----------------##</span><span class="token comment">#Password for Mysql OCTAVIA user. exmaple:000000</span><span class="token assign-left variable">OCTAVIA_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore OCTAVIA user. exmaple:000000</span><span class="token assign-left variable">OCTAVIA_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------Manila Config----------------##</span><span class="token comment">#Password for Mysql Manila user. exmaple:000000</span><span class="token assign-left variable">MANILA_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore Manila user. exmaple:000000</span><span class="token assign-left variable">MANILA_PASS</span><span class="token operator">=</span>000000<span class="token comment">#The NODE Object Disk for Manila. example:md126p5.</span><span class="token assign-left variable">SHARE_DISK</span><span class="token operator">=</span>sdb3<span class="token comment">#--------------------Cloudkitty Config----------------##</span><span class="token comment">#Password for Mysql Cloudkitty user. exmaple:000000</span><span class="token assign-left variable">CLOUDKITTY_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore Cloudkitty user. exmaple:000000</span><span class="token assign-left variable">CLOUDKITTY_PASS</span><span class="token operator">=</span>000000<span class="token comment">#--------------------Barbican Config----------------##</span><span class="token comment">#Password for Mysql Barbican user. exmaple:000000</span><span class="token assign-left variable">BARBICAN_DBPASS</span><span class="token operator">=</span>000000<span class="token comment">#Password for Keystore Barbican user. exmaple:000000</span><span class="token assign-left variable">BARBICAN_PASS</span><span class="token operator">=</span>000000<span class="token comment">###############################################################</span><span class="token comment">#####在vi编辑器中执行:%s/^.\{1\}//  删除每行前1个字符(#号)#####</span><span class="token comment">###############################################################</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># scp /etc/openstack/openrc.sh compute:/etc/openstack/</span><span class="token comment">#传输完毕后，设置磁盘分区，分出三块！！！对应的磁盘名称写入环境变量中</span></code></pre><p>1.检查环境变量文件配置正确计 0.5 分</p><h3 id="【题目-5】数据库安装与调优-0-5-分"><a href="#【题目-5】数据库安装与调优-0-5-分" class="headerlink" title="【题目 5】数据库安装与调优[0.5 分]"></a>【题目 5】数据库安装与调优[0.5 分]</h3><p>在 controller 节点上使用 iaas-install-mysql.sh 脚本安装 Mariadb、Memcached、RabbitMQ<br>等服务。安装服务完毕后，修改/etc/my.cnf 文件，完成下列要求：</p><p>1.设置数据库支持大小写；<br>2.设置数据库缓存 innodb 表的索引，数据，插入数据时的缓冲为 4G；</p><p>3.设置数据库的 log buffer 为 64MB；<br>4.设置数据库的 redo log 大小为 256MB；<br>5.设置数据库的 redo log 文件组为 2。<br>完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iaas-pre-host.sh</span><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># iaas-pre-host.sh</span><span class="token comment">#执行完这一步，一定要重新连接，刷新一下，不然rabbitmq服务会报错</span><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-mysql.sh</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/my.cnf</span><span class="token comment">#</span><span class="token comment"># This group is read both both by the client and the server</span><span class="token comment"># use it for options that affect everything</span><span class="token comment">#</span><span class="token punctuation">[</span>client-server<span class="token punctuation">]</span><span class="token comment">#</span><span class="token comment"># This group is read by the server</span><span class="token comment">#</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span><span class="token number">0</span>default-storage-engine <span class="token operator">=</span> innodbinnodb_file_per_tablecollation-server <span class="token operator">=</span> utf8_general_ciinit-connect <span class="token operator">=</span> <span class="token string">'SET NAMES utf8'</span>character-set-server <span class="token operator">=</span> utf8<span class="token assign-left variable">max_connections</span><span class="token operator">=</span><span class="token number">10000</span>innodb_log_buffer_size <span class="token operator">=</span> 4M<span class="token comment">#此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间</span>innodb_log_file_size <span class="token operator">=</span> 32M<span class="token comment">#此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</span>innodb_log_files_in_group <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">#为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</span><span class="token comment">#1，数据库不区分大小写，其中 0：区分大小写，1：不区分大小写</span>lower_case_table_names <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#2,设置innodb的数据缓冲为4G</span>innodb_buffer_pool_size <span class="token operator">=</span> 4G<span class="token comment">#3，传输数据包的大小值</span>max_allowed_packet <span class="token operator">=</span> 30M<span class="token comment">#</span><span class="token comment"># include all files from the config directory</span><span class="token comment">#</span><span class="token operator">!</span>includedir /etc/my.cnf.d<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>1.检查数据库配置正确计 0.5 分</p><h3 id="【题目-6】Keystone-服务安装与使用-0-5-分"><a href="#【题目-6】Keystone-服务安装与使用-0-5-分" class="headerlink" title="【题目 6】Keystone 服务安装与使用[0.5 分]"></a>【题目 6】Keystone 服务安装与使用[0.5 分]</h3><p>在 controller 节点上使用 iaas-install-keystone.sh 脚本安装 Keystone 服务。安装完成后， 使用相关命令，创建用户 chinaskill，密码为 000000。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-keystone.sh</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># source /etc/keystone/admin-openrc.sh</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack user create --domain huhy --password 000000 chinaskill</span>+---------------------+----------------------------------+<span class="token operator">|</span> Field               <span class="token operator">|</span> Value                            <span class="token operator">|</span>+---------------------+----------------------------------+<span class="token operator">|</span> domain_id           <span class="token operator">|</span> b11e543ea3567ef79cd7a99a34ea156a <span class="token operator">|</span><span class="token operator">|</span> enabled             <span class="token operator">|</span> True                             <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">id</span>                  <span class="token operator">|</span> 8bd1afe33aa34e24aeb9f3d4ea15aa75 <span class="token operator">|</span><span class="token operator">|</span> name                <span class="token operator">|</span> chinaskill                       <span class="token operator">|</span><span class="token operator">|</span> options             <span class="token operator">|</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                               <span class="token operator">|</span><span class="token operator">|</span> password_expires_at <span class="token operator">|</span> None                             <span class="token operator">|</span>+---------------------+----------------------------------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span><span class="token comment">#注意我的域名是自定义的，正常应该是demo</span></code></pre><p>1.检查keystone 服务安装正确计 0.2 分<br>2.检查chinaskill 用户创建正确计 0.3 分</p><h3 id="【题目-7】Glance-安装与使用-0-5-分"><a href="#【题目-7】Glance-安装与使用-0-5-分" class="headerlink" title="【题目 7】Glance 安装与使用[0.5 分]"></a>【题目 7】Glance 安装与使用[0.5 分]</h3><p>在 controller 节点上使用 iaas-install-glance.sh 脚本安装 glance 服务。使用命令将提供的 cirros-0.3.4-x86_64-disk.img 镜像（该镜像在 HTTP 服务中，可自行下载）上传至平台， 命名为 cirros，并设置最小启动需要的硬盘为 10G，最小启动需要的内存为 1G。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller images<span class="token punctuation">]</span><span class="token comment"># iaas-install-glance.sh</span><span class="token punctuation">[</span>root@controller images<span class="token punctuation">]</span><span class="token comment"># ls</span>amphora-x64-haproxy.qcow2  CentOS-7-x86_64-2009.qcow2    MySQL_5.6_XD.qcow2CentOS7_1804.tar           cirros-0.3.4-x86_64-disk.img<span class="token punctuation">[</span>root@controller images<span class="token punctuation">]</span><span class="token comment"># openstack image create --disk-format qcow2 --container-format bare --min-disk 10 --min-ram 1024 --file ./cirros-0.3.4-x86_64-disk.img cirros</span>+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<span class="token operator">|</span> Field            <span class="token operator">|</span> Value                                                                                                                                                                                      <span class="token operator">|</span>+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<span class="token operator">|</span> checksum         <span class="token operator">|</span> ee1eca47dc88f4879d8a229cc70a07c6                                                                                                                                                           <span class="token operator">|</span><span class="token operator">|</span> container_format <span class="token operator">|</span> bare                                                                                                                                                                                       <span class="token operator">|</span><span class="token operator">|</span> created_at       <span class="token operator">|</span> <span class="token number">2022</span>-09-19T02:51:10Z                                                                                                                                                                       <span class="token operator">|</span><span class="token operator">|</span> disk_format      <span class="token operator">|</span> qcow2                                                                                                                                                                                      <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">file</span>             <span class="token operator">|</span> /v2/images/47adc4fe-6bd9-4728-809f-c868d433f2d7/file                                                                                                                                       <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">id</span>               <span class="token operator">|</span> 47adc4fe-6bd9-4728-809f-c868d433f2d7                                                                                                                                                       <span class="token operator">|</span><span class="token operator">|</span> min_disk         <span class="token operator">|</span> <span class="token number">10</span>                                                                                                                                                                                         <span class="token operator">|</span><span class="token operator">|</span> min_ram          <span class="token operator">|</span> <span class="token number">1024</span>                                                                                                                                                                                       <span class="token operator">|</span><span class="token operator">|</span> name             <span class="token operator">|</span> cirros                                                                                                                                                                                     <span class="token operator">|</span><span class="token operator">|</span> owner            <span class="token operator">|</span> 5ef6dd81e4164f8d89e41d5537b148f9                                                                                        <span class="token operator">|</span><span class="token operator">|</span> properties       <span class="token operator">|</span> <span class="token assign-left variable">os_hash_algo</span><span class="token operator">=</span><span class="token string">'sha512'</span>, <span class="token assign-left variable">os_hash_value</span><span class="token operator">=</span><span class="token string">'1b03ca1bc3fafe448b90583c12f367949f8b0e665685979d95b004e48574b953316799e23240f4f739d1b5eb4c4ca24d38fdc6f4f9d8247a2bc64db25d6bbdb2'</span>, <span class="token assign-left variable">os_hidden</span><span class="token operator">=</span><span class="token string">'False'</span> <span class="token operator">|</span><span class="token operator">|</span> protected        <span class="token operator">|</span> False                                                                                        <span class="token operator">|</span><span class="token operator">|</span> schema           <span class="token operator">|</span> /v2/schemas/image                                                                                        <span class="token operator">|</span><span class="token operator">|</span> size             <span class="token operator">|</span> <span class="token number">13287936</span>                                                                                        <span class="token operator">|</span><span class="token operator">|</span> status           <span class="token operator">|</span> active                                                                                        <span class="token operator">|</span><span class="token operator">|</span> tags             <span class="token operator">|</span>                                                                                        <span class="token operator">|</span><span class="token operator">|</span> updated_at       <span class="token operator">|</span> <span class="token number">2022</span>-09-19T02:51:11Z                                                                                        <span class="token operator">|</span><span class="token operator">|</span> virtual_size     <span class="token operator">|</span> None                                                                                        <span class="token operator">|</span><span class="token operator">|</span> visibility       <span class="token operator">|</span> shared                                                                                        <span class="token operator">|</span>+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<span class="token punctuation">[</span>root@controller images<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>1.检查glance 服务安装正确计 0.1 分<br>2.检查cirros 镜像最小启动硬盘与内存配置正确计 0.4 分</p><h3 id="【题目-8】Nova-安装与优化-0-5-分"><a href="#【题目-8】Nova-安装与优化-0-5-分" class="headerlink" title="【题目 8】Nova 安装与优化[0.5 分]"></a>【题目 8】Nova 安装与优化[0.5 分]</h3><p>在 controller 节点和 compute 节点上分别使用 iaas-install-placement.sh 脚本、iaas-install-nova -controller.sh 脚本、iaas-install-nova-compute.sh 脚本安装Nova 服务。安装完成后，请修改 nova 相关配置文件，解决因等待时间过长而导致虚拟机启动超时从而获取不到 IP 地址而报</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-placement.sh</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-nova-controller.sh</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/nova/nova.conf</span><span class="token comment">#vif_plugging_is_fatal=true</span>改为<span class="token assign-left variable">vif_plugging_is_fatal</span><span class="token operator">=</span>false</code></pre><p>1.检查nova 服务解决超时问题配置正确计 0.5 分</p><h3 id="【题目-9】Neutron-安装-0-5-分"><a href="#【题目-9】Neutron-安装-0-5-分" class="headerlink" title="【题目 9】Neutron 安装[0.5 分]"></a>【题目 9】Neutron 安装[0.5 分]</h3><p>使用提供的脚本 iaas-install-neutron-controller.sh 和 iaas-install-neutron-compute.sh，在controller 和 compute 节点上安装 neutron 服务。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-neutron-controller.sh</span></code></pre><p>1.检查neutron 服务安装正确计 0.2 分<br>2.检查neutron 服务的 linuxbridge 网桥服务启动正确计 0.3 分</p><h3 id="【题目-10】Dashboard-安装-0-5-分"><a href="#【题目-10】Dashboard-安装-0-5-分" class="headerlink" title="【题目 10】Dashboard 安装[0.5 分]"></a>【题目 10】Dashboard 安装[0.5 分]</h3><p>在controller 节点上使用iaas-install-dashboad.sh 脚本安装dashboad服务。安装完成后， 将 Dashboard 中的 Djingo 数据修改为存储在文件中（此种修改解决了 ALL-in-one 快照在其他云平台 Dashboard 不能访问的问题）。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-dashboard.sh</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/openstack-dashboard/local_settings</span>SESSION_ENGINE <span class="token operator">=</span> <span class="token string">'django.contrib.sessions.backends.cache'</span>改为SESSION_ENGINE <span class="token operator">=</span> <span class="token string">'django.contrib.sessions.backends.file'</span></code></pre><p>1.检查Dashboard 服务安装正确计 0.2 分<br>2.检查Dashboard 服务中Djingo 数据修改为存储在文件中配置正确计 0.3 分</p><h3 id="【题目-11】Swift-安装-0-5-分"><a href="#【题目-11】Swift-安装-0-5-分" class="headerlink" title="【题目 11】Swift 安装[0.5 分]"></a>【题目 11】Swift 安装[0.5 分]</h3><p>在 控 制 节 点 和 计 算 节 点 上 分 别 使 用 iaas-install-swift-controller.sh 和iaas-install-swift-compute.sh 脚本安装 Swift 服务。安装完成后，使用命令创建一个名叫examcontainer 的容器，将 cirros-0.3.4-x86_64-disk.img 镜像上传到 examcontainer 容器中，并设置分段存放，每一段大小为 10M。完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-swift-controller.sh</span><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-swift-compute.sh</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  cirros-0.3.4-x86_64-disk.img  logininfo.txt<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># swift post examcontainers</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># swift upload examcontaiers -S 10000000 cirros-0.3.4-x86_64-disk.img</span>cirros-0.3.4-x86_64-disk.img segment <span class="token number">1</span>cirros-0.3.4-x86_64-disk.img segment <span class="token number">0</span>cirros-0.3.4-x86_64-disk.img<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># du -sh cirros-0.3.4-x86_64-disk.img</span>13M     cirros-0.3.4-x86_64-disk.img<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span><span class="token comment">#因为镜像就13M，所有存储为两段</span></code></pre><p>1.检查 swift 服务安装正确计 0.3 分<br>2.分段上传cirros 镜像正确计 0.2 分</p><h3 id="【题目-12】Cinder-创建硬盘-0-5-分"><a href="#【题目-12】Cinder-创建硬盘-0-5-分" class="headerlink" title="【题目 12】Cinder 创建硬盘[0.5 分]"></a>【题目 12】Cinder 创建硬盘[0.5 分]</h3><p>在 控 制 节 点 和 计 算 节 点 分 别 使 用 iaas-install-cinder-controller.sh 、iaas-install-cinder-compute.sh 脚本安装Cinder 服务，请在计算节点，对块存储进行扩容操作， 即在计算节点再分出一个 5G 的分区，加入到 cinder 块存储的后端存储中去。完成后提交计算节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-cinder-controller.sh</span><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-cinder-compute.sh</span><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>NAME                                            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda                                               <span class="token number">8</span>:0    <span class="token number">0</span>  200G  <span class="token number">0</span> disk├─sda1                                            <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot└─sda2                                            <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part  ├─centos-root                                 <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /  └─centos-swap                                 <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>sdb                                               <span class="token number">8</span>:16   <span class="token number">0</span>   50G  <span class="token number">0</span> disk├─sdb1                                            <span class="token number">8</span>:17   <span class="token number">0</span>   10G  <span class="token number">0</span> part│ ├─cinder--volumes-cinder--volumes--pool_tmeta <span class="token number">253</span>:2    <span class="token number">0</span>   12M  <span class="token number">0</span> lvm│ │ └─cinder--volumes-cinder--volumes--pool     <span class="token number">253</span>:4    <span class="token number">0</span>  <span class="token number">9</span>.5G  <span class="token number">0</span> lvm│ └─cinder--volumes-cinder--volumes--pool_tdata <span class="token number">253</span>:3    <span class="token number">0</span>  <span class="token number">9</span>.5G  <span class="token number">0</span> lvm│   └─cinder--volumes-cinder--volumes--pool     <span class="token number">253</span>:4    <span class="token number">0</span>  <span class="token number">9</span>.5G  <span class="token number">0</span> lvm├─sdb2                                            <span class="token number">8</span>:18   <span class="token number">0</span>   10G  <span class="token number">0</span> part /swift/node/sdb2├─sdb3                                            <span class="token number">8</span>:19   <span class="token number">0</span>   10G  <span class="token number">0</span> part└─sdb4                                            <span class="token number">8</span>:20   <span class="token number">0</span>    5G  <span class="token number">0</span> partsr0                                              <span class="token number">11</span>:0    <span class="token number">1</span>  <span class="token number">4</span>.4G  <span class="token number">0</span> rom<span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment">#</span><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># vgdisplay</span>  --- Volume group ---  VG Name               cinder-volumes  System ID  Format                lvm2  Metadata Areas        <span class="token number">1</span>  Metadata Sequence No  <span class="token number">4</span>  VG Access             read/write  VG Status             resizable  MAX LV                <span class="token number">0</span>  Cur LV                <span class="token number">1</span>  Open LV               <span class="token number">0</span>  Max PV                <span class="token number">0</span>  Cur PV                <span class="token number">1</span>  Act PV                <span class="token number">1</span>  VG Size               <span class="token operator">&lt;</span><span class="token number">10.00</span> GiB  PE Size               <span class="token number">4.00</span> MiB  Total PE              <span class="token number">2559</span>  Alloc PE / Size       <span class="token number">2438</span> / <span class="token number">9.52</span> GiB  Free  PE / Size       <span class="token number">121</span> / <span class="token number">484.00</span> MiB  VG UUID               3k0yKg-iQB2-b2CM-a0z2-2ddJ-cdG3-8WpyrG  --- Volume group ---  VG Name               centos  System ID  Format                lvm2  Metadata Areas        <span class="token number">1</span>  Metadata Sequence No  <span class="token number">3</span>  VG Access             read/write  VG Status             resizable  MAX LV                <span class="token number">0</span>  Cur LV                <span class="token number">2</span>  Open LV               <span class="token number">2</span>  Max PV                <span class="token number">0</span>  Cur PV                <span class="token number">1</span>  Act PV                <span class="token number">1</span>  VG Size               <span class="token operator">&lt;</span><span class="token number">19.00</span> GiB  PE Size               <span class="token number">4.00</span> MiB  Total PE              <span class="token number">4863</span>  Alloc PE / Size       <span class="token number">4863</span> / <span class="token operator">&lt;</span><span class="token number">19.00</span> GiB  Free  PE / Size       <span class="token number">0</span> / <span class="token number">0</span>  VG UUID               acAXNK-eqKm-qs9b-ly3T-R3Sh-8qyv-nELNWv  <span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># vgextend cinder-volumes /dev/sdb4</span>  Volume group <span class="token string">"cinder-volumes"</span> successfully extended<span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># vgdisplay</span>  --- Volume group ---  VG Name               cinder-volumes  System ID  Format                lvm2  Metadata Areas        <span class="token number">2</span>  Metadata Sequence No  <span class="token number">5</span>  VG Access             read/write  VG Status             resizable  MAX LV                <span class="token number">0</span>  Cur LV                <span class="token number">1</span>  Open LV               <span class="token number">0</span>  Max PV                <span class="token number">0</span>  Cur PV                <span class="token number">2</span>  Act PV                <span class="token number">2</span>  VG Size               <span class="token number">14.99</span> GiB  PE Size               <span class="token number">4.00</span> MiB  Total PE              <span class="token number">3838</span>  Alloc PE / Size       <span class="token number">2438</span> / <span class="token number">9.52</span> GiB  Free  PE / Size       <span class="token number">1400</span> / <span class="token operator">&lt;</span><span class="token number">5.47</span> GiB  VG UUID               3k0yKg-iQB2-b2CM-a0z2-2ddJ-cdG3-8WpyrG  --- Volume group ---  VG Name               centos  System ID  Format                lvm2  Metadata Areas        <span class="token number">1</span>  Metadata Sequence No  <span class="token number">3</span>  VG Access             read/write  VG Status             resizable  MAX LV                <span class="token number">0</span>  Cur LV                <span class="token number">2</span>  Open LV               <span class="token number">2</span>  Max PV                <span class="token number">0</span>  Cur PV                <span class="token number">1</span>  Act PV                <span class="token number">1</span>  VG Size               <span class="token operator">&lt;</span><span class="token number">19.00</span> GiB  PE Size               <span class="token number">4.00</span> MiB  Total PE              <span class="token number">4863</span>  Alloc PE / Size       <span class="token number">4863</span> / <span class="token operator">&lt;</span><span class="token number">19.00</span> GiB  Free  PE / Size       <span class="token number">0</span> / <span class="token number">0</span>  VG UUID               acAXNK-eqKm-qs9b-ly3T-R3Sh-8qyv-nELNWv<span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>1.检查cinder 后端存储扩容成功计 0.5 分</p><h3 id="【题目-13】Manila-服务安装与使用-0-5-分"><a href="#【题目-13】Manila-服务安装与使用-0-5-分" class="headerlink" title="【题目 13】Manila 服务安装与使用[0.5 分]"></a>【题目 13】Manila 服务安装与使用[0.5 分]</h3><p>在 控 制 和 计 算 节 点 上 分 别 使 用 iaas-install-manila-controller.sh 和iaas-install-manila-compute.sh 脚本安装 manila 服务。安装服务后创建 default_share_type 共享类型（不使用驱动程序支持），接着创建一个大小为 2G 的共享存储名为 share01 并开放share01 目录对 OpenStack 管理网段使用权限。最后提交控制节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-manila-controller.sh</span><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-manila-compute.sh</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># manila type-create default_share_type False</span>+----------------------+--------------------------------------+<span class="token operator">|</span> Property             <span class="token operator">|</span> Value                                <span class="token operator">|</span>+----------------------+--------------------------------------+<span class="token operator">|</span> required_extra_specs <span class="token operator">|</span> driver_handles_share_servers <span class="token builtin class-name">:</span> False <span class="token operator">|</span><span class="token operator">|</span> Name                 <span class="token operator">|</span> default_share_type                   <span class="token operator">|</span><span class="token operator">|</span> Visibility           <span class="token operator">|</span> public                               <span class="token operator">|</span><span class="token operator">|</span> is_default           <span class="token operator">|</span> YES                                  <span class="token operator">|</span><span class="token operator">|</span> ID                   <span class="token operator">|</span> 36dddd7a-6c51-4320-9f8e-d99dcb71fcdd <span class="token operator">|</span><span class="token operator">|</span> optional_extra_specs <span class="token operator">|</span>                                      <span class="token operator">|</span><span class="token operator">|</span> Description          <span class="token operator">|</span> None                                 <span class="token operator">|</span>+----------------------+--------------------------------------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># manila type-list</span>+--------------------------------------+--------------------+------------+------------+--------------------------------------+----------------------+-------------+<span class="token operator">|</span> ID                                   <span class="token operator">|</span> Name               <span class="token operator">|</span> visibility <span class="token operator">|</span> is_default <span class="token operator">|</span> required_extra_specs     <span class="token operator">|</span> optional_extra_specs <span class="token operator">|</span> Description <span class="token operator">|</span>+--------------------------------------+--------------------+------------+------------+--------------------------------------+----------------------+-------------+<span class="token operator">|</span> 36dddd7a-6c51-4320-9f8e-d99dcb71fcdd <span class="token operator">|</span> default_share_type <span class="token operator">|</span> public     <span class="token operator">|</span> YES        <span class="token operator">|</span> driver_handles_share_servers <span class="token builtin class-name">:</span> False <span class="token operator">|</span>                      <span class="token operator">|</span> None        <span class="token operator">|</span>+--------------------------------------+--------------------+------------+------------+--------------------------------------+----------------------+-------------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># manila create NFS 2 --name share-test</span>+---------------------------------------+--------------------------------------+<span class="token operator">|</span> Property                              <span class="token operator">|</span> Value                                <span class="token operator">|</span>+---------------------------------------+--------------------------------------+<span class="token operator">|</span> status                                <span class="token operator">|</span> creating                             <span class="token operator">|</span><span class="token operator">|</span> share_type_name                       <span class="token operator">|</span> default_share_type                   <span class="token operator">|</span><span class="token operator">|</span> description                           <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> availability_zone                     <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> share_network_id                      <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> share_server_id                       <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> share_group_id                        <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">host</span>                                  <span class="token operator">|</span>                                      <span class="token operator">|</span><span class="token operator">|</span> revert_to_snapshot_support            <span class="token operator">|</span> False                                <span class="token operator">|</span><span class="token operator">|</span> access_rules_status                   <span class="token operator">|</span> active                               <span class="token operator">|</span><span class="token operator">|</span> snapshot_id                           <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> create_share_from_snapshot_support    <span class="token operator">|</span> False                                <span class="token operator">|</span><span class="token operator">|</span> is_public                             <span class="token operator">|</span> False                                <span class="token operator">|</span><span class="token operator">|</span> task_state                            <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> snapshot_support                      <span class="token operator">|</span> False                                <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">id</span>                                    <span class="token operator">|</span> 01b7551c-ac6f-4815-9ade-34dd50d5c489 <span class="token operator">|</span><span class="token operator">|</span> size                                  <span class="token operator">|</span> <span class="token number">2</span>                                    <span class="token operator">|</span><span class="token operator">|</span> source_share_group_snapshot_member_id <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> user_id                               <span class="token operator">|</span> 65355acf2f4e4e8e8e29fd08d7290750     <span class="token operator">|</span><span class="token operator">|</span> name                                  <span class="token operator">|</span> share-test                           <span class="token operator">|</span><span class="token operator">|</span> share_type                            <span class="token operator">|</span> 36dddd7a-6c51-4320-9f8e-d99dcb71fcdd <span class="token operator">|</span><span class="token operator">|</span> has_replicas                          <span class="token operator">|</span> False                                <span class="token operator">|</span><span class="token operator">|</span> replication_type                      <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> created_at                            <span class="token operator">|</span> <span class="token number">2022</span>-09-19T06:50:18.000000           <span class="token operator">|</span><span class="token operator">|</span> share_proto                           <span class="token operator">|</span> NFS                                  <span class="token operator">|</span><span class="token operator">|</span> mount_snapshot_support                <span class="token operator">|</span> False                                <span class="token operator">|</span><span class="token operator">|</span> project_id                            <span class="token operator">|</span> 1b29cb9baa394a0eb3d531913dc9ccec     <span class="token operator">|</span><span class="token operator">|</span> metadata                              <span class="token operator">|</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                                   <span class="token operator">|</span>+---------------------------------------+--------------------------------------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># manila list</span>+--------------------------------------+------------+------+-------------+-----------+-----------+--------------------+-----------------------------+-------------------+<span class="token operator">|</span> ID                                   <span class="token operator">|</span> Name       <span class="token operator">|</span> Size <span class="token operator">|</span> Share Proto <span class="token operator">|</span> Status    <span class="token operator">|</span> Is Public <span class="token operator">|</span> Share Type Name    <span class="token operator">|</span> Host                        <span class="token operator">|</span> Availability Zone <span class="token operator">|</span>+--------------------------------------+------------+------+-------------+-----------+-----------+--------------------+-----------------------------+-------------------+<span class="token operator">|</span> 01b7551c-ac6f-4815-9ade-34dd50d5c489 <span class="token operator">|</span> share-test <span class="token operator">|</span> <span class="token number">2</span>    <span class="token operator">|</span> NFS         <span class="token operator">|</span> available <span class="token operator">|</span> False     <span class="token operator">|</span> default_share_type <span class="token operator">|</span> compute@lvm<span class="token comment">#lvm-single-pool | nova              |</span>+--------------------------------------+------------+------+-------------+-----------+-----------+--------------------+-----------------------------+-------------------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># manila access-allow share-test ip 192.168.100.0/24 --access-level rw</span>+--------------+--------------------------------------+<span class="token operator">|</span> Property     <span class="token operator">|</span> Value                                <span class="token operator">|</span>+--------------+--------------------------------------+<span class="token operator">|</span> access_key   <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> share_id     <span class="token operator">|</span> 01b7551c-ac6f-4815-9ade-34dd50d5c489 <span class="token operator">|</span><span class="token operator">|</span> created_at   <span class="token operator">|</span> <span class="token number">2022</span>-09-19T06:51:47.000000           <span class="token operator">|</span><span class="token operator">|</span> updated_at   <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> access_type  <span class="token operator">|</span> <span class="token function">ip</span>                                   <span class="token operator">|</span><span class="token operator">|</span> access_to    <span class="token operator">|</span> <span class="token number">192.168</span>.100.0/24                     <span class="token operator">|</span><span class="token operator">|</span> access_level <span class="token operator">|</span> rw                                   <span class="token operator">|</span><span class="token operator">|</span> state        <span class="token operator">|</span> queued_to_apply                      <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">id</span>           <span class="token operator">|</span> a5fe5b74-e571-405a-a2cb-bda449ed1f53 <span class="token operator">|</span><span class="token operator">|</span> metadata     <span class="token operator">|</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                                   <span class="token operator">|</span>+--------------+--------------------------------------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># manila access-list share-test</span>+--------------------------------------+-------------+------------------+--------------+--------+------------+----------------------------+------------+<span class="token operator">|</span> <span class="token function">id</span>                                   <span class="token operator">|</span> access_type <span class="token operator">|</span> access_to        <span class="token operator">|</span> access_level <span class="token operator">|</span> state  <span class="token operator">|</span> access_key <span class="token operator">|</span> created_at                 <span class="token operator">|</span> updated_at <span class="token operator">|</span>+--------------------------------------+-------------+------------------+--------------+--------+------------+----------------------------+------------+<span class="token operator">|</span> a5fe5b74-e571-405a-a2cb-bda449ed1f53 <span class="token operator">|</span> <span class="token function">ip</span>          <span class="token operator">|</span> <span class="token number">192.168</span>.100.0/24 <span class="token operator">|</span> rw           <span class="token operator">|</span> active <span class="token operator">|</span> None       <span class="token operator">|</span> <span class="token number">2022</span>-09-19T06:51:47.000000 <span class="token operator">|</span> None       <span class="token operator">|</span>+--------------------------------------+-------------+------------------+--------------+--------+------------+----------------------------+------------+<span class="token comment">#查看share-test共享文件目录的访问路径，选做，到此任务已经结束</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># manila show share-test | grep path | cut -d'|' -f3</span> path <span class="token operator">=</span> <span class="token number">192.168</span>.100.20:/var/lib/manila/mnt/share-8648e34b-a68b-4710-97fe-4e85515c444e<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># mount -t nfs 192.168.100.20:/var/lib/manila/mnt/share-8648e34b-a68b-4710-97fe-4e85515c444e /mnt/</span><span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>Filesystem               Size  Used Avail Use% Mounted ondevtmpfs                 <span class="token number">1</span>.9G     <span class="token number">0</span>  <span class="token number">1</span>.9G   <span class="token number">0</span>% /devtmpfs                    <span class="token number">1</span>.9G  <span class="token number">4</span>.0K  <span class="token number">1</span>.9G   <span class="token number">1</span>% /dev/shmtmpfs                    <span class="token number">1</span>.9G   12M  <span class="token number">1</span>.9G   <span class="token number">1</span>% /runtmpfs                    <span class="token number">1</span>.9G     <span class="token number">0</span>  <span class="token number">1</span>.9G   <span class="token number">0</span>% /sys/fs/cgroup/dev/mapper/centos-root   17G  <span class="token number">4</span>.8G   13G  <span class="token number">29</span>% //dev/sda1               1014M  152M  863M  <span class="token number">15</span>% /boottmpfs                    378M     <span class="token number">0</span>  378M   <span class="token number">0</span>% /run/user/0/dev/sdb2                 10G   59M   10G   <span class="token number">1</span>% /swift/node/sdb2/dev/dm-5                <span class="token number">2</span>.0G  <span class="token number">6</span>.0M  <span class="token number">1</span>.8G   <span class="token number">1</span>% /var/lib/manila/mnt/share-8648e34b-a68b-4710-97fe-4e85515c444e<span class="token punctuation">[</span>root@compute ~<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>1.检查 share01 共享存储正确创建并赋予权限计 0.5 分</p><h3 id="【题目-14】Barbican-服务安装与使用-0-5-分"><a href="#【题目-14】Barbican-服务安装与使用-0-5-分" class="headerlink" title="【题目 14】Barbican 服务安装与使用[0.5 分]"></a>【题目 14】Barbican 服务安装与使用[0.5 分]</h3><p>使用 iaas-install-barbican.sh 脚本安装 barbican 服务，安装服务完毕后，使用 openstack 命令创建一个名为 secret01 的密钥，创建完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># iaas-install-barbican.sh</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack secret store --name secret01 --payload secretkey</span>+---------------+-----------------------------------------------------------------------+<span class="token operator">|</span> Field         <span class="token operator">|</span> Value                                                                 <span class="token operator">|</span>+---------------+-----------------------------------------------------------------------+<span class="token operator">|</span> Secret href   <span class="token operator">|</span> http://localhost:9311/v1/secrets/0c75b604-1cae-4172-b632-b769f1d649e3 <span class="token operator">|</span><span class="token operator">|</span> Name          <span class="token operator">|</span> secret01                                                              <span class="token operator">|</span><span class="token operator">|</span> Created       <span class="token operator">|</span> None                                                                  <span class="token operator">|</span><span class="token operator">|</span> Status        <span class="token operator">|</span> None                                                                  <span class="token operator">|</span><span class="token operator">|</span> Content types <span class="token operator">|</span> None                                                                  <span class="token operator">|</span><span class="token operator">|</span> Algorithm     <span class="token operator">|</span> aes                                                                   <span class="token operator">|</span><span class="token operator">|</span> Bit length    <span class="token operator">|</span> <span class="token number">256</span>                                                                   <span class="token operator">|</span><span class="token operator">|</span> Secret <span class="token builtin class-name">type</span>   <span class="token operator">|</span> opaque                                                                <span class="token operator">|</span><span class="token operator">|</span> Mode          <span class="token operator">|</span> cbc                                                                   <span class="token operator">|</span><span class="token operator">|</span> Expiration    <span class="token operator">|</span> None                                                                  <span class="token operator">|</span>+---------------+-----------------------------------------------------------------------+</code></pre><p>1.检查 secret01 密钥创建正确计 0.5 分</p><h3 id="【题目-15】Cloudkitty-服务安装与使用-1-分"><a href="#【题目-15】Cloudkitty-服务安装与使用-1-分" class="headerlink" title="【题目 15】Cloudkitty 服务安装与使用[1 分]"></a>【题目 15】Cloudkitty 服务安装与使用[1 分]</h3><p>使用 iaas-install-cloudkitty.sh 脚本安装cloudkitty 服务，安装完毕后，启用 hashmap 评级模块，接着创建 volume_thresholds 组，创建服务匹配规则 volume.size，并设置每 GB 的价格为 0.01。接下来对应大量数据设置应用折扣，在组 volume_thresholds 中创建阈值，设置若超过 50GB 的阈值，应用 2%的折扣（0.98）。设置完成后提交控制节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#0.启用hashmap</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack rating module enable hashmap </span><span class="token comment">#1.创建hashmap service</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack rating  hashmap service create volume.size </span>+--------+--------------------------------------+<span class="token operator">|</span> Name   <span class="token operator">|</span> Service ID                           <span class="token operator">|</span>+--------+--------------------------------------+<span class="token operator">|</span> volume.size <span class="token operator">|</span> 09da4a8b-b849-4715-a8e3-7cd12dfcf46e <span class="token operator">|</span>+--------+--------------------------------------+<span class="token comment">#2.创建hashmap service group</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack rating hashmap group create  volume_thresholds </span>openstack rating hashmap group create  volume_thresholds +-------------------+--------------------------------------+<span class="token operator">|</span> Name              <span class="token operator">|</span> Group ID                             <span class="token operator">|</span>+-------------------+--------------------------------------+<span class="token operator">|</span> volume_thresholds <span class="token operator">|</span> 8b3dfe73-5efb-46ab-a93b-dc9519063ed6 <span class="token operator">|</span>+-------------------+--------------------------------------+<span class="token comment">#3.创建volume单价</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack rating hashmap mapping create   -s  09da4a8b-b849-4715-a8e3-7cd12dfcf46e -g 8b3dfe73-5efb-46ab-a93b-dc9519063ed6  -t flat  0.01  </span><span class="token comment">#4.创建service rule</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack rating hashmap threshold create   -s  09da4a8b-b849-4715-a8e3-7cd12dfcf46e -g 8b3dfe73-5efb-46ab-a93b-dc9519063ed6  -t rate 50 0.98</span></code></pre><p>1.检查hashmap 评级模块启用成功计 0.2 分<br>2.检查服务匹配规则volume.size 创建成功 0.8 分</p><h3 id="【题目-16】OpenStack-平台内存优化-0-5-分"><a href="#【题目-16】OpenStack-平台内存优化-0-5-分" class="headerlink" title="【题目 16】OpenStack 平台内存优化[0.5 分]"></a>【题目 16】OpenStack 平台内存优化[0.5 分]</h3><p>搭建完 OpenStack 平台后，关闭系统的内存共享，打开透明大页。完成后提交控制节点<br>的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># find / -name defrag</span>/sys/kernel/mm/transparent_hugepage/defrag/sys/kernel/mm/transparent_hugepage/khugepaged/defrag<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># echo never &gt; /sys/kernel/mm/transparent_hugepage/defr</span>ag <span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cat /sys/kernel/mm/transparent_hugepage/defrag </span>always madvise <span class="token punctuation">[</span>never<span class="token punctuation">]</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># </span></code></pre><p>1.检查系统内存优化成功计 0.5 分</p><h3 id="【题目-17】修改文件句柄数-0-5-分"><a href="#【题目-17】修改文件句柄数-0-5-分" class="headerlink" title="【题目 17】修改文件句柄数[0.5 分]"></a>【题目 17】修改文件句柄数[0.5 分]</h3><p>Linux 服务器大并发时，往往需要预先调优 Linux 参数。默认情况下，Linux 最大文件句柄数为 1024 个。当你的服务器在大并发达到极限时，就会报出“too many open files”。创建一台云主机，修改相关配置，将控制节点的最大文件句柄数永久修改为 65535。配置完成后提交 controller 点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># ulimit -n</span><span class="token number">1024</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#  echo "* soft nofile 65535" &gt;&gt; /etc/security/limits.conf</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#  echo "* hard nofile 65535" &gt;&gt; /etc/security/limits.conf</span>*       <span class="token comment">#代表所有用户</span>soft    <span class="token comment">#超过文件句柄数时，仅提示</span>hard    <span class="token comment">#超过文件句柄数时，直接限制</span>Last login: Thu May  <span class="token number">5</span> <span class="token number">19</span>:26:47 <span class="token number">2022</span> from <span class="token number">10.60</span>.2.201 <span class="token comment">#########################</span> <span class="token comment">#  Welcome to XianDian  #</span> <span class="token comment">#########################</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># ulimit -n</span><span class="token number">65535</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># </span></code></pre><p>1.检查配置 linux 系统句柄数为 65535 成功计 0.5 分</p><h3 id="【题目-18】Linux-系统调优-防止SYN-攻击-1-分"><a href="#【题目-18】Linux-系统调优-防止SYN-攻击-1-分" class="headerlink" title="【题目 18】Linux 系统调优-防止SYN 攻击[1 分]"></a>【题目 18】Linux 系统调优-防止SYN 攻击[1 分]</h3><p>修改 controller 节点的相关配置文件，开启 SYN cookie，防止 SYN 洪水攻击。完成后提交 controller 节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@container ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysctl.conf</span><span class="token comment">#添加以下参数</span><span class="token assign-left variable">net.ipv4.tcp_max_syn_backlog</span><span class="token operator">=</span><span class="token number">2048</span><span class="token assign-left variable">net.ipv4.tcp_syncookies</span><span class="token operator">=</span><span class="token number">1</span>net.ipv4.tcp_syn_retries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">[</span>root@container ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_max_syn_backlog <span class="token operator">=</span> <span class="token number">2048</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span>sysctl: setting key <span class="token string">"net.ipv4.tcp_syn_retries"</span><span class="token builtin class-name">:</span> Invalid argumentnet.ipv4.tcp_syn_retries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">[</span>root@container ~<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>1.检查开启SYN cookie 配置计 1 分</p><h2 id="【任务-2】私有云服务运维-15-分"><a href="#【任务-2】私有云服务运维-15-分" class="headerlink" title="【任务 2】私有云服务运维[15 分]"></a>【任务 2】私有云服务运维[15 分]</h2><h3 id="【题目-1】OpenStack-开放镜像权限-0-5-分"><a href="#【题目-1】OpenStack-开放镜像权限-0-5-分" class="headerlink" title="【题目 1】OpenStack 开放镜像权限[0.5 分]"></a>【题目 1】OpenStack 开放镜像权限[0.5 分]</h3><p>使用 OpenStack 私 有 云 平 台 ， 在 OpenStack 平台的 admin 项 目 中 使 用cirros-0.3.4-x86_64-disk.img 镜像文件创建名为glance-cirros 的镜像，通过OpenStack 命令将glance-cirros 镜像指定 demo 项目进行共享使用。配置完成后提交controller 点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack image create --disk-format qcow2 --container-format bare --file cirros-0.3.4-x86_64-disk.img glance-cirros</span><span class="token number">9</span>+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<span class="token operator">|</span> Field            <span class="token operator">|</span> Value                                                                                                                                                                                      <span class="token operator">|</span>+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<span class="token operator">|</span> checksum         <span class="token operator">|</span> ee1eca47dc88f4879d8a229cc70a07c6                                                                                                                                                           <span class="token operator">|</span><span class="token operator">|</span> container_format <span class="token operator">|</span> bare                                                                                                                                                                                       <span class="token operator">|</span><span class="token operator">|</span> created_at       <span class="token operator">|</span> <span class="token number">2022</span>-09-19T07:02:51Z                                                                                                                                                                       <span class="token operator">|</span><span class="token operator">|</span> disk_format      <span class="token operator">|</span> qcow2                                                                                                                                                                                      <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">file</span>             <span class="token operator">|</span> /v2/images/3bac7fd7-bc66-4586-9872-3cbea90da5d2/file                                                                                                                                       <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">id</span>               <span class="token operator">|</span> 3bac7fd7-bc66-4586-9872-3cbea90da5d2                                                                                                                                                       <span class="token operator">|</span><span class="token operator">|</span> min_disk         <span class="token operator">|</span> <span class="token number">0</span>    <span class="token operator">|</span><span class="token operator">|</span> min_ram          <span class="token operator">|</span> <span class="token number">0</span>    <span class="token operator">|</span><span class="token operator">|</span> name             <span class="token operator">|</span> glance-cirros    <span class="token operator">|</span><span class="token operator">|</span> owner            <span class="token operator">|</span> 1b29cb9baa394a0eb3d531913dc9ccec    <span class="token operator">|</span><span class="token operator">|</span> properties       <span class="token operator">|</span> <span class="token assign-left variable">os_hash_algo</span><span class="token operator">=</span><span class="token string">'sha512'</span>, <span class="token assign-left variable">os_hash_value</span><span class="token operator">=</span><span class="token string">'1b03ca1bc3fafe448b90583c12f367949f8b0e665685979d95b004e48574b953316799e23240f4f739d1b5eb4c4ca24d38fdc6f4f9d8247a2bc64db25d6bbdb2'</span>, <span class="token assign-left variable">os_hidden</span><span class="token operator">=</span><span class="token string">'False'</span> <span class="token operator">|</span><span class="token operator">|</span> protected        <span class="token operator">|</span> False    <span class="token operator">|</span><span class="token operator">|</span> schema           <span class="token operator">|</span> /v2/schemas/image    <span class="token operator">|</span><span class="token operator">|</span> size             <span class="token operator">|</span> <span class="token number">13287936</span>    <span class="token operator">|</span><span class="token operator">|</span> status           <span class="token operator">|</span> active    <span class="token operator">|</span><span class="token operator">|</span> tags             <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span> updated_at       <span class="token operator">|</span> <span class="token number">2022</span>-09-19T07:02:53Z    <span class="token operator">|</span><span class="token operator">|</span> virtual_size     <span class="token operator">|</span> None    <span class="token operator">|</span><span class="token operator">|</span> visibility       <span class="token operator">|</span> shared    <span class="token operator">|</span>+------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack domain list</span>+----------------------------------+---------+---------+--------------------+<span class="token operator">|</span> ID                               <span class="token operator">|</span> Name    <span class="token operator">|</span> Enabled <span class="token operator">|</span> Description        <span class="token operator">|</span>+----------------------------------+---------+---------+--------------------+<span class="token operator">|</span> 7fc907bd4a6e471aa6d714ff66646d2a <span class="token operator">|</span> huhy    <span class="token operator">|</span> True    <span class="token operator">|</span> Default Domain     <span class="token operator">|</span><span class="token operator">|</span> default                          <span class="token operator">|</span> Default <span class="token operator">|</span> True    <span class="token operator">|</span> The default domain <span class="token operator">|</span>+----------------------------------+---------+---------+--------------------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># glance member-create 3bac7fd7-bc66-4586-9872-3cbea90da5d2 7fc907bd4a6e471aa6d714ff66646d2a</span><span class="token comment"># 镜像id 域名id</span>+--------------------------------------+----------------------------------+---------+<span class="token operator">|</span> Image ID                             <span class="token operator">|</span> Member ID                        <span class="token operator">|</span> Status  <span class="token operator">|</span>+--------------------------------------+----------------------------------+---------+<span class="token operator">|</span> 3bac7fd7-bc66-4586-9872-3cbea90da5d2 <span class="token operator">|</span> 7fc907bd4a6e471aa6d714ff66646d2a <span class="token operator">|</span> pending <span class="token operator">|</span>+--------------------------------------+----------------------------------+---------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># glance member-update 3bac7fd7-bc66-4586-9872-3cbea90da5d2 7fc907bd4a6e471aa6d714ff66646d2a accepted                                                                                    +--------------------------------------+----------------------------------+----------+</span><span class="token operator">|</span> Image ID                             <span class="token operator">|</span> Member ID                        <span class="token operator">|</span> Status   <span class="token operator">|</span>+--------------------------------------+----------------------------------+----------+<span class="token operator">|</span> 3bac7fd7-bc66-4586-9872-3cbea90da5d2 <span class="token operator">|</span> 7fc907bd4a6e471aa6d714ff66646d2a <span class="token operator">|</span> accepted <span class="token operator">|</span>+--------------------------------------+----------------------------------+----------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>1.检查glance-cirros 镜像权限开放正确计 0.5 分</p><h3 id="【题目-2】OpenStack-消息队列调优-0-5-分"><a href="#【题目-2】OpenStack-消息队列调优-0-5-分" class="headerlink" title="【题目 2】OpenStack 消息队列调优[0.5 分]"></a>【题目 2】OpenStack 消息队列调优[0.5 分]</h3><p>OpenStack 各服务内部通信都是通过 RPC 来交互，各 agent 都需要去连接 RabbitMQ； 随着各服务 agent 增多，MQ 的连接数会随之增多，最终可能会到达上限，成为瓶颈。使用自行搭建的OpenStack 私有云平台，分别通过用户级别、系统级别、配置文件来设置RabbitMQ 服务的最大连接数为 10240，配置完成后提交修改节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/sysctl.conf</span>fs.file-max<span class="token operator">=</span><span class="token number">10240</span><span class="token comment">#在sysctl.conf文件的最下方添加一行fs.file-max=10240</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>fs.file-max <span class="token operator">=</span> <span class="token number">10240</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/security/limits.conf</span>openstack soft     nofile  <span class="token number">10240</span>openstack hard     nofile  <span class="token number">10240</span><span class="token comment">#在配置文件的最后添加两行内容如上,修改完之后，保存退出</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi /usr/lib/systemd/system/rabbitmq-server.service</span><span class="token comment">#在[Service]下添加一行参数如下：</span><span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">10240</span><span class="token comment">#重启服务</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart rabbitmq-server</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># rabbitmqctl status</span>Status of <span class="token function">node</span> rabbit@controller<span class="token punctuation">[</span><span class="token punctuation">{</span>pid,4561<span class="token punctuation">}</span>, <span class="token punctuation">{</span>running_applications, <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token punctuation">{</span>file_descriptors,     <span class="token punctuation">[</span><span class="token punctuation">{</span>total_limit,10140<span class="token punctuation">}</span>,   <span class="token comment">#已经有100个连接数,可以看到当前的RabbitMQ已被修改</span>      <span class="token punctuation">{</span>total_used,77<span class="token punctuation">}</span>,      <span class="token punctuation">{</span>sockets_limit,9124<span class="token punctuation">}</span>,      <span class="token punctuation">{</span>sockets_used,75<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>processes,<span class="token punctuation">[</span><span class="token punctuation">{</span>limit,1048576<span class="token punctuation">}</span>,<span class="token punctuation">{</span>used,1150<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>run_queue,0<span class="token punctuation">}</span>, <span class="token punctuation">{</span>uptime,40<span class="token punctuation">}</span>, <span class="token punctuation">{</span>kernel,<span class="token punctuation">{</span>net_ticktime,60<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>1.检查 rabbitmq 服务最大连接数正确计 0.5 分</p><h3 id="【题目-3】OpenStack-Glance-镜像压缩-0-5-分"><a href="#【题目-3】OpenStack-Glance-镜像压缩-0-5-分" class="headerlink" title="【题目 3】OpenStack Glance 镜像压缩[0.5 分]"></a>【题目 3】OpenStack Glance 镜像压缩[0.5 分]</h3><p>使用自行搭建的 OpenStack 平台。在 HTTP 服务中存在一个镜像为CentOS7.5-compress.qcow2 的镜像，请使用 qemu 相关命令，对该镜像进行压缩，压缩后的镜像命名为chinaskill-js-compress.qcow2 并存放在/root 目录下。完成后提交 controller 点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># du -sh CentOS7.5-compress.qcow2</span>892M CentOS7.5-compress.qcow2<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># qemu-img convert -c -O qcow2 CentOS7.5-compress.qcow2 CentOS7.5-compress2.qcow2</span><span class="token parameter variable">-c</span> 压缩<span class="token parameter variable">-O</span> qcow2 输出格式为 qcow2CentOS7.5-compress.qcow2   被压缩的文件CentOS7.5-compress2.qcow2 压缩完成后文件<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># du -sh CentOS7.5-compress2.qcow2</span>405M CentOS7.5-compress2.qcow2</code></pre><p>1.检查镜像压缩正确计 0.5 分</p><h3 id="【题目-4】glance-对接-cinder-后端存储-0-5-分"><a href="#【题目-4】glance-对接-cinder-后端存储-0-5-分" class="headerlink" title="【题目 4】glance 对接 cinder 后端存储[0.5 分]"></a>【题目 4】glance 对接 cinder 后端存储[0.5 分]</h3><p>在自行搭建的OpenStack 平台中修改相关参数，使glance 可以使用cinder 作为后端存储， 将镜像存储于cinder 卷中。使用 cirros-0.3.4-x86_64-disk.img 文件创建 cirros-image 镜像存储于 cirros-cinder 卷中，通过 cirros-image 镜像使用 cinder 卷启动盘的方式进行创建虚拟机。完成后提交修改节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/glance/glance-api.conf</span><span class="token comment">#show_multiple_locations = false</span>改为show_multiple_locations <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart openstack-glance-*</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/cinder/cinder.conf</span><span class="token comment">#allowed_direct_url_schemes =</span>改为allowed_direct_url_schemes <span class="token operator">=</span>cinder<span class="token comment">#image_upload_use_internal_tenant = false</span>改为image_upload_use_internal_tenant <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment">#最后重启cinder</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart openstack-cinderack-cinder-scheduler.service httpd</span>代码不全,还差一些操作,只有一半的分</code></pre><p>1.检查修改glance 后端存储为 cinder 正确计 0.5 分</p><h3 id="【题目-5】OpenStack-Heat-运维：创建容器-0-5-分"><a href="#【题目-5】OpenStack-Heat-运维：创建容器-0-5-分" class="headerlink" title="【题目 5】OpenStack Heat 运维：创建容器[0.5 分]"></a>【题目 5】OpenStack Heat 运维：创建容器[0.5 分]</h3><p>在自行搭建的 OpenStack 私 有 云 平 台 上 ， 在 /root 目录下编写 Heat 模板create_container.yaml，要求执行 yaml 文件可以创建名为 heat-swift 的容器。完成后提交控制节点的用户名、密码和 IP 地址到答题框。（在提交信息前请准备好 yaml 模板执行的环境）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vim create_container.yaml</span>heat_template_version: <span class="token number">2014</span>-10-16resources:  user:    type: OS::Container::Swift    properties:      name: heat-swift<span class="token comment">#此类题目，在dashboard界面上都有模板可以查询</span></code></pre><p>1.执行heat 模板文件成功创建容器计 0.5 分</p><h3 id="【题目-6】OpenStack-Nova-清除缓存-0-5-分"><a href="#【题目-6】OpenStack-Nova-清除缓存-0-5-分" class="headerlink" title="【题目 6】OpenStack Nova 清除缓存[0.5 分]"></a>【题目 6】OpenStack Nova 清除缓存[0.5 分]</h3><p>在 OpenStack 平台的一台计算节点创建虚拟机，若是第一次在该节点创建次虚拟机，会先将镜像文件复制到该计算节点目录/var/lib/nova/instances/_base。长期下来，该目录会占用比较大的磁盘空间而要清理。可以通过修改 nova 的配置文件来自动清理该缓存目录，即在该节点没有使用某镜像启动的云主机，那么这个镜像在过一定的时间后会被自动删除。配置完成后提交改动节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash">此题默认配置文件是是正确的，直接提交即可得分</code></pre><p>1.检查nova 配置自动清理缓存文件正确计 0.5 分</p><h3 id="【题目-7】Redis-一主二从三哨兵模式-1-分"><a href="#【题目-7】Redis-一主二从三哨兵模式-1-分" class="headerlink" title="【题目 7】Redis 一主二从三哨兵模式[1 分]"></a>【题目 7】Redis 一主二从三哨兵模式[1 分]</h3><p>使用提供的 OpenStack 私有云平台，申请三台 CentOS7.9 系统的云主机，使用提供的http 源，在三个节点自行安装 Redis 服务并启动，配置 Redis 的访问需要密码，密码设置为123456。然后将这三个 Redis 节点配置为 Redis 的一主二从三哨兵架构，即一个 Redis 主节点，两个从节点，三个节点均为哨兵节点。配置完成后提交Redis 主节点的用户名、密码和IP 地址到答题框。</p><p>（1）环境配置</p><table><thead><tr><th align="center">主机</th><th align="center">系统</th><th align="center">IP</th><th align="center">安装包</th></tr></thead><tbody><tr><td align="center">Master</td><td align="center">CentOS7.9</td><td align="center">192.168.154.19</td><td align="center">redis-5.0.7.tar.gz</td></tr><tr><td align="center">Slave1</td><td align="center">CentOS7.9</td><td align="center">192.168.154.20</td><td align="center">redis-5.0.7.tar.gz</td></tr><tr><td align="center">Slave2</td><td align="center">CentOS7.9</td><td align="center">192.168.154.21</td><td align="center">redis-5.0.7.tar.gz</td></tr></tbody></table><p>(2) 修改 Redis 配置文件（所有节点操作)</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalldsetenforce <span class="token number">0</span> <span class="token function">vim</span> /opt/redis-5.0.7/sentinel.confprotected-mode no<span class="token comment">#17行，关闭保护模式</span>port <span class="token number">26379</span><span class="token comment">#21行，Redis哨兵默认的监听端口</span>daemonize <span class="token function">yes</span><span class="token comment">#26行，指定sentinel为后台启动</span>logfile <span class="token string">"/var/log/sentinel.log"</span><span class="token comment">#36行，指定日志存放路径</span><span class="token function">dir</span> <span class="token string">"/var/lib/redis/6379"</span><span class="token comment">#65行，指定数据库存放路径</span>sentinel monitor mymaster <span class="token number">192.168</span>.154.19 <span class="token number">6379</span> <span class="token number">2</span><span class="token comment">#84行，修改 指定该哨兵节点监控192.168.184.10:6379这个主节点，该主节点的名称是mymaster，最后的2的含义与主节点的故障判定有关：至少需要2个哨兵节点同意，才能判定主节点故障并进行故障转移</span>sentinel down-after-milliseconds mymaster <span class="token number">30000</span><span class="token comment">#113行，判定服务器down掉的时间周期，默认30000毫秒（30秒）</span>sentinel failover-timeout mymaster <span class="token number">180000</span><span class="token comment">#146行，故障节点的最大超时时间为180000（180秒）</span></code></pre><p><img src="https://telegraph-image-7df.pages.dev/file/dd1e6b8f434f6f5af4d88.png"><br><img src="https://telegraph-image-7df.pages.dev/file/cad32d1b5b0e18e13f31f.png"><br><img src="https://telegraph-image-7df.pages.dev/file/f7e79846ca8912bb57d84.png"><br><img src="https://telegraph-image-7df.pages.dev/file/490ebb00f4348323ffde4.png"><br> （3)启动哨兵模式</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/redis-5.0.7/redis-sentinel sentinel.conf <span class="token operator">&amp;</span>注意！先启动主服务器，再启动从服务器</code></pre><p><img src="https://telegraph-image-7df.pages.dev/file/94851e1094c6bb6966817.png"><br><img src="https://telegraph-image-7df.pages.dev/file/26e4cf2bc7217b745c979.png"><br><img src="https://telegraph-image-7df.pages.dev/file/434c1cb4561e55b899474.png"></p><p>（4）查看哨兵信息</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@slave2 redis-5.0.7<span class="token punctuation">]</span><span class="token comment"># redis-cli -p 26379 info Sentinel</span><span class="token comment"># Sentinel</span>sentinel_masters:1sentinel_tilt:0sentinel_running_scripts:0sentinel_scripts_queue_length:0sentinel_simulate_failure_flags:0master0:name<span class="token operator">=</span>mymaster,status<span class="token operator">=</span>ok,address<span class="token operator">=</span><span class="token number">192.168</span>.58.30:6379,slaves<span class="token operator">=</span><span class="token number">2</span>,sentinels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  完成                  redis-sentinel sentinel.conf</code></pre><p>1.检查 redis 主从集群部署正确计 0.5 分<br>2.检查 redis 集群部署为哨兵节点正确计 0.5 分</p><h3 id="【题目-8】Redis-服务调优-AOF-1-分"><a href="#【题目-8】Redis-服务调优-AOF-1-分" class="headerlink" title="【题目 8】Redis 服务调优-AOF[1 分]"></a>【题目 8】Redis 服务调优-AOF[1 分]</h3><p>使用上一题安装的Redis 服务。在 Redis 中，AOF 配置为以三种不同的方式在磁盘上执行 write 或者 fsync。假设当前 Redis 压力过大，请配置 Redis 不执行 fsync。除此之外，避免AOF 文件过大，Redis 会进行 AOF 重写，生成缩小的 AOF 文件。请修改配置，让 AOF 重写时，不进行fsync 操作。配置完成后提交 Redis 节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/redis.conf</span>no-appendfsync-on-rewrite noaof-rewrite-incremental-fsync <span class="token function">yes</span><span class="token comment">#连个参数分别改为</span>aof-rewrite-incremental-fsync nono-appendfsync-on-rewrite <span class="token function">yes</span><span class="token comment">#配置就是设置为yes时候，在aof重写期间会停止aof的fsync操作</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart redis</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>1.检查配置 redis 不执行 fsync 正确计 0.5 分、<br>2.检查配置 redis 进行 AOF 重写不执行 fsync 正确计 0.5 分</p><h3 id="【题目-9】应用部署：堡垒机部署-0-5-分"><a href="#【题目-9】应用部署：堡垒机部署-0-5-分" class="headerlink" title="【题目 9】应用部署：堡垒机部署[0.5 分]"></a>【题目 9】应用部署：堡垒机部署[0.5 分]</h3><p>使用提供的 OpenStack 平台申请一台 CentOS7.9 的云主机，使用提供的软件包安装JumpServer 堡垒机服务，并配置使用该堡垒机对接自己安装的 controller 和 compute 节点。完成后提交 JumpServer 节点的用户名、密码和 IP 地址到答题框。</p><p>使用提供的软件包配置Yum源，通过地址将jumpserver.tar.gz软件包下载至Jumpserver节点的/root目录下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@jumpserver ~<span class="token punctuation">]</span><span class="token comment"># ls</span>anaconda-ks.cfg  jumpserver.tar.gz  original-ks.cfg</code></pre><p>解压软件包jumpserver.tar.gz至/opt目录下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@jumpserver ~<span class="token punctuation">]</span><span class="token comment"># tar -zxvf jumpserver.tar.gz -C /opt/</span><span class="token punctuation">[</span>root@jumpserver ~<span class="token punctuation">]</span><span class="token comment"># ls /opt/</span>compose  config  <span class="token function">docker</span>  docker.service  images  jumpserver-repo  static.env</code></pre><p>将默认Yum源移至其他目录，创建本地Yum源文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@jumpserver ~<span class="token punctuation">]</span><span class="token comment"># mv /etc/yum.repos.d/* /mnt/</span><span class="token punctuation">[</span>root@jumpserver ~<span class="token punctuation">]</span><span class="token comment"># cat &gt;&gt; /etc/yum.repos.d/jumpserver.repo &lt;&lt; EOF</span><span class="token punctuation">[</span>jumpserver<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>jumpserver<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///opt/jumpserver-repo<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span>EOF<span class="token punctuation">[</span>root@jumpserver ~<span class="token punctuation">]</span><span class="token comment"># yum repolist</span>repo <span class="token function">id</span>repo namestatusjumpserverjumpserver<span class="token number">2</span></code></pre><p>安装Python数据库</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@jumpserver ~<span class="token punctuation">]</span><span class="token comment"># yum install python2 -y</span></code></pre><p>安装配置Docker环境</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@jumpserver opt<span class="token punctuation">]</span><span class="token comment"># cp -rf /opt/docker/* /usr/bin/</span><span class="token punctuation">[</span>root@jumpserver opt<span class="token punctuation">]</span><span class="token comment"># chmod 775 /usr/bin/docker*</span><span class="token punctuation">[</span>root@jumpserver opt<span class="token punctuation">]</span><span class="token comment"># cp -rf /opt/docker.service /etc/systemd/system</span><span class="token punctuation">[</span>root@jumpserver opt<span class="token punctuation">]</span><span class="token comment"># chmod 775 /etc/systemd/system/docker.service </span><span class="token punctuation">[</span>root@jumpserver opt<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@jumpserver opt<span class="token punctuation">]</span><span class="token comment"># systemctl enable docker --now</span>Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /etc/systemd/system/docker.service.</code></pre><p>验证服务状态</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@jumpserver opt<span class="token punctuation">]</span><span class="token comment"># docker -v</span>Docker version <span class="token number">18.06</span>.3-ce, build d7080c1<span class="token punctuation">[</span>root@jumpserver opt<span class="token punctuation">]</span><span class="token comment"># docker-compose -v</span><span class="token function">docker-compose</span> version <span class="token number">1.27</span>.4, build <span class="token number">40524192</span><span class="token punctuation">[</span>root@jumpserver opt<span class="token punctuation">]</span><span class="token comment"># </span></code></pre><p>安装Jumpserver服务</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@jumpserver images<span class="token punctuation">]</span><span class="token comment"># ls</span>jumpserver_core_v2.11.4.tar  jumpserver_lion_v2.11.4.tar  jumpserver_nginx_alpine2.tarjumpserver_koko_v2.11.4.tar  jumpserver_luna_v2.11.4.tar  jumpserver_redis_6-alpine.tarjumpserver_lina_v2.11.4.tar  jumpserver_mysql_5.tar       load.sh<span class="token punctuation">[</span>root@jumpserver images<span class="token punctuation">]</span><span class="token comment"># cat load.sh </span><span class="token comment">#!/bin/bash</span><span class="token function">docker</span> load <span class="token parameter variable">-i</span> jumpserver_core_v2.11.4.tar<span class="token function">docker</span> load <span class="token parameter variable">-i</span> jumpserver_koko_v2.11.4.tar<span class="token function">docker</span> load <span class="token parameter variable">-i</span> jumpserver_lina_v2.11.4.tar<span class="token function">docker</span> load <span class="token parameter variable">-i</span> jumpserver_lion_v2.11.4.tar<span class="token function">docker</span> load <span class="token parameter variable">-i</span> jumpserver_luna_v2.11.4.tar<span class="token function">docker</span> load <span class="token parameter variable">-i</span> jumpserver_mysql_5.tar<span class="token function">docker</span> load <span class="token parameter variable">-i</span> jumpserver_nginx_alpine2.tar<span class="token function">docker</span> load <span class="token parameter variable">-i</span> jumpserver_redis_6-alpine.tar<span class="token punctuation">[</span>root@jumpserver images<span class="token punctuation">]</span><span class="token comment"># sh load.sh </span></code></pre><p>创建Jumpserver服务组件目录</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@jumpserver images<span class="token punctuation">]</span><span class="token comment"># mkdir -p /opt/jumpserver/{core,koko,lion,mysql,nginx,redis}</span><span class="token punctuation">[</span>root@jumpserver images<span class="token punctuation">]</span><span class="token comment"># cp -rf /opt/config /opt/jumpserver/</span></code></pre><p>生效环境变量static.env，使用所提供的脚本up.sh启动Jumpserver服务</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@jumpserver compose<span class="token punctuation">]</span><span class="token comment"># ls</span>config_static                docker-compose-lb.yml              docker-compose-network.yml         down.shdocker-compose-app.yml       docker-compose-mysql-internal.yml  docker-compose-redis-internal.yml  up.shdocker-compose-es.yml        docker-compose-mysql.yml           docker-compose-redis.ymldocker-compose-external.yml  docker-compose-network_ipv6.yml    docker-compose-task.yml<span class="token punctuation">[</span>root@jumpserver compose<span class="token punctuation">]</span><span class="token comment"># source /opt/static.env </span><span class="token punctuation">[</span>root@jumpserver compose<span class="token punctuation">]</span><span class="token comment"># sh up.sh </span>Creating network <span class="token string">"jms_net"</span> with driver <span class="token string">"bridge"</span>Creating jms_redis <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating jms_mysql <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating jms_core  <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating jms_lina   <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating jms_nginx  <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating jms_celery <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating jms_lion   <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating jms_luna   <span class="token punctuation">..</span>. <span class="token keyword">done</span>Creating jms_koko   <span class="token punctuation">..</span>. <span class="token keyword">done</span><span class="token punctuation">[</span>root@jumpserver compose<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>浏览器访问<a href="http://10.24.193.142/">http://10.24.193.142</a> Jumpserver Web登录（admin/admin）<br><img src="https://telegraph-image-7df.pages.dev/file/cedfd6e5e6af3a67d424c.png" alt="图1 登录.png"></p><p>登录成功后，会提示设置新密码，如图2所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/c15f3f0181c24584851a3.png" alt="图2 修改密码.png"></p><p>登录平台后，单击页面右上角下拉菜单切换中文字符设置，如图3所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/da386e0374242b4590a60.png" alt="图3 首页.png"></p><p>至此Jumpserver安装完成。</p><p>（6）管理资产</p><p>使用管理员admin用户登录Jumpserver管理平台，单击左侧导航栏，展开“资产管理”项目，选择“管理用户”，单击右侧“创建”按钮，如图4所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/1b806211365d32c6e1868.png" alt="图4 管理用户.png"></p><p>创建远程连接用户，用户名为root密码为“Abc@1234”，单击“提交”按钮进行创建，如图5所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/59a099ea81d11e7f4bd3c.png" alt="图5 创建管理用户.png"></p><p>选择“系统用户”，单击右侧“创建”按钮，创建系统用户，选择主机协议“SSH”，设置用户名root，密码为服务器SSH密码并单击“提交”按钮，如图6所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/b04e215e21d21725d99f8.png" alt="图6 创建系统用户.png"></p><p>单击左侧导航栏，展开“资产管理”项目，选择“资产列表”，单击右侧“创建”按钮，如图7所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/ea9b58265736443fd1e8c.png" alt="图7 管理资产.png"></p><p>创建资产，将云平台主机（controller）加入资产内，如图8、图9所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/7e313f485a0739e42d960.png" alt="图8 创建资产controller.png"></p><p><img src="https://telegraph-image-7df.pages.dev/file/9b72454925357ff1defe6.png" alt="图9 创建成功.png"></p><p>（7）资产授权</p><p>单击左侧导航栏，展开“权限管理”项目，选择“资产授权”，单击右侧“创建”按钮，创建资产授权规则，如图10所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/d4722884ab8e7f5135b40.png" alt="图10 创建资产授权规则.png"></p><p>（8）测试连接</p><p>单击右上角管理员用户下拉菜单，选择“用户界面”，如图11所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/3af82f5b92323c2dfe9cd.png" alt="图11 创建资产授权规则.png"></p><p>如果未出现Default项目下的资产主机，单击收藏夹后“刷新”按钮进行刷新，如图12所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/1420f211fd9ebc4006fb5.png" alt="图12 查看资产.png"></p><p>单击左侧导航栏，选择“Web终端”进入远程连接页面，如图13所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/abc429a6d3eb20259ff4d.png" alt="图13 进入远程连接终端.png"></p><p>单击左侧Default，展开文件夹，单击controller主机，右侧成功连接主机，如图14所示：</p><p><img src="https://telegraph-image-7df.pages.dev/file/2d57902e34c54062b1bd5.png" alt="图14 测试连接.png"></p><p>至此OpenStack对接堡垒机案例操作成功。</p><h3 id="【题目-10】skywalking-服务部署与应用-1-分"><a href="#【题目-10】skywalking-服务部署与应用-1-分" class="headerlink" title="【题目 10】skywalking 服务部署与应用[1 分]"></a>【题目 10】skywalking 服务部署与应用[1 分]</h3><p>使用提供的 OpenStack 私有云平台，申请一台 centos7.9 系统的云主机，使用提供的软件包安装 Elasticsearch 服务和 skywalking 服务，将 skywalking 的 UI 访问端口修改为 8888。接下来再申请一台CentOS7.9 的云主机，用于搭建gpmall 商城应用，并配置SkyWalking Agent， 将 gpmall 的 jar 包放置探针并启动。安装与配置完成后提交 skywalking 节点的用户名、密码和 IP 地址到答题框。</p><p>登录物理OpenStack平台，使用CentOS7.9镜像创建两台云主机（node-1，mall），云主机类型使用4VCPU/8GB内存/100GB硬盘。创建后的云主机作为本次案例的实验节点。</p><p>修改主机名</p><pre class="language-none"><code class="language-none">[root@node-1 ~]# hostnamectl set-hostname node-1[root@node-1 ~]# hostnamectl  Static hostname: node-1        Icon name: computer-vm          Chassis: vm      Machine ID: cc2c86fe566741e6a2ff6d399c5d5daa          Boot ID: 6c32a0c1d29e4f30929422c8032239ca  Virtualization: kvmOperating System: CentOS Linux 7 (Core)      CPE OS Name: cpe:/o:centos:centos:7          Kernel: Linux 3.10.0-1160.el7.x86_64    Architecture: x86-64</code></pre><p>将提供的elasticsearch-7.17.0-linux-x86_64.tar.gz软件包上传到此节点并解压到/opt目录，进入解压后的目录并创建data目录</p><pre class="language-none"><code class="language-none">[root@node-1 ~]# tar -zxvf elasticsearch-7.17.0-linux-x86_64.tar.gz -C /opt[root@node-1 ~]# cd /opt/elasticsearch-7.17.0/[root@node-1 elasticsearch-7.17.0]# mkdir data</code></pre><p>修改Elasticsearch配置，修改并添加如下几行内容</p><pre class="language-none"><code class="language-none">[root@node-1 elasticsearch-7.17.0]# vi config/elasticsearch.yml…cluster.name: my-applicationnode.name: node-1path.data: /opt/elasticsearch-7.17.0/datapath.logs: /opt/elasticsearch-7.17.0/logsnetwork.host: 0.0.0.0cluster.initial_master_nodes: ["node-1"]…http.cors.enabled: truehttp.cors.allow-origin: "*"http.cors.allow-headers: Authorization,X-Requested-With,Content-Length,Content-Type</code></pre><p>创建Elasticsearch启动用户，并设置属组及权限</p><pre class="language-none"><code class="language-none">[root@node-1 elasticsearch-7.17.0]# groupadd elsearch[root@node-1 elasticsearch-7.17.0]# useradd elsearch -g elsearch -p elasticsearch[root@node-1 elasticsearch-7.17.0]# chown -R elsearch:elsearch /opt/elasticsearch-7.17.0</code></pre><p>修改资源限制及内核配置，添加如下内容</p><pre class="language-none"><code class="language-none">[root@node-1 elasticsearch-7.17.0]# vi /etc/security/limits.conf…* hard   nofile           65536* soft   nofile           65536[root@node-1 elasticsearch-7.17.0]# vi /etc/sysctl.confvm.max_map_count=262144[root@node-1 elasticsearch-7.17.0]# sysctl -p[root@node-1 elasticsearch-7.17.0]# reboot</code></pre><p>启动Elasticsearch服务</p><pre class="language-none"><code class="language-none">[root@node-1 ~]# cd /opt/elasticsearch-7.17.0/[root@node-1 elasticsearch-7.17.0]# su elsearch[elsearch@node-1 elasticsearch-7.17.0]$ ./bin/elasticsearch -d按Ctrl+D退出</code></pre><p>查询端口，存在9200则成功启动</p><pre class="language-none"><code class="language-none">[root@node-1 elasticsearch-7.17.0]# netstat -ntplActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address     Foreign Address       State       PID/Program nametcp        0      0 0.0.0.0:22         0.0.0.0:*             LISTEN      1081/sshd      tcp        0      0 127.0.0.1:25       0.0.0.0:*             LISTEN      1041/master    tcp        0      0 0.0.0.0:111        0.0.0.0:*             LISTEN      610/rpcbind    tcp6       0      0 :::9300           :::*                 LISTEN      2261/java      tcp6       0      0 :::22             :::*                 LISTEN      1081/sshd      tcp6       0      0 ::1:25             :::*                 LISTEN      1041/master    tcp6       0      0 :::111             :::*                 LISTEN      610/rpcbind    tcp6       0      0 :::9200           :::*                 LISTEN      2261/java</code></pre><p>使用提供的jdk-8u144-linux-x64.tar.gz软件包，上传jdk软件包，配置jdk如下</p><pre class="language-none"><code class="language-none">[root@node-1 ~]# tar -zxvf jdk-8u144-linux-x64.tar.gz -C /usr/local/[root@node-1 ~]# vi /etc/profile# /etc/profileexport JAVA_HOME=/usr/local/jdk1.8.0_144export CLASSPATH=.:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jarexport PATH=$PATH:${JAVA_HOME}/bin…[root@node-1 ~]# source /etc/profile[root@node-1 ~]# java -versionjava version "1.8.0_144"Java(TM) SE Runtime Environment (build 1.8.0_144-b01)Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)</code></pre><p>进入解压后目录，修改OAP配置文件</p><pre class="language-none"><code class="language-none">[root@node-1 ~]# cd /opt/apache-skywalking-apm-bin-es7/[root@node-1 apache-skywalking-apm-bin-es7]# vi config/application.yml…#集群配置使用单机版cluster:selector: ${SW_CLUSTER:standalone}standalone:…#数据库使用elasticsearch7storage:selector: ${SW_STORAGE:elasticsearch7}…elasticsearch7:  nameSpace: ${SW_NAMESPACE:""}  clusterNodes: ${SW_STORAGE_ES_CLUSTER_NODES:172.128.11.32:9200}</code></pre><p>启动OAP服务，查询端口，存在11800与12800则成功启动</p><pre class="language-none"><code class="language-none">[root@node-1 apache-skywalking-apm-bin-es7]# ./bin/oapService.shSkyWalking OAP started successfully![root@node-1 apache-skywalking-apm-bin-es7]# netstat -ntplActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address       Foreign Address     State     PID/Program nametcp        0      0 0.0.0.0:22           0.0.0.0:*           LISTEN     1081/sshd      tcp        0      0 127.0.0.1:25         0.0.0.0:*           LISTEN     1041/master    tcp        0      0 0.0.0.0:111          0.0.0.0:*           LISTEN     610/rpcbind    tcp6       0      0 :::9300             :::*                 LISTEN     2261/java      tcp6       0      0 :::22               :::*                 LISTEN     1081/sshd      tcp6       0      0 :::11800             :::*                 LISTEN     2416/java      tcp6       0      0 ::1:25               :::*                 LISTEN     1041/master    tcp6       0      0 :::12800             :::*                 LISTEN     2416/java      tcp6       0      0 :::111               :::*                 LISTEN     610/rpcbind    tcp6       0      0 :::9200             :::*                 LISTEN     2261/java</code></pre><p> 部署SkyWalking UI服务由于SkyWalking UI的默认地址是8080，与很多中间件可能存在冲突，修改一下</p><pre class="language-none"><code class="language-none">[root@node-1 apache-skywalking-apm-bin-es7]# vi webapp/webapp.yml…server:port: 8888…</code></pre><p>启动SkyWalking UI服务</p><pre class="language-none"><code class="language-none">[root@node-1 apache-skywalking-apm-bin-es7]# ./bin/webappService.shSkyWalking Web Application started successfully!</code></pre><p>查看端口，存在8888则成功启动</p><pre class="language-none"><code class="language-none">[root@node-1 apache-skywalking-apm-bin-es7]# netstat -ntplActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address       Foreign Address     State       PID/Program nametcp        0      0 0.0.0.0:22           0.0.0.0:*           LISTEN      1081/sshd      tcp        0      0 127.0.0.1:25         0.0.0.0:*           LISTEN      1041/master    tcp        0      0 0.0.0.0:111          0.0.0.0:*           LISTEN      610/rpcbind    tcp6       0      0 :::9300             :::*               LISTEN      2261/java      tcp6       0      0 :::22               :::*               LISTEN      1081/sshd      tcp6       0      0 :::8888             :::*               LISTEN      3133/java      tcp6       0      0 :::11800             :::*               LISTEN      2416/java      tcp6       0      0 ::1:25               :::*               LISTEN      1041/master    tcp6       0      0 :::12800             :::*               LISTEN      2416/java      tcp6       0      0 :::111               :::*               LISTEN      610/rpcbind    tcp6       0      0 :::9200             :::*               LISTEN      2261/java</code></pre><p>搭建并启动应用商城服务，并配置SkyWalking Agent修改mall节点主机名</p><pre class="language-none"><code class="language-none">[root@localhost ~]# hostnamectl set-hostname mall[root@mall ~]# hostnamectl  Static hostname: mall        Icon name: computer-vm          Chassis: vm      Machine ID: cc2c86fe566741e6a2ff6d399c5d5daa          Boot ID: 51559d155ec14aafad2411ca8b85db42  Virtualization: kvmOperating System: CentOS Linux 7 (Core)      CPE OS Name: cpe:/o:centos:centos:7          Kernel: Linux 3.10.0-1160.el7.x86_64    Architecture: x86-64</code></pre><p>修改/etc/hosts配置文件如下</p><pre class="language-none"><code class="language-none">[root@mall ~]# cat /etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6172.128.11.42 mal</code></pre><p>将提供的gpmall包上传到服务器的/root目录下并解压gpmall.tar.gz，配置本地local.repo文件</p><pre class="language-none"><code class="language-none">[root@mall ~]# mv /etc/yum.repos.d/* /media/[root@mall ~]# cd gpmall/[root@mall gpmall]# tar -zxvf gpmall-repo.tar.gz -C /root/[root@mall ~]# cat /etc/yum.repos.d/local.repo[mall]name=mallbaseurl=file:///root/gpmall-repogpgcheck=0enabled=1</code></pre><p>安装基础服务，包括Java JDK环境、数据库、Redis、Nginx等</p><pre class="language-none"><code class="language-none">[root@mall ~]# yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel...[root@mall ~]# java -versionopenjdk version "1.8.0_322"OpenJDK Runtime Environment (build 1.8.0_322-b06)OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode)[root@mall ~]# yum install redis -y[root@mall ~]# yum install nginx -y[root@mall ~]# yum install mariadb mariadb-server -y[root@mall ~]# tar -zxvf zookeeper-3.4.14.tar.gz#进入到zookeeper-3.4.14/conf目录下，将zoo_sample.cfg文件重命名为zoo.cf[root@mall ~]# cd zookeeper-3.4.14/conf/[root@mall conf]# mv zoo_sample.cfg zoo.cfg[root@mall conf]# cd ../bin[root@mall bin]# ./zkServer.sh startZooKeeper JMX enabled by defaultUsing config: /root/zookeeper-3.4.14/bin/../conf/zoo.cfgStarting zookeeper ... STARTED#查看ZooKeeper状态[root@mall bin]# ./zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: /root/zookeeper-3.4.14/bin/../conf/zoo.cfgMode: standalone安装Kafka服务，将提供的kafka_2.11-1.1.1.tgz包上传到mall节点上[root@mall bin]# cd[root@mall ~]# tar -zxvf kafka_2.11-1.1.1.tgz[root@mall ~]# cd kafka_2.11-1.1.1/bin/[root@mall bin]# ./kafka-server-start.sh -daemon ../config/server.properties[root@mall bin]# jps6039 Kafka1722 QuorumPeerMain6126 Jps[root@mall bin]# netstat -ntplActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address       Foreign Address     State       PID/Program name    tcp        0      0 0.0.0.0:22           0.0.0.0:*           LISTEN      1008/sshd  tcp        0      0 127.0.0.1:25         0.0.0.0:*           LISTEN      887/master  tcp6       0      0 :::9092             :::*               LISTEN      6039/java  tcp6       0      0 :::46949             :::*               LISTEN      6039/java  tcp6       0      0 :::2181             :::*               LISTEN      1722/java  tcp6       0      0 :::48677             :::*               LISTEN      1722/java  tcp6       0      0 :::22               :::*               LISTEN      1008/sshd  tcp6       0      0 ::1:25               :::*               LISTEN      887/master</code></pre><p>修改数据库配置文件并启动MariaDB数据库，设置root用户密码为123456，并创建gpmall数据库，将提供的gpmall.sql导入。</p><pre class="language-none"><code class="language-none">[root@mall bin]# cd[root@mall ~]# vi /etc/my.cnf[mysqld]…!includedir /etc/my.cnf.dinit_connect='SET collation_connection = utf8_unicode_ci'init_connect='SET NAMES utf8'character-set-server=utf8collation-server=utf8_unicode_ciskip-character-set-client-handshake[root@mall ~]# systemctl start mariadb</code></pre><p>设置root用户的权限，命令如下</p><pre class="language-none"><code class="language-none">MariaDB [(none)]&gt; grant all privileges on *.* to root@localhost identified by '123456' with grant option;Query OK, 0 rows affected (0.001 sec)MariaDB [(none)]&gt; grant all privileges on *.* to root@"%" identified by '123456' with grant option;Query OK, 0 rows affected (0.001 sec)</code></pre><p>将gpmall.sql文件上传至云主机的/root目录下。创建数据库gpmall并导入gpmall.sql文件。</p><pre class="language-none"><code class="language-none">MariaDB [(none)]&gt; create database gpmall;Query OK, 1 row affected (0.00 sec)MariaDB [(none)]&gt; use gpmall;MariaDB [gpmall]&gt; source /root/gpmall/gpmall.sql</code></pre><p>退出数据库并设置开机自启</p><pre class="language-none"><code class="language-none">MariaDB [gpmall]&gt; Ctrl-C -- exit!Aborted[root@mall ~]# systemctl enable mariadbCreated symlink from /etc/systemd/system/mysql.service to /usr/lib/systemd/system/mariadb.service.Created symlink from /etc/systemd/system/mysqld.service to /usr/lib/systemd/system/mariadb.service.Created symlink from /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.</code></pre><p>修改Redis配置文件，编辑/etc/redis.conf文件。<br>将bind 127.0.0.1这一行注释掉；将protected-mode yes 改为 protected-mode no。</p><pre class="language-none"><code class="language-none">[root@mall ~]# vi /etc/redis.conf…#bind 127.0.0.1protected-mode no…[root@mall ~]# systemctl start redis[root@mall ~]# systemctl enable redisCreated symlink from /etc/systemd/system/multi-user.target.wants/redis.service to /usr/lib/systemd/system/redis.service.</code></pre><p>启动Nginx服务命令如下</p><pre class="language-none"><code class="language-none">[root@mall ~]# systemctl start nginx[root@mall ~]# systemctl enable nginxCreated symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</code></pre><p>应用系统部署，使用提供gpmall-shopping-0.0.1-SNAPSHOT.jar、gpmall-user-0.0.1-SNAPSHOT.jar、shopping-provider-0.0.1-SNAPSHOT.jar、user-provider-0.0.1-SNAPSHOT.jar 、dist这5个包部署应用系统，其中4个jar包为后端服务包，dist为前端包。（包在gpmall目录下）<br>修改/etc/hosts文件，修改项目全局配置文件如下（原有的172.128.11.42 mall映射删除）</p><pre class="language-none"><code class="language-none">[root@mall ~]# cat /etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6172.128.11.42 kafka.mall172.128.11.42 mysql.mall172.128.11.42 redis.mall172.128.11.42 zookeeper.mall</code></pre><p>清空默认项目路径下的文件，将dist目录下的文件，复制到Nginx默认项目路径</p><pre class="language-none"><code class="language-none">[root@mall ~]# rm -rf /usr/share/nginx/html/*[root@mall ~]# cp -rvf gpmall/dist/* /usr/share/nginx/html/</code></pre><p>修改Nginx配置文件/etc/nginx/nginx.conf，添加映射如下所示</p><pre class="language-none"><code class="language-none">[root@mall ~]# vi /etc/nginx/nginx.conf…  server {      listen       80;      listen       [::]:80;      server_name _;      root         /usr/share/nginx/html;       # Load configuration files for the default server block.      include /etc/nginx/default.d/*.conf;             location / {      root   /usr/share/nginx/html;      index index.html index.htm;      }      location /user {          proxy_pass http://127.0.0.1:8082;      }      location /shopping {          proxy_pass http://127.0.0.1:8081;      }      location /cashier {          proxy_pass http://127.0.0.1:8083;      }      error_page 404 /404.html;…[root@mall ~]# systemctl restart nginx</code></pre><p>到此，前端部署完毕。</p><p>部署后端</p><p>将node-1节点的/opt/apache-skywalking-apm-bin-es7目录下的agent目录复制到mall节点下：</p><pre class="language-none"><code class="language-none">[root@mall ~]# scp -r 172.128.11.32:/opt/apache-skywalking-apm-bin-es7/agent /root修改SkyWalking agent配置文件[root@mall ~]# vi agent/config/agent.config…agent.service_name=${SW_AGENT_NAME:my-application}agent.sample_n_per_3_secs=${SW_AGENT_SAMPLE:1}…collector.backend_service=${SW_AGENT_COLLECTOR_BACKEND_SERVICES:172.128.11.32:11800}…</code></pre><p>将提供的4个jar包上传到服务器的/root目录下，放置探针并启动，通过设置启动参数的方式检测系统，启动命令如下：</p><pre class="language-none"><code class="language-none">[root@mall ~]# nohup java -javaagent:/root/agent/skywalking-agent.jar -jar gpmall/shopping-provider-0.0.1-SNAPSHOT.jar &amp;[1] 20086[root@mall ~]# nohup: ignoring input and appending output to ‘nohup.out’[root@mall ~]# nohup java -javaagent:/root/agent/skywalking-agent.jar -jar gpmall/user-provider-0.0.1-SNAPSHOT.jar &amp;[2] 20132[root@mall ~]# nohup: ignoring input and appending output to ‘nohup.out’[root@mall ~]# nohup java -javaagent:/root/agent/skywalking-agent.jar -jar gpmall/gpmall-shopping-0.0.1-SNAPSHOT.jar &amp;[3] 20177[root@mall ~]# nohup: ignoring input and appending output to ‘nohup.out’[root@mall ~]# nohup java -javaagent:/root/agent/skywalking-agent.jar -jar gpmall/gpmall-user-0.0.1-SNAPSHOT.jar &amp;[4] 20281[root@mall ~]# nohup: ignoring input and appending output to ‘nohup.out’# httpd访问网络配置[root@mall ~]# setsebool -P httpd_can_network_connect 1</code></pre><p>按照顺序运行4个jar包后，至此后端服务部署完毕<br>打开浏览器，在地址栏中输入<a href="http://localhost,访问界面/">http://localhost，访问界面</a></p><p><img src="https://telegraph-image-7df.pages.dev/file/30a98de2c2134c858ade9.png" alt="商城首页"><br>单击右上角“头像”，进行登录操作，使用用户名/密码为test/test进行登录</p><p>1.检查 skywalking 服务部署正确计 1 分</p><h3 id="【题目-11】Linux-内核优化-1-分"><a href="#【题目-11】Linux-内核优化-1-分" class="headerlink" title="【题目 11】Linux 内核优化[1 分]"></a>【题目 11】Linux 内核优化[1 分]</h3><p>在使用 Linux 服务器的时候，TCP 协议规定，对于已经建立的连接，网络双方要进行四次挥手才能成功断开连接，如果缺少了其中某个步骤，将会使连接处于假死状态，连接本身占用的资源不会被释放。因为服务器程序要同时管理大量连接，所以很有必要保证无用的连接完全断开，否则大量僵死的连接会浪费许多服务器资源。创建一台 CentOS7.9 云主机，修改相应的配置文件，分别开启 SYN Cookies；允许将 TIME-WAIT sockets 重新用于新的 TCP 连接；开启TCP 连接中TIME-WAIT sockets 的快速回收；修改系統默认的 TIMEOUT 时间为 30。完成后提交修改节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@container ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysctl.conf</span><span class="token comment">#添加如下参数</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_tw_reuse <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_tw_recycle <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_fin_timeout <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">[</span>root@container ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_tw_reuse <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_tw_recycle <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_fin_timeout <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">[</span>root@container ~<span class="token punctuation">]</span><span class="token comment">#</span></code></pre><p>1.检查内核优化正确计 1 分</p><h3 id="【题目-12】排错：Glance-服务排错-1-分"><a href="#【题目-12】排错：Glance-服务排错-1-分" class="headerlink" title="【题目 12】排错：Glance 服务排错[1 分]"></a>【题目 12】排错：Glance 服务排错[1 分]</h3><p>使用赛项提供的 chinaskill-error1 镜像启动云主机，flavor 使用 4vcpu/12G 内存/100G 硬<br>盘。启动后存在错误的私有云平台，错误现象为查看不到 image 列表，试根据错误信息排查云平台错误，使云平台可以查询到 image 信息。完成后提交云主机节点的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash">如果不会做，提供取巧思路~~国赛是用错误镜像来创建一个云主机进行排错，可以试着修改正常经常的标签，然后创建正常的glance服务可以得到部分分</code></pre><p>1.检查错误镜像glance 服务启动正确计 1 分</p><h3 id="【题目-13】排错：数据库排错-1-5-分"><a href="#【题目-13】排错：数据库排错-1-5-分" class="headerlink" title="【题目 13】排错：数据库排错[1.5 分]"></a>【题目 13】排错：数据库排错[1.5 分]</h3><p>使用赛项提供的排错镜像 chinaskill-error2 创建一台云主机（云主机的登录用户名为 root， 密码为 000000），该云主机中存在错误的数据库服务，错误现象为数据库服务无法启动。请将数据库服务修复并启动，将数据库的密码修改为 chinaskill123。修复完成后提交该云主机的用户名、密码和 IP 地址到答题框。</p><pre class="language-bash" data-language="bash"><code class="language-bash">使用一个正常的mysql数据库，创建一个符合要求的用户和密码，可以得到0.5分~判分系统是先连接数据库再进去查询</code></pre><p>1.检查错误镜像数据库服务启动正确计 1.5 分</p><h2 id="【任务-3】私有云运维开发-10-分"><a href="#【任务-3】私有云运维开发-10-分" class="headerlink" title="【任务 3】私有云运维开发[10 分]"></a>【任务 3】私有云运维开发[10 分]</h2><h3 id="【题目-1】Ansible-服务部署：部署-MariaDB-集群-2-分"><a href="#【题目-1】Ansible-服务部署：部署-MariaDB-集群-2-分" class="headerlink" title="【题目 1】Ansible 服务部署：部署 MariaDB 集群[2 分]"></a>【题目 1】Ansible 服务部署：部署 MariaDB 集群[2 分]</h3><p>使用OpenStack 私有云平台，创建 4 台系统为centos7.9 的云主机，其中一台作为 Ansible 的母机并命名为 ansible，另外三台云主机命名为 node1、node2、node3；使用这一台母机， 编写 Ansible 脚本（在/root 目录下创建 example 目录作为 Ansible 工作目录，部署的入口文件命名为 cscc_install.yaml ） ， 对其他三台云主机进行安装高可用数据库集群<br>（MariaDB_Galera_cluster，数据库密码设置为 123456）的操作（所需的安装包在 HTTP 服务中）。完成后提交 Ansible 节点的用户名、密码和 IP 地址到答题框。（考试系统会连接到你的Ansible 节点，去执行 Ansible 脚本，请准备好 Ansible 运行环境，以便考试系统访问）</p><p>（1）环境准备</p><table><thead><tr><th>节点</th><th>地址</th></tr></thead><tbody><tr><td>ansible</td><td>192.168.100.10</td></tr><tr><td>node1</td><td>192.168.100.20</td></tr><tr><td>node2</td><td>192.168.100.30</td></tr><tr><td>node3</td><td>192.168.100.40</td></tr></tbody></table><p>（2）环境配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># hostnamectl set-hostname ansible</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># su</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># </span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># hostnamectl set-hostname node1</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># su</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># </span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># hostnamectl set-hostname node2</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># su</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># </span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># hostnamectl set-hostname node3</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># su</span><span class="token punctuation">[</span>root@node3 ~<span class="token punctuation">]</span><span class="token comment"># </span><span class="token comment"># 将ip地址映射成主机名(其他3台节点配置一样,此处省略)</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/hosts</span><span class="token number">192.168</span>.100.10 ansible<span class="token number">192.168</span>.100.20 node1<span class="token number">192.168</span>.100.30 node2<span class="token number">192.168</span>.100.40 node3<span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token comment">#关闭防火墙和selinux(其他3台节点配置一样,此处省略)</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># systemctl stop firewalld &amp;&amp; setenforce 0</span><span class="token comment"># ansible节点部署ansible服务(通过CRT远程工具将提供的ansible软件包上传到ansible节点)</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf ansible.tar.gz</span><span class="token comment">#删除centos自带的源并配置本地yum源安装ansible服务</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># mv /etc/yum.repos.d/* /home/</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/yum.repos.d/local.repo</span><span class="token punctuation">[</span>ansible<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>ansible<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///root/ansible<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># yum install ansible -y</span><span class="token comment">#检查是否安装完成</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ansible --version</span>ansible <span class="token number">2.9</span>.10  config <span class="token function">file</span> <span class="token operator">=</span> /etc/ansible/ansible.cfg  configured module search path <span class="token operator">=</span> <span class="token punctuation">[</span>u<span class="token string">'/root/.ansible/plugins/modules'</span>, u<span class="token string">'/usr/share/ansible/plugins/modules'</span><span class="token punctuation">]</span>  ansible python module location <span class="token operator">=</span> /usr/lib/python2.7/site-packages/ansible  executable location <span class="token operator">=</span> /usr/bin/ansible  python version <span class="token operator">=</span> <span class="token number">2.7</span>.5 <span class="token punctuation">(</span>default, Oct <span class="token number">14</span> <span class="token number">2020</span>, <span class="token number">14</span>:45:30<span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC <span class="token number">4.8</span>.5 <span class="token number">20150623</span> <span class="token punctuation">(</span>Red Hat <span class="token number">4.8</span>.5-44<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>（3）设置免密</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen</span>Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/root/.ssh/id_rsa<span class="token punctuation">)</span>: Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: Enter same passphrase again: Your identification has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:svV0oqhTRNGB/tH37Xi49/OUg+AFu2XlxcKhsyXm+wI root@ansibleThe key<span class="token string">'s randomart image is:+---[RSA 2048]----+|      .+..    .  ||      o .    o o ||     o   . .= +.o||      o . .o+=o..||     ...S.o++= o ||      .=.+Eo*.o o||     .o . .+.. *.||    ..      ..oo=||    ..       .o+*|+----[SHA256]-----+[root@ansible ~]# ssh-copy-id root@node1/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"The authenticity of host '</span>node1 <span class="token punctuation">(</span><span class="token number">192.168</span>.100.20<span class="token punctuation">)</span><span class="token string">' can'</span>t be established.ECDSA key fingerprint is SHA256:sGY4R7darwNovS7pGeQNm9FzQjanFFmnwJHO5PRo0RE.ECDSA key fingerprint is MD5:fa:5d:85:af:69:0d:63:78:ac:4e:9a:5b:c1:a6:b2:60.Are you sure you want to <span class="token builtin class-name">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? <span class="token function">yes</span>/usr/bin/ssh-copy-id: INFO: attempting to log <span class="token keyword">in</span> with the new key<span class="token punctuation">(</span>s<span class="token punctuation">)</span>, to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: <span class="token number">1</span> key<span class="token punctuation">(</span>s<span class="token punctuation">)</span> remain to be installed -- <span class="token keyword">if</span> you are prompted now it is to <span class="token function">install</span> the new keysroot@node1<span class="token string">'s password: Number of key(s) added: 1Now try logging into the machine, with:   "ssh '</span>root@node1<span class="token string">'"and check to make sure that only the key(s) you wanted were added.[root@ansible ~]# ssh-copy-id root@node2/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"The authenticity of host '</span>node2 <span class="token punctuation">(</span><span class="token number">192.168</span>.100.30<span class="token punctuation">)</span><span class="token string">' can'</span>t be established.ECDSA key fingerprint is SHA256:sGY4R7darwNovS7pGeQNm9FzQjanFFmnwJHO5PRo0RE.ECDSA key fingerprint is MD5:fa:5d:85:af:69:0d:63:78:ac:4e:9a:5b:c1:a6:b2:60.Are you sure you want to <span class="token builtin class-name">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? <span class="token function">yes</span>/usr/bin/ssh-copy-id: INFO: attempting to log <span class="token keyword">in</span> with the new key<span class="token punctuation">(</span>s<span class="token punctuation">)</span>, to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: <span class="token number">1</span> key<span class="token punctuation">(</span>s<span class="token punctuation">)</span> remain to be installed -- <span class="token keyword">if</span> you are prompted now it is to <span class="token function">install</span> the new keysroot@node2<span class="token string">'s password: Number of key(s) added: 1Now try logging into the machine, with:   "ssh '</span>root@node2<span class="token string">'"and check to make sure that only the key(s) you wanted were added.[root@ansible ~]# ssh-copy-id root@node3/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"The authenticity of host '</span>node3 <span class="token punctuation">(</span><span class="token number">192.168</span>.100.40<span class="token punctuation">)</span><span class="token string">' can'</span>t be established.ECDSA key fingerprint is SHA256:sGY4R7darwNovS7pGeQNm9FzQjanFFmnwJHO5PRo0RE.ECDSA key fingerprint is MD5:fa:5d:85:af:69:0d:63:78:ac:4e:9a:5b:c1:a6:b2:60.Are you sure you want to <span class="token builtin class-name">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? <span class="token function">yes</span>/usr/bin/ssh-copy-id: INFO: attempting to log <span class="token keyword">in</span> with the new key<span class="token punctuation">(</span>s<span class="token punctuation">)</span>, to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: <span class="token number">1</span> key<span class="token punctuation">(</span>s<span class="token punctuation">)</span> remain to be installed -- <span class="token keyword">if</span> you are prompted now it is to <span class="token function">install</span> the new keysroot@node3<span class="token string">'s password: Number of key(s) added: 1Now try logging into the machine, with:   "ssh '</span>root@node3'"and check to <span class="token function">make</span> sure that only the key<span class="token punctuation">(</span>s<span class="token punctuation">)</span> you wanted were added.</code></pre><p>（4）修改ansible文件配置组</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/ansible/hosts </span><span class="token punctuation">[</span>node<span class="token punctuation">]</span>node1node2node3<span class="token punctuation">[</span>node1<span class="token punctuation">]</span>node1<span class="token punctuation">[</span>node2<span class="token punctuation">]</span>node2<span class="token punctuation">[</span>node3<span class="token punctuation">]</span>node3<span class="token comment">#解压mariadb.tar软件包将mariadb-repo源拷贝到node1,node2,node3节点的/root目录下</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf mariadb.tar </span>mariadb/mariadb/mariadb-repo.tar.gzmariadb/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gzmariadb/schema.xml<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># tar -xvf mariadb/mariadb-repo.tar.gz </span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># scp -r mariadb-repo/ root@node1:/root</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># scp -r mariadb-repo/ root@node2:/root</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># scp -r mariadb-repo/ root@node3:/root</span></code></pre><p>（5）创建ansible执行的工作目录编写执行playbook剧本的相关文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># mkdir cscc_galera</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># cd cscc_galera/</span><span class="token comment">#创建local.repo文件</span><span class="token punctuation">[</span>root@ansible cscc_galera<span class="token punctuation">]</span><span class="token comment"># vi local.repo</span><span class="token punctuation">[</span>centos<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>centos<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///opt/centos   <span class="token comment">#自行挂载centos7.9镜像到/opt目录</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">[</span>mariadb<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>mariadb<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///root/mariadb-repo<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#创建server.cnf文件</span><span class="token punctuation">[</span>root@ansible cscc_galera<span class="token punctuation">]</span><span class="token comment"># vi server.cnf</span><span class="token punctuation">[</span>server<span class="token punctuation">]</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token punctuation">[</span>galera<span class="token punctuation">]</span><span class="token assign-left variable">wsrep_on</span><span class="token operator">=</span>ON<span class="token assign-left variable">wsrep_provider</span><span class="token operator">=</span>/usr/lib64/galera/libgalera_smm.so<span class="token assign-left variable">wsrep_cluster_address</span><span class="token operator">=</span>gcomm://node1,node2,node3<span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>row<span class="token assign-left variable">default_storage_engine</span><span class="token operator">=</span>InnoDB<span class="token assign-left variable">innodb_autoinc_lock_mode</span><span class="token operator">=</span><span class="token number">2</span>bind-address<span class="token operator">=</span><span class="token number">0.0</span>.0.0<span class="token assign-left variable">wsrep_slave_threads</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">innodb_flush_log_at_trx_commit</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">[</span>embedded<span class="token punctuation">]</span><span class="token punctuation">[</span>mariadb<span class="token punctuation">]</span><span class="token punctuation">[</span>mariadb-10.3<span class="token punctuation">]</span><span class="token comment">#创建playbook剧本文件</span><span class="token punctuation">[</span>root@ansible cscc_galera<span class="token punctuation">]</span><span class="token comment"># vi install_galera.yaml</span>---- hosts: all  remote_user: root  tasks:  - name: <span class="token function">rm</span> repo    shell: <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/yum.repos.d/*   - name: copy repo    copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>local.repo <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/yum.repos.d/  - name: <span class="token function">install</span> mariadb    yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>mariadb-server  - name: start mariadb    service: <span class="token assign-left variable">name</span><span class="token operator">=</span>mariadb <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yes  - name: init_mysql    shell: mysqladmin <span class="token parameter variable">-uroot</span> password <span class="token number">123456</span>  - name: stop mariadb    service: <span class="token assign-left variable">name</span><span class="token operator">=</span>mariadb <span class="token assign-left variable">state</span><span class="token operator">=</span>stopped  - name: copy server.cnf    copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>server.cnf <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/my.cnf.d/server.cnf- hosts: node1  remote_user: root  tasks:  - name: start mariadb    shell: /usr/sbin/mysqld --wsrep-new-cluster <span class="token parameter variable">-u</span> root <span class="token operator">&amp;</span>- hosts: node2,node3  remote_user: root  tasks:  - name: start mariadb    shell: systemctl start mariadb</code></pre><p>（6）执行入口文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible cscc_galera<span class="token punctuation">]</span><span class="token comment"># ansible-playbook install_galera.yaml </span><span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span>: Found both group and <span class="token function">host</span> with same name: node1<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span>: Found both group and <span class="token function">host</span> with same name: node3<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span>: Found both group and <span class="token function">host</span> with same name: node2PLAY <span class="token punctuation">[</span>all<span class="token punctuation">]</span> *******************************************************************************************************TASK <span class="token punctuation">[</span>Gathering Facts<span class="token punctuation">]</span> *******************************************************************************************ok: <span class="token punctuation">[</span>node3<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>node2<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>node1<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>rm repo<span class="token punctuation">]</span> ***************************************************************************************************<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span>: Consider using the <span class="token function">file</span> module with <span class="token assign-left variable">state</span><span class="token operator">=</span>absent rather than running <span class="token string">'rm'</span><span class="token builtin class-name">.</span>  If you need to use <span class="token builtin class-name">command</span>because <span class="token function">file</span> is insufficient you can <span class="token function">add</span> <span class="token string">'warn: false'</span> to this <span class="token builtin class-name">command</span> task or <span class="token builtin class-name">set</span> <span class="token string">'command_warnings=False'</span> <span class="token keyword">in</span>ansible.cfg to get rid of this message.changed: <span class="token punctuation">[</span>node2<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node3<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node1<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>copy repo<span class="token punctuation">]</span> *************************************************************************************************changed: <span class="token punctuation">[</span>node3<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node2<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node1<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>install mariadb<span class="token punctuation">]</span> *******************************************************************************************changed: <span class="token punctuation">[</span>node2<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node3<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node1<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>start mariadb<span class="token punctuation">]</span> *********************************************************************************************changed: <span class="token punctuation">[</span>node1<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node2<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node3<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>init_mysql<span class="token punctuation">]</span> ************************************************************************************************changed: <span class="token punctuation">[</span>node2<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node1<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node3<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>stop mariadb<span class="token punctuation">]</span> **********************************************************************************************changed: <span class="token punctuation">[</span>node1<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node2<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node3<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>copy server.cnf<span class="token punctuation">]</span> **********************************************************************************************changed: <span class="token punctuation">[</span>node1<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node2<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node3<span class="token punctuation">]</span>PLAY <span class="token punctuation">[</span>node1<span class="token punctuation">]</span> *****************************************************************************************************TASK <span class="token punctuation">[</span>Gathering Facts<span class="token punctuation">]</span> *******************************************************************************************ok: <span class="token punctuation">[</span>node1<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>start mariadb<span class="token punctuation">]</span> *********************************************************************************************changed: <span class="token punctuation">[</span>node1<span class="token punctuation">]</span>PLAY <span class="token punctuation">[</span>node2,node3<span class="token punctuation">]</span> ***********************************************************************************************TASK <span class="token punctuation">[</span>Gathering Facts<span class="token punctuation">]</span> *******************************************************************************************ok: <span class="token punctuation">[</span>node2<span class="token punctuation">]</span>ok: <span class="token punctuation">[</span>node3<span class="token punctuation">]</span>TASK <span class="token punctuation">[</span>start mariadb<span class="token punctuation">]</span> *********************************************************************************************changed: <span class="token punctuation">[</span>node2<span class="token punctuation">]</span>changed: <span class="token punctuation">[</span>node3<span class="token punctuation">]</span>PLAY RECAP *******************************************************************************************************node1                      <span class="token builtin class-name">:</span> <span class="token assign-left variable">ok</span><span class="token operator">=</span><span class="token number">9</span>    <span class="token assign-left variable">changed</span><span class="token operator">=</span><span class="token number">7</span>    <span class="token assign-left variable">unreachable</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">failed</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">skipped</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">rescued</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">ignored</span><span class="token operator">=</span><span class="token number">0</span>   node2                      <span class="token builtin class-name">:</span> <span class="token assign-left variable">ok</span><span class="token operator">=</span><span class="token number">9</span>    <span class="token assign-left variable">changed</span><span class="token operator">=</span><span class="token number">7</span>    <span class="token assign-left variable">unreachable</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">failed</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">skipped</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">rescued</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">ignored</span><span class="token operator">=</span><span class="token number">0</span>   node3                      <span class="token builtin class-name">:</span> <span class="token assign-left variable">ok</span><span class="token operator">=</span><span class="token number">9</span>    <span class="token assign-left variable">changed</span><span class="token operator">=</span><span class="token number">7</span>    <span class="token assign-left variable">unreachable</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">failed</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">skipped</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">rescued</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token assign-left variable">ignored</span><span class="token operator">=</span><span class="token number">0</span>   <span class="token punctuation">[</span>root@ansible cscc_galera<span class="token punctuation">]</span><span class="token comment"># </span></code></pre><p>（7）验证,检查wsrep_cluster_size的值是否为3/wsrep_ready的状态是否为ON</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible cscc_galera<span class="token punctuation">]</span><span class="token comment"># ssh node1</span>Last login: Fri Aug <span class="token number">26</span> 05:01:52 <span class="token number">2022</span> from <span class="token number">192.168</span>.100.1<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># mysql -uroot -p123456</span>Welcome to the MariaDB monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MariaDB connection <span class="token function">id</span> is <span class="token number">10</span>Server version: <span class="token number">10.3</span>.23-MariaDB MariaDB ServerCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2018</span>, Oracle, MariaDB Corporation Ab and others.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> show status like <span class="token string">'wsrep_cluster_size'</span><span class="token punctuation">;</span>+--------------------+-------+<span class="token operator">|</span> Variable_name      <span class="token operator">|</span> Value <span class="token operator">|</span>+--------------------+-------+<span class="token operator">|</span> wsrep_cluster_size <span class="token operator">|</span> <span class="token number">3</span>     <span class="token operator">|</span>+--------------------+-------+<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.001</span> sec<span class="token punctuation">)</span>MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> show status like <span class="token string">'wsrep_ready'</span><span class="token punctuation">;</span>+---------------+-------+<span class="token operator">|</span> Variable_name <span class="token operator">|</span> Value <span class="token operator">|</span>+---------------+-------+<span class="token operator">|</span> wsrep_ready   <span class="token operator">|</span> ON    <span class="token operator">|</span>+---------------+-------+<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.001</span> sec<span class="token punctuation">)</span>MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> </code></pre><p>1.执行yaml 文件正确计 0.5 分<br>2.检查数据库集群部署正确计 1 分<br>3.检查数据库集群数量为 3 正确计 0.5 分</p><h3 id="【题目-2】Ansible-服务部署：部署ELK-集群服务-2-分"><a href="#【题目-2】Ansible-服务部署：部署ELK-集群服务-2-分" class="headerlink" title="【题目 2】Ansible 服务部署：部署ELK 集群服务[2 分]"></a>【题目 2】Ansible 服务部署：部署ELK 集群服务[2 分]</h3><p>使用赛项提供的OpenStack 私有云平台，创建三台 CentOS7.9 系统的云主机分别命名为elk-1、elk-2 和elk-3，Ansible 主机可以使用上一题的环境。要求Ansible 节点编写剧本，执行 Ansible 剧本可以在这三个节点部署 ELK 集群服务（在/root 目录下创建 install_elk 目录作为 ansible 工作目录，部署的入口文件命名为 install_elk.yaml）。具体要求为三个节点均安装Elasticserach 服务并配置为 Elasticserach 集群；kibana 安装在第一个节点；Logstash 安装在第二个节点。（需要用到的软件包在 HTTP 服务下）完成后提交 ansible 节点的用户名、密码和 IP 地址到答题框。（考试系统会连接到 ansible 节点，执行 ansible 脚本，准备好环境， 以便考试系统访问）</p><pre class="language-bash" data-language="bash"><code class="language-bash">参考学习地址https://www.likecs.com/show-307196346.html</code></pre><p>1.执行yaml 文件正确计 0.5 分<br>2.检查 ELK 服务部署正确计 1.5 分</p><h3 id="【题目-3】Python-运维开发：基于OpenStack-Restful-API-实现镜像上传-1-分"><a href="#【题目-3】Python-运维开发：基于OpenStack-Restful-API-实现镜像上传-1-分" class="headerlink" title="【题目 3】Python 运维开发：基于OpenStack Restful API 实现镜像上传[1 分]"></a>【题目 3】Python 运维开发：基于OpenStack Restful API 实现镜像上传[1 分]</h3><p>使用OpenStack all-in-one 镜像，创建 OpenStack Python 运维开发环境。云主机的用户/ 密码为：“root/Abc@1234”，OpenStack 的域名/账号/密码为：“demo/admin/000000”。<br>提示说明：python 脚本文件头建议加入“#encoding:utf-8”避免编码错误；测试脚本代码用 python3 命令执行与测试。<br>在 controller 节点的/root 目录下创建 api_image_manager.py 脚本，编写 python 代码对接OpenStack API，完成镜像的创建与上传。创建之前查询是否存在“同名镜像”，如果存在先删除该镜像。<br>（1）创建镜像：要求在 OpenStack 私有云平台中上传镜像cirros-0.3.4-x86_64-disk.img，名字为 cirros001，disk_format 为 qcow2，container_format 为bare。<br>（2）查询镜像：查询 cirros001 的详细信息，并以 json 格式文本输出到控制台。<br>完成后提交 OpenStack Python 运维开发环境Controller 节点的 IP 地址，用户名和密码提交。</p><p>（1）基础环境准备，安装python3，已经需要的依赖</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ controller ~<span class="token punctuation">]</span><span class="token comment"># python3 --version</span>Python <span class="token number">3.6</span>.8<span class="token comment">#使用提供的whl文件安装依赖</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cd Python-api</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#  pip3 install certifi-2019.11.28-py2.py3-none-any.whl</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># pip3 install urllib3-1.25.11-py3-none-any.whl</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#  pip3 install idna-2.8-py2.py3-none-any.whl</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#  pip3 install chardet-3.0.4-py2.py3-none-any.whl</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment">#  pip3 install requests-2.24.0-py2.py3-none-any.whl</span></code></pre><p>（2）代码实现</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi api_image_manager.py</span><span class="token comment">#encoding:utf-8  </span><span class="token function">import</span> requests, json, <span class="token function">time</span>  <span class="token function">import</span> logging  <span class="token comment"># -----------logger-----------  </span><span class="token comment"># get logger  </span>logger <span class="token operator">=</span> logging.getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>  <span class="token comment"># level  </span>logger.setLevel<span class="token punctuation">(</span>logging.DEBUG<span class="token punctuation">)</span>  <span class="token comment"># format  </span><span class="token function">format</span> <span class="token operator">=</span> logging.Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s %(message)s'</span><span class="token punctuation">)</span>  <span class="token comment"># to console  </span>stream_handler <span class="token operator">=</span> logging.StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>  stream_handler.setFormatter<span class="token punctuation">(</span>format<span class="token punctuation">)</span>  logger.addHandler<span class="token punctuation">(</span>stream_handler<span class="token punctuation">)</span>  <span class="token comment"># -----------logger-----------  </span>def get_auth_token<span class="token punctuation">(</span>controller_ip, domain, user, password<span class="token punctuation">)</span>:     <span class="token string">''</span>'    :param controller_ip: openstack master <span class="token function">ip</span> address    :param domain: current user<span class="token string">'s domain    :param user: user name    :param password: user password    :return: keystoen auth Token for current user.     '</span>'<span class="token string">'    try:        url = f"http://{controller_ip}:5000/v3/auth/tokens"        body = {             "auth": {                 "identity": {                     "methods": [                         "password"                    ],                     "password": {                         "user": {                             "domain": {                                 "name": domain                            },                             "name": user,                             "password": password                        }                    }                },                 "scope": {                     "project": {                         "domain": {                             "name": domain                        },                         "name": user                    }                }            }        }        headers = {             "Content-Type": "application/json",        }        print(body)        Token = requests.post(url, data=json.dumps(body), headers=headers).headers['</span>X-Subject-Token<span class="token string">']        headers = {             "X-Auth-Token": Token        }        logger.debug(f"获取Token值：{str(Token)}")        return headers    except Exception as e:        logger.error(f"获取Token值失败，请检查访问云主机控制节点IP是否正确？输出错误信息如下：{str(e)}")         exit(0)  # 镜像管理  class image_manager:    def __init__(self, handers: dict, resUrl: str):        self.headers = handers        self.resUrl = resUrl     #POST v2/images    def create_image(self, image_name: str, container_format="bare", disk_format="qcow2"):         """        :param image_name:        :param container_format:        :param disk_format:        :return:         """        body = {             "container_format": container_format,             "disk_format": disk_format,             "name": image_name        }        response = requests.post(self.resUrl, data=json.dumps(body), headers=self.headers)        logger.debug(response.status_code)         if response.status_code == 201:            return {"ImageItemCreatedSuccess": response.status_code}        return response.text     # 获取glance镜像id    def get_image_id(self, image_name: str):        result = json.loads(requests.get(self.resUrl, headers=self.headers).text)        logger.debug(result)         for item in result['</span>images<span class="token string">']:             if (item['</span>name<span class="token string">'] == image_name):                return item['</span><span class="token function">id</span><span class="token string">']     # 上传glance镜像     # Image data¶ Uploads and downloads raw image data.     # These operations may be restricted to administrators. Consult your cloud operator’s documentation for details.     # /v2/images/{image_id}/file     # 镜像可以重名    def upload_iamge_data(self, image_id: str, file_path=""):         """        :param image_id:        :param file_path:        :return:         """        self.resUrl = self.resUrl + "/" + image_id + "/file"        self.headers['</span>Content-Type<span class="token string">'] = "application/octet-stream"        response = requests.put(self.resUrl, data=open(file_path, '</span>rb<span class="token string">').read(), headers=self.headers)        logger.debug(response.status_code)         if response.status_code == 204:            return {"ImageItemCreatedSuccess": response.status_code}        return response.text     # ----------------------------     # /v2/images     # List images    def get_images(self):         """        :return:         """        status_code = requests.get(self.resUrl, headers=self.headers).text        logger.debug(f"返回状态:{str(status_code)}")        return status_code     # /v2/images/{image_id} Show image    def get_image(self, id: str):         """         get a flavor by id.        :return:         """        api_url = self.resUrl + "/" + id        response = requests.get(api_url, headers=self.headers)        result = json.loads(response.text)        logger.debug(f"返回信息:{str(result)}")        return result     # /v2/images/{image_id} Delete image    def delete_image(self, id: str):         """          delete a image by id.          :return:          """        api_url = self.resUrl + "/" + id        response = requests.delete(api_url, headers=self.headers)         # 204 - No ContentThe server has fulfilled the request.         if response.status_code == 204:            return {"Image itemDeletedSuccess": response.status_code}        result = json.loads(response.text)        logger.debug(f"返回信息:{str(result)}")        return result         # http://192.168.200.226:8774/v2.1/ get apis version infomation.  if __name__ == '</span>__main__':     <span class="token comment"># 1. openstack allinone （controller ) credentials  </span>   <span class="token comment"># host ip address  </span>  controller_ip <span class="token operator">=</span> <span class="token string">"192.168.200.100"</span>     <span class="token comment"># domain name  </span>  domain <span class="token operator">=</span> <span class="token string">"demo"</span>     <span class="token comment"># user name  </span>  user <span class="token operator">=</span> <span class="token string">"admin"</span>     <span class="token comment"># user password  </span>  password <span class="token operator">=</span> <span class="token string">"000000"</span>    headers <span class="token operator">=</span> get_auth_token<span class="token punctuation">(</span>controller_ip, domain, user, password<span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"headers:"</span>, headers<span class="token punctuation">)</span>    <span class="token comment"># http://controller:9292  </span>  image_m <span class="token operator">=</span> image_manager<span class="token punctuation">(</span>headers, f<span class="token string">"http://{controller_ip}:9292/v2/images"</span><span class="token punctuation">)</span>     <span class="token comment"># 1 查所有  </span>  images <span class="token operator">=</span> image_m.get_images<span class="token punctuation">(</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"查询所有images:"</span>, images<span class="token punctuation">)</span>     <span class="token comment">#2 创建镜像（注意，镜像允许同名）  </span>  result <span class="token operator">=</span> image_m.create_image<span class="token punctuation">(</span>image_name<span class="token operator">=</span><span class="token string">"cirros001"</span><span class="token punctuation">)</span>  <span class="token comment"># 调用glance-api中创建镜像方法  </span>  print<span class="token punctuation">(</span>f<span class="token string">"创建cirros001 镜像:"</span>, result<span class="token punctuation">)</span>     <span class="token comment">#   #1.1查询id  </span>  <span class="token function">id</span> <span class="token operator">=</span> image_m.get_image_id<span class="token punctuation">(</span>image_name<span class="token operator">=</span><span class="token string">"cirros001"</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"cirros002镜像的，id为: "</span>, <span class="token function">id</span><span class="token punctuation">)</span>     <span class="token comment"># 1.2 上传镜像文件  </span>  result <span class="token operator">=</span> image_m.upload_iamge_data<span class="token punctuation">(</span>id, <span class="token assign-left variable">file_path</span><span class="token operator">=</span><span class="token string">"cirros-0.3.4-x86_64-disk.img"</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span>f<span class="token string">"上传{id}镜像:"</span>, result<span class="token punctuation">)</span>  </code></pre><blockquote><p>需要修改的所有变量信息全部都在  if <strong>name</strong> == ‘<strong>main</strong>‘:    下面</p></blockquote><p>1.执行api_image_manager.py 脚本,成功创建镜像，计 0.5 分<br>2.检查镜像状态正确，计 0.5 分</p><h3 id="【题目-4】Python-运维开发：基于-Openstack-Python-SDK-实现云主机创建-1-分"><a href="#【题目-4】Python-运维开发：基于-Openstack-Python-SDK-实现云主机创建-1-分" class="headerlink" title="【题目 4】Python 运维开发：基于 Openstack Python SDK 实现云主机创建[1 分]"></a>【题目 4】Python 运维开发：基于 Openstack Python SDK 实现云主机创建[1 分]</h3><p>使 用 已 建 好 的 OpenStack Python 运 维 开 发 环 境 ，在 /root 目 录 下 创 建sdk_server_manager.py 脚本，使用 python-openstacksdk Python 模块，完成云主机的创建和查询。创建之前查询是否存在“同名云主机”，如果存在先删除该镜像。<br>（1）创建 1 台云主机：云主机信息如下： 云主机名称如下：server001<br>镜像文件：cirros-0.3.4-x86_64-disk.img 云主机类型：m1.tiny<br>网络等必要信息自己补充。<br>（2）查询云主机：查询云主机 server001 的详细信息，并以 json 格式文本输出到控制台。<br>完成后提交 OpenStack Python 运维开发环境 Controller 节点的 IP 地址，用户名和密码提交。</p><p>（1）代码实现<br>创建云主机所需的镜像、类型、网络是用name来识别的，需要提前创建好</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@container ~<span class="token punctuation">]</span><span class="token comment"># vi sdk_server_manager.py</span><span class="token function">import</span> json,logging  <span class="token function">import</span> openstack  <span class="token comment">#openstack logger  </span><span class="token comment"># openstack.enable_logging(debug=True)  </span><span class="token comment">#文档地址  </span><span class="token comment"># https://docs.openstack.org/openstacksdk/latest/user/index.html  </span>def create_connection<span class="token punctuation">(</span>auth_url, user_domain_name, username, password<span class="token punctuation">)</span>:     <span class="token string">""</span>"    建立连接    :param auth_url:    :param user_domain_name:    :param username:    :param password:    :return:    <span class="token string">""</span>"     <span class="token builtin class-name">return</span> openstack.connect<span class="token punctuation">(</span>         <span class="token assign-left variable">auth_url</span><span class="token operator">=</span>auth_url,         <span class="token assign-left variable">user_domain_name</span><span class="token operator">=</span>user_domain_name,         <span class="token assign-left variable">username</span><span class="token operator">=</span>username,         <span class="token assign-left variable">password</span><span class="token operator">=</span>password,    <span class="token punctuation">)</span>  <span class="token comment">#user Manager  </span><span class="token comment"># 参见文档  </span><span class="token comment"># https://docs.openstack.org/openstacksdk/latest/user/guides/identity.html  </span><span class="token comment">#openstack.connection.Connection  </span><span class="token comment">#云主机管理  </span>class server_manager:     def __init__<span class="token punctuation">(</span>self, connect<span class="token punctuation">)</span>:         self.connect <span class="token operator">=</span> connect     def list_servers<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:         <span class="token string">""</span>"        查询所有云主机.        :return:        <span class="token string">""</span>"         <span class="token comment">#to json  </span>       items <span class="token operator">=</span> self.connect.compute.servers<span class="token punctuation">(</span><span class="token punctuation">)</span>         server_jsons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token keyword">for</span> <span class="token for-or-select variable">server</span> <span class="token keyword">in</span> items:             server_jsons<span class="token punctuation">[</span>server<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> server         <span class="token comment"># return ""  </span>       <span class="token builtin class-name">return</span> items<span class="token comment"># json.dumps(server_jsons,indent=2,skipkeys=True)  </span>   def create_server<span class="token punctuation">(</span>self, server_name, image_name, flavor_name,networ_name<span class="token punctuation">)</span>:         <span class="token string">""</span>"        create a server.        :param server_name:        :param image_name:        :param flavor_name:        :param networ_name:        :return:        <span class="token string">""</span>"         image <span class="token operator">=</span> self.connect.compute.find_image<span class="token punctuation">(</span>image_name<span class="token punctuation">)</span>         flavor <span class="token operator">=</span> self.connect.compute.find_flavor<span class="token punctuation">(</span>flavor_name<span class="token punctuation">)</span>         network <span class="token operator">=</span> self.connect.network.find_network<span class="token punctuation">(</span>networ_name<span class="token punctuation">)</span>         server <span class="token operator">=</span> self.connect.compute.create_server<span class="token punctuation">(</span>             <span class="token assign-left variable">name</span><span class="token operator">=</span>server_name, <span class="token assign-left variable">image_id</span><span class="token operator">=</span>image.id, <span class="token assign-left variable">flavor_id</span><span class="token operator">=</span>flavor.id,             <span class="token assign-left variable">networks</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"uuid"</span><span class="token builtin class-name">:</span> network.id<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         result <span class="token operator">=</span> self.connect.compute.wait_for_server<span class="token punctuation">(</span>server<span class="token punctuation">)</span>         <span class="token builtin class-name">return</span> result <span class="token comment">#json.dumps(result,indent=2,skipkeys=True)  </span>   def delete_server<span class="token punctuation">(</span>self, server_name<span class="token punctuation">)</span>:         <span class="token string">""</span>"        删除云主机        :param server_name:        :return:        <span class="token string">""</span>"         server <span class="token operator">=</span> self.connect.compute.find_server<span class="token punctuation">(</span>server_name<span class="token punctuation">)</span>         result <span class="token operator">=</span> self.connect.compute.delete_server<span class="token punctuation">(</span>server<span class="token punctuation">)</span>         <span class="token builtin class-name">return</span> result <span class="token comment">#json.dumps(result, indent=2, skipkeys=True)  </span>   def get_server<span class="token punctuation">(</span>self, server_name<span class="token punctuation">)</span>:         <span class="token string">""</span>"        获取云主机        :param server_name:        :return:        <span class="token string">""</span>"         server <span class="token operator">=</span> self.connect.compute.find_server<span class="token punctuation">(</span>server_name<span class="token punctuation">)</span>         <span class="token builtin class-name">return</span> json.dumps<span class="token punctuation">(</span>server, <span class="token assign-left variable">indent</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">skipkeys</span><span class="token operator">=</span>True<span class="token punctuation">)</span>  class image_manager:     def __init__<span class="token punctuation">(</span>self, connect<span class="token punctuation">)</span>:         self.connect <span class="token operator">=</span> connect     def list_images<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:         <span class="token string">""</span>"        查询所有镜像        :return:        <span class="token string">""</span>"         <span class="token comment">#to json  </span>       items <span class="token operator">=</span> self.connect.compute.images<span class="token punctuation">(</span><span class="token punctuation">)</span>         images_jsons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token keyword">for</span> <span class="token for-or-select variable">image</span> <span class="token keyword">in</span> items:             images_jsons<span class="token punctuation">[</span>image<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> image         <span class="token builtin class-name">return</span> json.dumps<span class="token punctuation">(</span>images_jsons,indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>     def get_image<span class="token punctuation">(</span>self, image_name:str<span class="token punctuation">)</span>:         <span class="token string">""</span>"        查询镜像        :return:        <span class="token string">""</span>"         <span class="token comment">#to json  </span>       image <span class="token operator">=</span> self.connect.compute.find_image<span class="token punctuation">(</span>image_name<span class="token punctuation">)</span>         <span class="token builtin class-name">return</span> json.dumps<span class="token punctuation">(</span>image,indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  class flavor_manager:     def __init__<span class="token punctuation">(</span>self, connect<span class="token punctuation">)</span>:         self.connect <span class="token operator">=</span> connect     def list_flavors<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:         <span class="token string">""</span>"        查询所有云主机类型        :return:        <span class="token string">""</span>"         <span class="token comment">#to json  </span>       items <span class="token operator">=</span> self.connect.compute.flavors<span class="token punctuation">(</span><span class="token punctuation">)</span>         flavors_jsons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token keyword">for</span> <span class="token for-or-select variable">flavor</span> <span class="token keyword">in</span> items:             flavors_jsons<span class="token punctuation">[</span>flavor<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> flavor         <span class="token builtin class-name">return</span> json.dumps<span class="token punctuation">(</span>flavors_jsons,indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>     def get_flavor<span class="token punctuation">(</span>self, flavor_name:str<span class="token punctuation">)</span>:         <span class="token string">""</span>"        根据名称获取云主机类.        :return:        <span class="token string">""</span>"         <span class="token comment">#to json  </span>       flavor <span class="token operator">=</span> self.connect.compute.find_flavor<span class="token punctuation">(</span>flavor_name<span class="token punctuation">)</span>         <span class="token builtin class-name">return</span> json.dumps<span class="token punctuation">(</span>flavor,indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  class network_manager:     def __init__<span class="token punctuation">(</span>self, connect<span class="token punctuation">)</span>:         self.connect <span class="token operator">=</span> connect     def list_networks<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:         <span class="token string">""</span>"        查询所有网络.        :return:        <span class="token string">""</span>"         <span class="token comment">#to json  </span>       items <span class="token operator">=</span> self.connect.network.networks<span class="token punctuation">(</span><span class="token punctuation">)</span>         items_jsons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token keyword">for</span> <span class="token for-or-select variable">network</span> <span class="token keyword">in</span> items:             items_jsons<span class="token punctuation">[</span>network<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> network         <span class="token builtin class-name">return</span> json.dumps<span class="token punctuation">(</span>items_jsons,indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>     def get_network<span class="token punctuation">(</span>self, network_name:str<span class="token punctuation">)</span>:         <span class="token string">""</span>"        跟名称查询网络.        :return:        <span class="token string">""</span>"         <span class="token comment">#to json  </span>       flavor <span class="token operator">=</span> self.connect.compute.find_network<span class="token punctuation">(</span>network_name<span class="token punctuation">)</span>         <span class="token builtin class-name">return</span> json.dumps<span class="token punctuation">(</span>flavor,indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token builtin class-name">:</span>     <span class="token comment"># Initialize connection(通过配置文件）  </span>   auth_url <span class="token operator">=</span> <span class="token string">"http://192.168.200.100:5000/v3/"</span>     username <span class="token operator">=</span> <span class="token string">"admin"</span>     password <span class="token operator">=</span> <span class="token string">"000000"</span>     user_domain_name <span class="token operator">=</span> <span class="token string">'demo'</span>     conn <span class="token operator">=</span> create_connection<span class="token punctuation">(</span>auth_url, user_domain_name, username, password<span class="token punctuation">)</span>     <span class="token comment"># 1 查询flavors  </span>   print<span class="token punctuation">(</span><span class="token string">"list flavors--------"</span><span class="token punctuation">)</span>     sdk_m <span class="token operator">=</span> flavor_manager<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>     flavors <span class="token operator">=</span> sdk_m.list_flavors<span class="token punctuation">(</span><span class="token punctuation">)</span>     print<span class="token punctuation">(</span><span class="token string">"flavors:"</span>, flavors<span class="token punctuation">)</span>     <span class="token comment"># 2 镜像管理  </span>   sdk_m <span class="token operator">=</span> image_manager<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>     items <span class="token operator">=</span> sdk_m.list_images<span class="token punctuation">(</span><span class="token punctuation">)</span>     print<span class="token punctuation">(</span><span class="token string">"image:"</span>, items<span class="token punctuation">)</span>     <span class="token comment"># 3 网络管理  </span>   print<span class="token punctuation">(</span><span class="token string">"list networks--------"</span><span class="token punctuation">)</span>     sdk_m <span class="token operator">=</span> network_manager<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>     networks <span class="token operator">=</span> sdk_m.list_networks<span class="token punctuation">(</span><span class="token punctuation">)</span>     print<span class="token punctuation">(</span><span class="token string">"networks:"</span>, networks<span class="token punctuation">)</span>     <span class="token comment">#4 查询 云主机  </span>   sdk_m <span class="token operator">=</span> server_manager<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>     servers <span class="token operator">=</span> sdk_m.list_servers<span class="token punctuation">(</span><span class="token punctuation">)</span>     print<span class="token punctuation">(</span><span class="token string">"servers:"</span>, servers<span class="token punctuation">)</span>     <span class="token comment">#5 创建云主机  </span>   print<span class="token punctuation">(</span><span class="token string">"creat server--------"</span><span class="token punctuation">)</span>     servers <span class="token operator">=</span> sdk_m.create_server<span class="token punctuation">(</span><span class="token string">"server001"</span>,<span class="token string">"cirros"</span>,<span class="token string">"m1.tiny"</span>,<span class="token string">"net"</span><span class="token punctuation">)</span>     print<span class="token punctuation">(</span><span class="token string">"servers:"</span>, servers<span class="token punctuation">)</span>     <span class="token comment">#6 删除云主机  </span>   result <span class="token operator">=</span> sdk_m.delete_server<span class="token punctuation">(</span><span class="token string">"test_song"</span><span class="token punctuation">)</span>     print<span class="token punctuation">(</span><span class="token string">"servers:"</span>, result<span class="token punctuation">)</span>  </code></pre><p>1.执行 sdk_server_manager.py 脚本,成功创建云主机，计 0.5 分<br>2.检查创建的云主机状态正确，计 0.5 分</p><h3 id="【题目-5】Python-运维开发：云主机类型管理的命令行工具开发-2-分"><a href="#【题目-5】Python-运维开发：云主机类型管理的命令行工具开发-2-分" class="headerlink" title="【题目 5】Python 运维开发：云主机类型管理的命令行工具开发[2 分]"></a>【题目 5】Python 运维开发：云主机类型管理的命令行工具开发[2 分]</h3><p>使用已建好的 OpenStack Python 运维开发环境，在/root 目录下创建 flavor_manager.py<br>脚本，完成云主机类型的管理，flavor_manager.py 程序支持命令行参数执行。提示说明：Python 标准库argparse 模块，可以提供命令行参数的解析。要求如下：<br>（1）程序支持根据命令行参数，创建 1 个多云主机类型。返回 response。位置参数“create”，表示创建；<br>参数“-n”支持指定 flavor 名称，数据类型为字符串类型； 参数“-m”支持指定内存大小，数据类型为 int，单位 M； 参数“-v”支持指定虚拟 cpu 个数，数据类型为 int；<br>参数“-d”支持磁盘大小，内存大小类型为 int，单位 G； 参数“-id”支持指定 ID，类型为字符串。<br>参考运行实例：<br>python3 flavor_manager.py create -n flavor_small -m 1024 -v 1 -d 10 -id 100000</p><p>（2）程序支持查询目前 admin 账号下所有的云主机类型。位置参数“getall”，表示查询所有云主机类型；<br>查询结果，以 json 格式输出到控制台。参考执行实例如下：<br>python3 flavor_manager.py getall</p><p>（3）支持查询给定具体名称的云主机类型查询。位置参数“get”，表示查询 1 个云主机类型； 参数“-id”支持指定 ID 查询，类型为 string。 控制台以 json 格式输出创建结果。<br>参考执行实例如下：<br>python3 flavor_manager.py get -id 100000</p><p>（4）支持删除指定的 ID 云主机类型。<br>位置参数“delete”，表示删除一个云主机类型；<br>参数“-id”支持指定 ID 查询，返回 response，控制台输出response。参考执行实例如下：<br>python3 flavor_manager.py delete -id 100001</p><pre class="language-bash" data-language="bash"><code class="language-bash">在这里插入代码片</code></pre><p>1.执行 flavor_manager.py 脚本，指定 create 和配置参数，成功创建 1 个云主机类型，计 0.5<br>分；<br>2.执行 flavor_manager.py 脚本，指定 getall 参数，成功查询所有云主机类型，计 0.5 分；<br>3.执行 flavor_manager.py 脚本，指定 get 和配置参数，成功查询具体名称的云主机类型，计<br>0.5 分；<br>4.执行 flavor_manager.py 脚本，指定 delete 和配置参数，成功删除指定 ID 云主机类型，计<br>0.5 分。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> json,openstack,argparseclass flavor_manager:    def __init__<span class="token punctuation">(</span>self,auth_url,user_domain_name,username,password<span class="token punctuation">)</span>:        self.connect <span class="token operator">=</span> openstack.connect<span class="token punctuation">(</span>            <span class="token assign-left variable">auth_url</span><span class="token operator">=</span>auth_url,            <span class="token assign-left variable">user_domain_name</span><span class="token operator">=</span>user_domain_name,            <span class="token assign-left variable">username</span><span class="token operator">=</span>username,            <span class="token assign-left variable">password</span><span class="token operator">=</span>password        <span class="token punctuation">)</span>    def create_flavor<span class="token punctuation">(</span>self,args<span class="token punctuation">)</span>:        flavor <span class="token operator">=</span> self.connect.compute.find_flavor<span class="token punctuation">(</span>args.n<span class="token punctuation">)</span>        <span class="token keyword">if</span> flavor is not None:            self.connect.compute.delete_flavor<span class="token punctuation">(</span>flavor<span class="token punctuation">)</span>        flavor <span class="token operator">=</span> self.connect.compute.create_flavor<span class="token punctuation">(</span>            <span class="token assign-left variable">name</span><span class="token operator">=</span>args.n,            <span class="token assign-left variable">vcpus</span><span class="token operator">=</span>args.v,            <span class="token assign-left variable">ram</span><span class="token operator">=</span>args.m,            <span class="token assign-left variable">disk</span><span class="token operator">=</span>args.d,            <span class="token assign-left variable">id</span><span class="token operator">=</span>args.id        <span class="token punctuation">)</span>        <span class="token builtin class-name">return</span> json.dumps<span class="token punctuation">(</span>flavor<span class="token punctuation">)</span>    def list_all_flavor<span class="token punctuation">(</span>self,args<span class="token punctuation">)</span>:        flavors <span class="token operator">=</span> self.connect.compute.flavors<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token for-or-select variable">flavor</span> <span class="token keyword">in</span> flavors:            print<span class="token punctuation">(</span>json.dumps<span class="token punctuation">(</span>flavor<span class="token punctuation">))</span>    def get_flavor_by_id<span class="token punctuation">(</span>self,args<span class="token punctuation">)</span>:        flavor <span class="token operator">=</span> self.connect.compute.find_flavor<span class="token punctuation">(</span>args.id<span class="token punctuation">)</span>        <span class="token builtin class-name">return</span> json.dumps<span class="token punctuation">(</span>flavor<span class="token punctuation">)</span>    def delete_flavor_by_id<span class="token punctuation">(</span>self,args<span class="token punctuation">)</span>:        self.connect.compute.delete_flavor<span class="token punctuation">(</span>args.id<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token builtin class-name">:</span>    flavor_m <span class="token operator">=</span> flavor_manager<span class="token punctuation">(</span>        <span class="token string">'http://192.168.73.10:5000/v3'</span>,        <span class="token string">'demo'</span>,        <span class="token string">'admin'</span>,        <span class="token string">'000000'</span>    <span class="token punctuation">)</span>    <span class="token comment"># 命令解析器</span>    parser <span class="token operator">=</span> argparse.ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    subparsers <span class="token operator">=</span> parser.add_subparsers<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 添加子命令解析器</span>    <span class="token comment"># create 子命令</span>    parser_create <span class="token operator">=</span> subparsers.add_parser<span class="token punctuation">(</span><span class="token string">'create'</span>,help<span class="token operator">=</span><span class="token string">"创建云主机类型"</span><span class="token punctuation">)</span>    parser_create.add_argument<span class="token punctuation">(</span><span class="token string">'-n'</span>, <span class="token assign-left variable">type</span><span class="token operator">=</span>str,help<span class="token operator">=</span><span class="token string">"支持指定 flavor 名称，数据类型为字符串类型"</span><span class="token punctuation">)</span>    parser_create.add_argument<span class="token punctuation">(</span><span class="token string">'-m'</span>, <span class="token assign-left variable">type</span><span class="token operator">=</span>int,help<span class="token operator">=</span><span class="token string">"支持指定内存大小，数据类型为 int，单位 M"</span><span class="token punctuation">)</span>    parser_create.add_argument<span class="token punctuation">(</span><span class="token string">'-v'</span>, <span class="token assign-left variable">type</span><span class="token operator">=</span>int,help<span class="token operator">=</span><span class="token string">"支持指定虚拟 cpu 个数，数据类型为 int"</span><span class="token punctuation">)</span>    parser_create.add_argument<span class="token punctuation">(</span><span class="token string">'-d'</span>, <span class="token assign-left variable">type</span><span class="token operator">=</span>int,help<span class="token operator">=</span><span class="token string">"支持磁盘大小，内存大小类型为 int，单位 G"</span><span class="token punctuation">)</span>    parser_create.add_argument<span class="token punctuation">(</span><span class="token string">'-id'</span>, <span class="token assign-left variable">type</span><span class="token operator">=</span>str,help<span class="token operator">=</span><span class="token string">"支持指定 ID，类型为字符串"</span><span class="token punctuation">)</span>    parser_create.set_defaults<span class="token punctuation">(</span>func<span class="token operator">=</span>flavor_m.create_flavor<span class="token punctuation">)</span>    <span class="token comment"># getall 子命令</span>    parser_getall <span class="token operator">=</span> subparsers.add_parser<span class="token punctuation">(</span><span class="token string">"getall"</span>,help<span class="token operator">=</span><span class="token string">"查询目前账号下所有的云主机类型"</span><span class="token punctuation">)</span>    parser_getall.set_defaults<span class="token punctuation">(</span>func<span class="token operator">=</span>flavor_m.list_all_flavor<span class="token punctuation">)</span>    <span class="token comment"># get 子命令</span>    parser_get <span class="token operator">=</span> subparsers.add_parser<span class="token punctuation">(</span><span class="token string">'get'</span>,help<span class="token operator">=</span><span class="token string">"查询给定具体名称的云主机类型查询"</span><span class="token punctuation">)</span>    parser_get.add_argument<span class="token punctuation">(</span><span class="token string">'-id'</span>, <span class="token assign-left variable">type</span><span class="token operator">=</span>str,help<span class="token operator">=</span><span class="token string">"支持指定 ID 查询，类型为 string"</span><span class="token punctuation">)</span>    parser_get.set_defaults<span class="token punctuation">(</span>func<span class="token operator">=</span>flavor_m.get_flavor_by_id<span class="token punctuation">)</span>    <span class="token comment"># delete子命令</span>    parser_delete <span class="token operator">=</span> subparsers.add_parser<span class="token punctuation">(</span><span class="token string">'delete'</span>,help<span class="token operator">=</span><span class="token string">"删除指定的 ID 的云主机类型"</span><span class="token punctuation">)</span>    parser_delete.add_argument<span class="token punctuation">(</span><span class="token string">'-id'</span>, <span class="token assign-left variable">type</span><span class="token operator">=</span>str,help<span class="token operator">=</span><span class="token string">"指定 ID 查询"</span><span class="token punctuation">)</span>    parser_delete.set_defaults<span class="token punctuation">(</span>func<span class="token operator">=</span>flavor_m.delete_flavor_by_id<span class="token punctuation">)</span>    args <span class="token operator">=</span> parser.parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span>args.func<span class="token punctuation">(</span>args<span class="token punctuation">))</span></code></pre><h3 id="【题目-6】Python-运维开发：用户管理的命令行工具开发-2-分"><a href="#【题目-6】Python-运维开发：用户管理的命令行工具开发-2-分" class="headerlink" title="【题目 6】Python 运维开发：用户管理的命令行工具开发[2 分]"></a>【题目 6】Python 运维开发：用户管理的命令行工具开发[2 分]</h3><p>使用已建好的OpenStack Python 运维开发环境，在/root 目录下创建 user_manager.py 脚本，完成用户管理功能开发，user_manager.py 程序支持命令行带参数执行。<br>提示说明：Python 标准库argparse 模块，可以提供命令行参数的解析。</p><p>（1）程序支持根据命令行参数，创建 1 个用户。位置参数“create”，表示创建；<br>参数“-i 或–input”，格式为 json 格式文本用户数据。查询结果，以 json 格式输出到控制台。<br>参考执行实例如下：<br>python3 user_manager.py create –input ‘{ “name”: “user01”, “password”: “000000”, “description”: “description” } ‘</p><p>（2）支持查询给定具体名称的用户查询。<br>位置参数“get”，表示查询 1 个用户；<br>参数“-n 或 –name”支持指定名称查询，类型为 string。<br>参数“-o 或 output”支持查询该用户信息输出到文件，格式为json 格式。参考执行实例如下：<br>python3 user_manager.py get –name user01-o user.json</p><p>（3）程序支持查询目前 admin 账号下所有的用户。位置参数“getall”，表示查询所有用户；<br>参数“-o 或–output”支持输出到文件，格式为 yaml 格式。参考执行实例如下：<br>python3 user_manager.py getall -o openstack_all_user.yaml</p><p>（4）支持删除指定的名称的用户。<br>位置参数“delete”，表示删除一个用户；返回 response，通过控制台输出。参数“-n 或–name”支持指定名称查询，类型为 string。<br>参考执行实例如下：<br>python3 user_manager.py delete -name user01</p><pre class="language-bash" data-language="bash"><code class="language-bash">在这里插入代码片</code></pre><p>1.执行user_manager.py 脚本，指定 create 和配置参数，成功创建 1 个用户，计 0.5 分；<br>2.执行user_manager.py 脚本，指定 get 和配置参数，成功查询具体名称的用户，计 0.5 分； 3.执行user_manager.py 脚本，指定 getall 和配置参数，成功查询 admin 账号下的所有用户， 计 0.5 分；<br>4.执行user_manager.py 脚本，指定 delete 和配置参数，成功删除指定名称的用户，计 0.5 分</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cat user_manager.py </span><span class="token function">import</span> json, yaml, openstack, argparseclass UserManager:    def __init__<span class="token punctuation">(</span>self, auth_url, user_domain_name, username, password<span class="token punctuation">)</span>:        self.connect <span class="token operator">=</span> openstack.connect<span class="token punctuation">(</span>            <span class="token assign-left variable">auth_url</span><span class="token operator">=</span>auth_url,            <span class="token assign-left variable">user_domain_name</span><span class="token operator">=</span>user_domain_name,            <span class="token assign-left variable">username</span><span class="token operator">=</span>username,            <span class="token assign-left variable">password</span><span class="token operator">=</span>password        <span class="token punctuation">)</span>    def create_user<span class="token punctuation">(</span>self, args<span class="token punctuation">)</span>:        user_info <span class="token operator">=</span> json.loads<span class="token punctuation">(</span>args.input<span class="token punctuation">)</span>  <span class="token comment"># 转换为对象</span>        user <span class="token operator">=</span> self.connect.identity.create_user<span class="token punctuation">(</span>            <span class="token assign-left variable">name</span><span class="token operator">=</span>user_info<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>,            <span class="token assign-left variable">password</span><span class="token operator">=</span>user_info<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span>,            <span class="token assign-left variable">description</span><span class="token operator">=</span>user_info<span class="token punctuation">[</span><span class="token string">'description'</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span>        print<span class="token punctuation">(</span>json.dumps<span class="token punctuation">(</span>user<span class="token punctuation">))</span>    def get_user<span class="token punctuation">(</span>self, args<span class="token punctuation">)</span>:        user <span class="token operator">=</span> self.connect.identity.find_user<span class="token punctuation">(</span>args.name<span class="token punctuation">)</span>        <span class="token keyword">if</span> args.output is not None:            output <span class="token operator">=</span> open<span class="token punctuation">(</span>str<span class="token punctuation">(</span>args.output<span class="token punctuation">)</span>, <span class="token string">'w'</span><span class="token punctuation">)</span>            json.dump<span class="token punctuation">(</span>user, output<span class="token punctuation">)</span>        else:            print<span class="token punctuation">(</span>json.dumps<span class="token punctuation">(</span>user<span class="token punctuation">))</span>    def list_all_user<span class="token punctuation">(</span>self, args<span class="token punctuation">)</span>:        <span class="token function">users</span> <span class="token operator">=</span> self.connect.identity.users<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> args.output is not None:            output <span class="token operator">=</span> open<span class="token punctuation">(</span>str<span class="token punctuation">(</span>args.output<span class="token punctuation">)</span>, <span class="token string">'w'</span><span class="token punctuation">)</span>            yaml.safe_dump<span class="token punctuation">(</span>json.loads<span class="token punctuation">(</span>json.dumps<span class="token punctuation">(</span>list<span class="token punctuation">(</span>users<span class="token punctuation">))</span><span class="token punctuation">)</span>, output<span class="token punctuation">)</span>        else:            print<span class="token punctuation">(</span>json.dumps<span class="token punctuation">(</span>list<span class="token punctuation">(</span>users<span class="token punctuation">))</span><span class="token punctuation">)</span>    def del_user<span class="token punctuation">(</span>self, args<span class="token punctuation">)</span>:        user <span class="token operator">=</span> self.connect.identity.find_user<span class="token punctuation">(</span>args.name<span class="token punctuation">)</span>        resp <span class="token operator">=</span> self.connect.identity.delete_user<span class="token punctuation">(</span>user<span class="token punctuation">)</span>        print<span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token builtin class-name">:</span>    user_m <span class="token operator">=</span> UserManager<span class="token punctuation">(</span>        <span class="token string">'http://192.168.73.10:5000/v3'</span>,        <span class="token string">'demo'</span>,        <span class="token string">'admin'</span>,        <span class="token string">'000000'</span>    <span class="token punctuation">)</span>    parser <span class="token operator">=</span> argparse.ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    subparsers <span class="token operator">=</span> parser.add_subparsers<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># create 子命令</span>    parser_create <span class="token operator">=</span> subparsers.add_parser<span class="token punctuation">(</span><span class="token string">"create"</span>, <span class="token assign-left variable">help</span><span class="token operator">=</span><span class="token string">"创建 1 个用户"</span><span class="token punctuation">)</span>    parser_create.add_argument<span class="token punctuation">(</span><span class="token string">'-i'</span>, <span class="token string">'--input'</span>,type<span class="token operator">=</span>str,required<span class="token operator">=</span>True, <span class="token assign-left variable">help</span><span class="token operator">=</span><span class="token string">"参数“-i 或--input”，格式为 json 格式文本用户数据"</span><span class="token punctuation">)</span>    parser_create.set_defaults<span class="token punctuation">(</span>func<span class="token operator">=</span>user_m.create_user<span class="token punctuation">)</span>    <span class="token comment"># get 子命令</span>    parser_get <span class="token operator">=</span> subparsers.add_parser<span class="token punctuation">(</span><span class="token string">'get'</span>, <span class="token assign-left variable">help</span><span class="token operator">=</span><span class="token string">"表示查询 1 个用户"</span><span class="token punctuation">)</span>    parser_get.add_argument<span class="token punctuation">(</span><span class="token string">'-n'</span>, <span class="token string">'--name'</span>, <span class="token assign-left variable">required</span><span class="token operator">=</span>True, <span class="token assign-left variable">type</span><span class="token operator">=</span>str, <span class="token assign-left variable">help</span><span class="token operator">=</span><span class="token string">"参数“-n 或 --name”支持指定名称查询，类型为 string"</span><span class="token punctuation">)</span>    parser_get.add_argument<span class="token punctuation">(</span><span class="token string">'-o'</span>, <span class="token string">'--output'</span>, <span class="token assign-left variable">type</span><span class="token operator">=</span>str, <span class="token assign-left variable">help</span><span class="token operator">=</span><span class="token string">"参数“-o 或 output”支持查询该用户信息输出到文件，格式为 json 格式。"</span><span class="token punctuation">)</span>    parser_get.set_defaults<span class="token punctuation">(</span>func<span class="token operator">=</span>user_m.get_user<span class="token punctuation">)</span>    <span class="token comment"># getall子命令</span>    parser_getll <span class="token operator">=</span> subparsers.add_parser<span class="token punctuation">(</span><span class="token string">'getall'</span>, <span class="token assign-left variable">help</span><span class="token operator">=</span><span class="token string">"目前账号下所有的用户"</span><span class="token punctuation">)</span>    parser_getll.add_argument<span class="token punctuation">(</span><span class="token string">'-o'</span>, <span class="token string">'--output'</span>, <span class="token assign-left variable">type</span><span class="token operator">=</span>str, <span class="token assign-left variable">help</span><span class="token operator">=</span><span class="token string">"参数“-o 或--output”支持输出到文件，格式为 yaml 格式。"</span><span class="token punctuation">)</span>    parser_getll.set_defaults<span class="token punctuation">(</span>func<span class="token operator">=</span>user_m.list_all_user<span class="token punctuation">)</span>    <span class="token comment"># delete子命令</span>    parser_delete <span class="token operator">=</span> subparsers.add_parser<span class="token punctuation">(</span><span class="token string">'delete'</span>, <span class="token assign-left variable">help</span><span class="token operator">=</span><span class="token string">"表示删除一个用户"</span><span class="token punctuation">)</span>    parser_delete.add_argument<span class="token punctuation">(</span><span class="token string">'-n'</span>, <span class="token string">'--name'</span>, <span class="token assign-left variable">required</span><span class="token operator">=</span>True, <span class="token assign-left variable">type</span><span class="token operator">=</span>str, <span class="token assign-left variable">help</span><span class="token operator">=</span><span class="token string">"参数“-n 或--name”支持指定名称查询，类型为 string"</span><span class="token punctuation">)</span>    parser_delete.set_defaults<span class="token punctuation">(</span>func<span class="token operator">=</span>user_m.del_user<span class="token punctuation">)</span>    args <span class="token operator">=</span> parser.parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    args.func<span class="token punctuation">(</span>args<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CloudComputing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ansible </tag>
            
            <tag> Openstack </tag>
            
            <tag> Python </tag>
            
            <tag> SQL </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Jumpserver </tag>
            
            <tag> Redis </tag>
            
            <tag> Skywalking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统句柄优化</title>
      <link href="/2023/03/10/linux-xi-tong-ju-bing-you-hua/"/>
      <url>/2023/03/10/linux-xi-tong-ju-bing-you-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux系统句柄优化"><a href="#Linux系统句柄优化" class="headerlink" title="Linux系统句柄优化"></a>Linux系统句柄优化</h3><h4 id="（1）查看当前的句柄数"><a href="#（1）查看当前的句柄数" class="headerlink" title="（1）查看当前的句柄数"></a>（1）查看当前的句柄数</h4><p>使用CRT等远程连接工具，连接至192.168.200.21，查看当前系统默认的文件句柄数量，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ulimit -n</span><span class="token number">1024</span></code></pre><p>可以看到当前的系统默认限制是1024。</p><h4 id="（2）修改句柄数"><a href="#（2）修改句柄数" class="headerlink" title="（2）修改句柄数."></a>（2）修改句柄数.</h4><p>修改Linux系统的句柄数限制有两种方法，一种是使用ulimit命令临时生效，另外一种是修改配置文件，永久生效。此处使用修改配置文件的方式。</p><p><strong>注意：</strong>如果使用命令临时生效句柄限制，root用户可以调大或者调小句柄的限制，而非root用户一旦设定了值，就只能调小这个限制，不能调大，不然会报“bash: ulimit: open files: cannot modify limit: Operation not permitted”的错误。</p><p>修改配置文件调整句柄限制为65535，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># echo "* soft nofile 65535"  &gt;&gt; /etc/security/limits.conf</span><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># echo "* hard nofile 65535"  &gt;&gt; /etc/security/limits.conf</span></code></pre><p>添加配置的解释如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">*       <span class="token comment">#代表所有用户</span>soft    <span class="token comment">#超过文件句柄数时，仅提示</span>hard    <span class="token comment">#超过文件句柄数时，直接限制</span></code></pre><p>修改完之后，不需要重启系统即会生效，但是需要重新登录。退出重新登录该云主机，查看当前的句柄限制，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># logout</span>Connection closed.Last login: Tue Feb  <span class="token number">8</span> 01:58:31 <span class="token number">2022</span> from <span class="token number">192.168</span>.0.70<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ulimit -n</span><span class="token number">65535</span></code></pre><p>可以看到当前的限制为65535。</p><p>至此，Linux系统文件句柄优化配置结束。在生产环境中，系统默认的1024远远不够，会导致系统报“too many open files”的错误。所以优化句柄数量限制是很有必要的。此案例默认使用的root用户进行修改，如果使用非root用户，在修改句柄限制的时候，会有比较多的限制，感兴趣的读者，可以自行查找资料学习。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack Help</title>
      <link href="/2023/03/10/openstack-help/"/>
      <url>/2023/03/10/openstack-help/</url>
      
        <content type="html"><![CDATA[<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/keystone/admin-openrc.sh openstack console url show exam <span class="token comment">#无需打开dashboard获取实例exam的vnc链接</span></code></pre><h3 id="glance"><a href="#glance" class="headerlink" title="glance"></a>glance</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建cirros镜像</span>openstack image create “centos” <span class="token punctuation">\</span>--disk-format qcow2 <span class="token punctuation">\</span>--container-format bare <span class="token punctuation">\</span><span class="token parameter variable">--shared</span> <span class="token operator">&lt;</span>./cirros-0.3.5-x86_64-disk.img <span class="token comment">#创建cirros镜像</span>glance image-create <span class="token parameter variable">--name</span> cirros <span class="token punctuation">\</span>--disk-format qcow2 --container-format bare <span class="token punctuation">\</span><span class="token parameter variable">--progress</span>  <span class="token operator">&lt;</span>./cirros-0.3.5-x86_64-disk.img <span class="token comment">#创建cirros镜像</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除镜像</span>openstack image delete <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> glance image-delete <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">file</span> <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span> <span class="token comment">#查看某文件信息</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">openstack image <span class="token builtin class-name">set</span> --min-disk<span class="token operator">=</span><span class="token number">1</span> cirros <span class="token comment">#更新镜像信息</span>glance image-update --min-disk<span class="token operator">=</span><span class="token number">0</span> ad741236-5183-4751-8327-b088512c85f3 <span class="token comment">#更新镜像信息</span>--min-disk <span class="token comment">#镜像启动最小硬盘大小</span><span class="token parameter variable">--name</span> <span class="token comment">#镜像名称</span>--disk-format <span class="token comment">#镜像格式</span>--min-ram <span class="token comment">#镜像启动最小内存大小</span>--container-format <span class="token comment">#镜像在项目中可见性</span>openstack image show <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>or<span class="token operator">&lt;</span>id<span class="token operator">&gt;</span> <span class="token comment"># 查看镜像详细信息</span>glance image-show <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span> <span class="token comment">#查看镜像详细信息</span></code></pre><h3 id="glance对接Swift作后端存储"><a href="#glance对接Swift作后端存储" class="headerlink" title="glance对接Swift作后端存储"></a>glance对接Swift作后端存储</h3><pre class="language-bash" data-language="bash"><code class="language-bash">crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_container glancecrudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_create_container_on_put <span class="token boolean">true</span>crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_multi_tenant <span class="token boolean">true</span>crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_admin_tenant <span class="token function">service</span>crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_user 000000crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_key 000000crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store stores swiftcrudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store default_store swift</code></pre><h3 id="glance对接cinder作后端存储"><a href="#glance对接cinder作后端存储" class="headerlink" title="glance对接cinder作后端存储"></a>glance对接cinder作后端存储</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################</span>glance配置<span class="token function">vim</span> /etc/glance/glance-api.conf<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>show_multiple_locations <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">[</span>glance_store<span class="token punctuation">]</span><span class="token comment"># stores = file,http</span><span class="token comment"># demo_store = file</span><span class="token comment"># filesystem_store_datadir = /var/lib/glance/images/</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>stores <span class="token operator">=</span> cinderdefault_store <span class="token operator">=</span> cinder<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart openstack-glance*</span><span class="token comment">##################</span>cinder配置<span class="token function">vim</span> /etc/cinder/cinder.conf<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>allowed_direct_url_schemes <span class="token operator">=</span> cinderimage_upload_use_cinder_backend <span class="token operator">=</span> <span class="token boolean">true</span>image_upload_use_internal_tenant <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart openstack-cinder*</span></code></pre><h3 id="glance对接nfs作后端存储"><a href="#glance对接nfs作后端存储" class="headerlink" title="glance对接nfs作后端存储"></a>glance对接nfs作后端存储</h3><pre class="language-bash" data-language="bash"><code class="language-bash">nfs-server配置<span class="token comment">#############</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># yum install rpcbind nfs-utils -y</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p /nfs/share</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/exports</span>/nfs/share <span class="token number">192.168</span>.200.0<span class="token punctuation">(</span>rw,sync,no_root_squash,no_all_squash,anonuid<span class="token operator">=</span><span class="token number">501</span>,anongid<span class="token operator">=</span><span class="token number">501</span><span class="token punctuation">)</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># exportfs -r</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># rpcinfo -p</span>   program vers proto   port  <span class="token function">service</span>    <span class="token number">100000</span>    <span class="token number">4</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">3</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">2</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">4</span>   udp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">3</span>   udp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">2</span>   udp    <span class="token number">111</span>  portmapper<span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart rpcbind </span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># rpcinfo -p</span>   program vers proto   port  <span class="token function">service</span>    <span class="token number">100000</span>    <span class="token number">4</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">3</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">2</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">4</span>   udp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">3</span>   udp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">2</span>   udp    <span class="token number">111</span>  portmapper    <span class="token number">100024</span>    <span class="token number">1</span>   udp  <span class="token number">38286</span>  status    <span class="token number">100024</span>    <span class="token number">1</span>   tcp  <span class="token number">51127</span>  status    <span class="token number">100005</span>    <span class="token number">1</span>   udp  <span class="token number">20048</span>  mountd    <span class="token number">100005</span>    <span class="token number">1</span>   tcp  <span class="token number">20048</span>  mountd    <span class="token number">100005</span>    <span class="token number">2</span>   udp  <span class="token number">20048</span>  mountd    <span class="token number">100005</span>    <span class="token number">2</span>   tcp  <span class="token number">20048</span>  mountd    <span class="token number">100005</span>    <span class="token number">3</span>   udp  <span class="token number">20048</span>  mountd    <span class="token number">100005</span>    <span class="token number">3</span>   tcp  <span class="token number">20048</span>  mountd    <span class="token number">100003</span>    <span class="token number">3</span>   tcp   <span class="token number">2049</span>  nfs    <span class="token number">100003</span>    <span class="token number">4</span>   tcp   <span class="token number">2049</span>  nfs    <span class="token number">100227</span>    <span class="token number">3</span>   tcp   <span class="token number">2049</span>  nfs_acl    <span class="token number">100003</span>    <span class="token number">3</span>   udp   <span class="token number">2049</span>  nfs    <span class="token number">100003</span>    <span class="token number">4</span>   udp   <span class="token number">2049</span>  nfs    <span class="token number">100227</span>    <span class="token number">3</span>   udp   <span class="token number">2049</span>  nfs_acl    <span class="token number">100021</span>    <span class="token number">1</span>   udp  <span class="token number">51358</span>  nlockmgr    <span class="token number">100021</span>    <span class="token number">3</span>   udp  <span class="token number">51358</span>  nlockmgr    <span class="token number">100021</span>    <span class="token number">4</span>   udp  <span class="token number">51358</span>  nlockmgr    <span class="token number">100021</span>    <span class="token number">1</span>   tcp  <span class="token number">37191</span>  nlockmgr    <span class="token number">100021</span>    <span class="token number">3</span>   tcp  <span class="token number">37191</span>  nlockmgr    <span class="token number">100021</span>    <span class="token number">4</span>   tcp  <span class="token number">37191</span>  nlockmgr<span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable rpcbind nfs-server</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># showmount -e 192.168.200.131</span>Export list <span class="token keyword">for</span> <span class="token number">192.168</span>.200.131:/nfs/share <span class="token number">192.168</span>.200.0/24controller glance配置<span class="token comment">####################</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># yum install rpcbind nfs-utils -y</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># df -Th</span>Filesystem              Type              Size  Used Avail Use% Mounted ondevtmpfs                devtmpfs          <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /devtmpfs                   tmpfs             <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /dev/shmtmpfs                   tmpfs             <span class="token number">1</span>.4G   12M  <span class="token number">1</span>.4G   <span class="token number">1</span>% /runtmpfs                   tmpfs             <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /sys/fs/cgroup/dev/mapper/centos-root xfs                42G  <span class="token number">8</span>.2G   34G  <span class="token number">20</span>% //dev/sda1               xfs               497M  144M  354M  <span class="token number">29</span>% /boottmpfs                   tmpfs             279M     <span class="token number">0</span>  279M   <span class="token number">0</span>% /run/user/0<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># mount -t nfs 192.168.200.131:/nfs/share /var/lib/glance/images/</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># df -Th</span>Filesystem                 Type              Size  Used Avail Use% Mounted ondevtmpfs                   devtmpfs          <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /devtmpfs                      tmpfs             <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /dev/shmtmpfs                      tmpfs             <span class="token number">1</span>.4G   12M  <span class="token number">1</span>.4G   <span class="token number">1</span>% /runtmpfs                      tmpfs             <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /sys/fs/cgroup/dev/mapper/centos-root    xfs                42G  <span class="token number">8</span>.2G   34G  <span class="token number">20</span>% //dev/sda1                  xfs               497M  144M  354M  <span class="token number">29</span>% /boottmpfs                      tmpfs             279M     <span class="token number">0</span>  279M   <span class="token number">0</span>% /run/user/0vmhgfs-fuse                fuse.vmhgfs-fuse   72G   53G   19G  <span class="token number">74</span>% /mnt/hgfs<span class="token number">192.168</span>.200.131:/nfs/share nfs4               72G  <span class="token number">2</span>.3G   70G   <span class="token number">4</span>% /var/lib/glance/images<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># chown glance:glance /var/lib/glance/images</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># source admin-openrc.sh</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack image create test --disk-format qcow2 --container-format bare --public &lt;./cirros-0.3.0-x86_64-disk.img</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack image list</span>+--------------------------------------+--------+--------+<span class="token operator">|</span> ID                                   <span class="token operator">|</span> Name   <span class="token operator">|</span> Status <span class="token operator">|</span>+--------------------------------------+--------+--------+<span class="token operator">|</span> 4872e790-ae84-42a1-b1ae-109cc3365647 <span class="token operator">|</span> cirros <span class="token operator">|</span> active <span class="token operator">|</span><span class="token operator">|</span> a3aa4889-522e-4e4c-a9fc-e2a4a98d7ab7 <span class="token operator">|</span> <span class="token builtin class-name">test</span>   <span class="token operator">|</span> active <span class="token operator">|</span>+--------------------------------------+--------+--------+测试<span class="token comment">####</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># ls /var/lib/glance/images/</span>a3aa4889-522e-4e4c-a9fc-e2a4a98d7ab7<span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># ls /nfs/share/</span>a3aa4889-522e-4e4c-a9fc-e2a4a98d7ab7</code></pre><h3 id="nova"><a href="#nova" class="headerlink" title="nova"></a>nova</h3><pre class="language-bash" data-language="bash"><code class="language-bash">crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf libvirt virt_type qemu <span class="token comment">#在虚拟机环境下需设置</span>systemctl restart openstack-nova-compute <span class="token comment">#重启nova服务</span></code></pre><h3 id="neutron"><a href="#neutron" class="headerlink" title="neutron"></a>neutron</h3><pre class="language-bash" data-language="bash"><code class="language-bash">openstack network create ext-net <span class="token punctuation">\</span>--provider-netowrk-type vlan <span class="token punctuation">\</span>--provider-physical-network provider <span class="token punctuation">\</span>--provider-segment <span class="token number">200</span> <span class="token comment">#创建网络</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">openstack subnet create ext-subnet <span class="token punctuation">\</span>--ext-net <span class="token punctuation">\</span>--allocation-poll <span class="token assign-left variable">start</span><span class="token operator">=</span><span class="token number">192.168</span>.200.X,end<span class="token operator">=</span><span class="token number">192.168</span>.200.X <span class="token punctuation">\</span><span class="token parameter variable">--gateway</span> <span class="token number">192.168</span>.200.1 <span class="token punctuation">\</span>--subnet-range <span class="token number">192.168</span>.200.0/24 <span class="token comment">#创建子网并绑定网络</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">openstack network list <span class="token comment">#列出所有网络</span>openstack subnet list <span class="token comment">#列出所有子网</span></code></pre><h3 id="cinder"><a href="#cinder" class="headerlink" title="cinder"></a>cinder</h3><pre class="language-bash" data-language="bash"><code class="language-bash">openstack volume create <span class="token parameter variable">--size</span> <span class="token number">2</span> volume <span class="token comment">#创建一个大小2G的卷volume</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">openstack volume list <span class="token comment"># 列出所有卷的信息</span>openstack volume show volume <span class="token comment"># 列出名称为volume的卷的详细信息</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">openstack server <span class="token function">add</span> volume exam volume <span class="token comment">#为exam实例挂载卷volume</span>openstack server remove volume exam volume <span class="token comment">#卸载exam的volume卷</span>openstack volume <span class="token builtin class-name">set</span> <span class="token parameter variable">--size</span> <span class="token number">3</span> volume <span class="token comment">#设置volume卷的大小为3G</span></code></pre><h3 id="flavor"><a href="#flavor" class="headerlink" title="flavor"></a>flavor</h3><pre class="language-bash" data-language="bash"><code class="language-bash">openstack flavor create m1 <span class="token punctuation">\</span><span class="token parameter variable">--disk</span> <span class="token number">10</span> <span class="token parameter variable">--ram</span> <span class="token number">512</span> <span class="token parameter variable">--vcpus</span> <span class="token number">1</span> <span class="token parameter variable">--id</span> <span class="token number">10</span> <span class="token comment">#创建实例类型</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">openstack flavor list <span class="token comment">#列出所有实例类型</span></code></pre><h3 id="Security-Group"><a href="#Security-Group" class="headerlink" title="Security Group"></a>Security Group</h3><pre class="language-bash" data-language="bash"><code class="language-bash">openstack security group list <span class="token comment">#列出所有安全组</span>openstack security group rule list  <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span> <span class="token comment">#列出此安全组所有规则</span>openstack security group rule show <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span> <span class="token comment">#列出此规则详细信息</span>openstack security group create <span class="token builtin class-name">test</span> <span class="token comment">#创建test安全组</span>openstack security group delete <span class="token builtin class-name">test</span> <span class="token comment">#删除test安全组</span>openstack security group rule create <span class="token parameter variable">--protocol</span> icmp <span class="token parameter variable">--ingress</span> <span class="token builtin class-name">test</span> <span class="token comment">#添加入口ICMP全部通过规则到test安全组</span>openstack security group rule create <span class="token parameter variable">--protocol</span> icmp <span class="token parameter variable">--egress</span> <span class="token builtin class-name">test</span> <span class="token comment">#添加出口ICMP全部通过规则到test安全组</span></code></pre><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">openstack server list <span class="token comment">#列出所有实例</span>openstack server stop <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>or<span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token comment">#实例暂停</span>openstack server start <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>or<span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token comment">#实例开机</span>openstack server <span class="token function">reboot</span> <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>or<span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token comment">#实例重启</span></code></pre><h3 id="swift"><a href="#swift" class="headerlink" title="swift"></a>swift</h3><pre class="language-bash" data-language="bash"><code class="language-bash">swift <span class="token function">stat</span> <span class="token comment">#查看Swift组件</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">openstack container create swift-test <span class="token comment">#创建swift-test容器</span>openstack container list <span class="token comment">#列出所有容器</span>openstack container show swift-test <span class="token comment">#查看swift-test容器详细信息</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建object前需将上传后的目录结构在本地创建，这里在本地创建名为“test”的目录“/root/test”,将/root/anaconda-ks.cfg文件复制到“/root/test”目录中</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># mkdir test</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cp anaconda-ks.cfg test/</span>openstack object create swift-test test/anaconda-ks.cfg <span class="token comment">#创建对象</span>openstack object list swift-test <span class="token comment">#查看swift-test容器中所有对象</span>openstack object show swift-test test/anaconda-ks.cfg <span class="token comment">#查看swift-test容器中test/anaconda-ks.cfg对象详细信息</span><span class="token punctuation">[</span>root@controller opt<span class="token punctuation">]</span><span class="token comment"># cd /opt/</span><span class="token punctuation">[</span>root@controller opt<span class="token punctuation">]</span><span class="token comment"># openstack object save swift-test test/anaconda-ks.cfg</span><span class="token punctuation">[</span>root@controller opt<span class="token punctuation">]</span><span class="token comment"># ls test/</span>anaconda-ks.cfg  <span class="token comment">#下载对象test/anaconda-ks.cfg到opt目录下</span>openstack object delete swift-test test/anaconda-ks.cfg <span class="token comment">#删除test/anaconda-ks.cfg对象</span>openstack container delete swift-test <span class="token comment">#删除swfit-test容器</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># swift post test #创建容器test</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># swift stat test #查看容器test</span>               Account: AUTH_50cec6526baa4ce58bc228f43cd84a70             Container: <span class="token builtin class-name">test</span>               Objects: <span class="token number">0</span>                 Bytes: <span class="token number">0</span>              Read ACL:             Write ACL:               Sync To:              Sync Key:         Accept-Ranges: bytes      X-Storage-Policy: Policy-0         Last-Modified: Sat, <span class="token number">12</span> Nov <span class="token number">2022</span> 09:43:00 GMT           X-Timestamp: <span class="token number">1668246092.88731</span>            X-Trans-Id: txcb18528f6f174e10ac794-00636f6aa8          Content-Type: application/json<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8X-Openstack-Request-Id: txcb18528f6f174e10ac794-00636f6aa8swift upload <span class="token builtin class-name">test</span> <span class="token parameter variable">-S</span> <span class="token number">10000000</span> cirros-0.3.5-x86_64-disk.img <span class="token comment">#上传cirros镜像到test容器并分片存储 每个片段大小为10M</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># swift list test_segments #查看存储路径中的数据片可看到单个存储片大小为10M，镜像大小为13M左右，所以分成了两片</span>cirros-0.3.5-x86_64-disk.img/1647249152.000000/13267968/10000000/00000000cirros-0.3.5-x86_64-disk.img/1647249152.000000/13267968/10000000/00000001</code></pre><p>2022/11/12</p><h3 id="Barbican"><a href="#Barbican" class="headerlink" title="Barbican"></a>Barbican</h3><pre class="language-bash" data-language="bash"><code class="language-bash">Barbican是openstack的key管理组件，定位在提供REST API 来安全存储、提供和管理“秘密”</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">openstack secret store <span class="token parameter variable">--name</span> secret01 <span class="token parameter variable">--payload</span> secretkey <span class="token comment">#创建secret01密钥</span>openstack secret list <span class="token comment">#列出所有密钥</span>openstack secret get <span class="token operator">&lt;</span>secret href<span class="token operator">&gt;</span> <span class="token comment">#获取密钥元数据</span>openstack secret get http://controller:9311/v1/secrets/70df933c-6987-4ea6-b87b-fc6f81da54a1 <span class="token parameter variable">--payload</span> <span class="token comment">#查看secret01密钥负载</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> OpenStack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack平台镜像优化</title>
      <link href="/2023/03/10/openstack-ping-tai-jing-xiang-you-hua/"/>
      <url>/2023/03/10/openstack-ping-tai-jing-xiang-you-hua/</url>
      
        <content type="html"><![CDATA[<h4 id="OpenStack平台镜像优化"><a href="#OpenStack平台镜像优化" class="headerlink" title="OpenStack平台镜像优化"></a>OpenStack平台镜像优化</h4><p>在使用打快照方式制作镜像后，镜像的大小会变得非常大，比如一个基础的CentOS镜像大小为400M左右，但是使用打快照方式制作的镜像大小会有1个G左右，具体的大小还要根据安装的东西来实际情况实际分析。</p><p>qemu-img命令中提供一个可用于镜像转换与压缩的选项，即qemu-img convert。接下来使用该命令，对已经打快照完成的镜像进行压缩操作。</p><p>使用提供的镜像CentOS7.5-compress.qcow2，上传至controller节点的/root目录下，查看镜像的大小，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># du -sh CentOS7.5-compress.qcow2</span>892MCentOS7.5-compress.qcow2</code></pre><p>可以看到当前的镜像大小为892M，接下来使用命令，对镜像进行压缩，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># qemu-img convert -c -O qcow2 CentOS7.5-compress.qcow2 CentOS7.5-compress2.qcow2</span></code></pre><p>该命令参数的解释如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-c</span>  压缩<span class="token parameter variable">-O</span>  qcow2 输出格式为 qcow2CentOS7.5-compress.qcow2   被压缩的文件CentOS7.5-compress2.qcow2  压缩完成后文件</code></pre><p>等待一小段时间后，压缩完成，查看当前目录下CentOS7.5-compress2.qcow2镜像文件的大小，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># du -sh CentOS7.5-compress2.qcow2 </span>405MCentOS7.5-compress2.qcow2</code></pre><p>可以看到镜像大概被压缩到了一半的大小。使用qemu-img convert命令可以压缩qcow2镜像，在日常的工作中，经常会用到此命令进行镜像压缩。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Openstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023云计算技能大赛容器云</title>
      <link href="/2023/03/10/rong-qi-yun-bu-shu/"/>
      <url>/2023/03/10/rong-qi-yun-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="容器云部署"><a href="#容器云部署" class="headerlink" title="容器云部署"></a>容器云部署</h1><h2 id="一-前期准备"><a href="#一-前期准备" class="headerlink" title="一.前期准备"></a>一.前期准备</h2><h3 id="1-准备虚拟机"><a href="#1-准备虚拟机" class="headerlink" title="1.准备虚拟机"></a>1.准备虚拟机</h3><p>使用Centos_7.9.2009镜像创建两台虚拟机，配置好网络IP，关闭防火墙，将chinaskills_cloud_paas_v2.0.2.iso镜像上传至root目录下，将root密码设置为<code>000000</code></p><table><thead><tr><th>节点IP</th><th>角色</th><th>备注</th></tr></thead><tbody><tr><td>192.168.200.10</td><td>Master</td><td>Kubernetes 集群 master 节点、Harbor 仓库节点</td></tr><tr><td>192.168.200.20</td><td>Worker</td><td>Kubernetes 集群 node 节点</td></tr></tbody></table><h3 id="2-基础环境准备"><a href="#2-基础环境准备" class="headerlink" title="2.基础环境准备"></a>2.基础环境准备</h3><p>将上传在root目录的安装包(<code>chinaskills_cloud_paas_v2.0.2.iso</code>)中的文件提取到/opt目录</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /root/chinaskills_cloud_paas_v2.0.2.iso /mnt/<span class="token function">cp</span> <span class="token parameter variable">-rf</span> /mnt/* /opt<span class="token function">umount</span> /root/chinaskills_cloud_paas_v2.0.2.iso</code></pre><h3 id="3-安装kubeeasy"><a href="#3-安装kubeeasy" class="headerlink" title="3.安装kubeeasy"></a>3.安装kubeeasy</h3><p>kubeeasy 为 Kubernetes 集群专业部署工具，极大的简化了部署流程。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /opt/kubeeasy /usr/bin/kubeeasy</code></pre><h3 id="4-安装依赖包"><a href="#4-安装依赖包" class="headerlink" title="4.安装依赖包"></a>4.安装依赖包</h3><p>此步骤主要完成 docker-ce、git、unzip、vim、wget 等工具的安装。</p><p>可通过命令 <code>tail -f /var/log/kubeinstall.log</code> 查看安装详情或排查错误</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeeasy <span class="token function">install</span> depend <span class="token punctuation">\</span> <span class="token parameter variable">--host</span> <span class="token number">192.168</span>.200.10,192.168.200.20 <span class="token punctuation">\</span> <span class="token comment"># 所有主机节点 IP</span><span class="token parameter variable">--user</span> root <span class="token punctuation">\</span>  <span class="token comment"># 主机登录用户，默认为root</span><span class="token parameter variable">--password</span> 000000 <span class="token punctuation">\</span> <span class="token comment"># 主机登录密码，所有节点需保持密码一致</span>--offline-file /opt/dependencies/base-rpms.tar.gz <span class="token comment"># 离线安装包路径</span></code></pre><h3 id="5-配置SSH免密"><a href="#5-配置SSH免密" class="headerlink" title="5.配置SSH免密"></a>5.配置SSH免密</h3><p>(1) 在master节点，检测集群节点连通性</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeeasy check <span class="token function">ssh</span> <span class="token punctuation">\</span> <span class="token parameter variable">--host</span> <span class="token number">192.168</span>.200.10,192.168.200.20 <span class="token punctuation">\</span> <span class="token parameter variable">--user</span> root <span class="token punctuation">\</span> <span class="token parameter variable">--password</span> 000000</code></pre><p>(2)在master节点，完成所有节点间的免密</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeeasy create ssh-keygen <span class="token punctuation">\</span><span class="token parameter variable">--master</span> <span class="token number">192.168</span>.200.10 <span class="token punctuation">\</span> <span class="token comment"># master节点</span><span class="token parameter variable">--worker</span> <span class="token number">192.168</span>.200.20 <span class="token punctuation">\</span> <span class="token comment"># 所有worker节点</span><span class="token parameter variable">--user</span> root <span class="token parameter variable">--password</span> 000000</code></pre><h2 id="二-部署Kubernetes-集群-K8s"><a href="#二-部署Kubernetes-集群-K8s" class="headerlink" title="二.部署Kubernetes 集群(K8s)"></a>二.部署Kubernetes 集群(K8s)</h2><h3 id="1-Kubernetes-集群"><a href="#1-Kubernetes-集群" class="headerlink" title="1.Kubernetes 集群"></a>1.Kubernetes 集群</h3><p>(1) 本次安装的 Kubernetes 版本为 v1.22.1,在 master 节点执行以下命令部署 Kubernetes 集群</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeeasy <span class="token function">install</span> kubernetes <span class="token punctuation">\</span> <span class="token parameter variable">--master</span> <span class="token number">192.168</span>.200.10 <span class="token punctuation">\</span> <span class="token parameter variable">--worker</span> <span class="token number">192.168</span>.200.20 <span class="token punctuation">\</span> <span class="token parameter variable">--user</span> root <span class="token punctuation">\</span> <span class="token parameter variable">--password</span> 000000 <span class="token punctuation">\</span> <span class="token parameter variable">--version</span> <span class="token number">1.22</span>.1 <span class="token punctuation">\</span> <span class="token comment"># Kubernetes 版本，此处只能为 1.22.1</span>--offline-file /opt/kubernetes.tar.gz</code></pre><p>(2) 部署完成后查看集群状态 :<code>kubectl cluster-info</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">Kubernetes control plane is running at https://apiserver.cluster.local:6443 CoreDNS is running at https://apiserver.cluster.local:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy To further debug and diagnose cluster problems, use <span class="token string">'kubectl cluster-info dump'</span><span class="token builtin class-name">.</span><span class="token comment"># 若在node节点无法查看，需要将master节点的.kube发放到node节点</span></code></pre><p>(3) 查看节点负载情况：<code>kubectl top nodes --use-protocol-buffers</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">NAME CPU<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>    CPU%   MEMORY<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>  MEMORY% k8s-master-node1   389m     <span class="token number">4</span>% 6926Mi      <span class="token number">43</span>% k8s-worker-node1   875m    <span class="token number">10</span>% 3365Mi      <span class="token number">21</span>%</code></pre><p>(4) 登录一道云云开发平台</p><p>在浏览器访问<a href="http://master_ip:30080/">http://master_IP:30080</a>, 设置admin用户密码为(00000000),并登录平台</p><p><img src="https://s2.loli.net/2023/09/18/BbUMValjR3ku9Lt.png" alt="容器云登录界面"></p><h2 id="三-部署-KubeVirt-集群"><a href="#三-部署-KubeVirt-集群" class="headerlink" title="三.部署 KubeVirt 集群"></a>三.部署 KubeVirt 集群</h2><p>在 master 节点执行以下命令安装 KubeVirt：</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeeasy <span class="token function">add</span> <span class="token parameter variable">--virt</span> kubevirt</code></pre><p>查看 Pod：</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl <span class="token parameter variable">-n</span> kubevirt get pods</code></pre><p><img src="https://s2.loli.net/2023/09/18/xrPh8TESVvm53lf.png" alt="容器云kubevirt"></p><h2 id="四-部署-Istio"><a href="#四-部署-Istio" class="headerlink" title="四.部署 Istio"></a>四.部署 Istio</h2><p>在 master 节点执行以下命令安装 istio：</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeeasy <span class="token function">add</span> <span class="token parameter variable">--istio</span> istio</code></pre><p>查看Pod</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl <span class="token parameter variable">-n</span> istio-system get pods</code></pre><p><img src="https://s2.loli.net/2023/09/18/AmwMRazQcH9EIq7.png" alt="容器云istio"></p><p>查看 Istio 版本信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash">istioctl version<span class="token comment"># 结果如下</span>client version: <span class="token number">1.12</span>.0 control plane version: <span class="token number">1.12</span>.0 data plane version: <span class="token number">1.12</span>.0 <span class="token punctuation">(</span><span class="token number">2</span> proxies<span class="token punctuation">)</span></code></pre><p>相关的可视化界面</p><pre class="language-none"><code class="language-none">Grafans http://master_ip:33000Prometheus http://master_ip:30090Jaeger http://master_ip:30686kiali  http://master_ip:200001</code></pre><h2 id="五-部署Harbor仓库"><a href="#五-部署Harbor仓库" class="headerlink" title="五.部署Harbor仓库"></a>五.部署Harbor仓库</h2><pre class="language-bash" data-language="bash"><code class="language-bash">kubeeasy <span class="token function">add</span> <span class="token parameter variable">--registry</span> harbor</code></pre><p>部署完成后查看 Harbor 仓库状态</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl status harbor</code></pre><p>在浏览器通过<a href="http://master_ip/">http://master_ip</a> 访问harbor 管理员账户(admin/Harbor12345)</p><p>到此，搭建完成</p><h2 id="六-基础运维"><a href="#六-基础运维" class="headerlink" title="六.基础运维"></a>六.基础运维</h2><h3 id="1-重置集群"><a href="#1-重置集群" class="headerlink" title="1.重置集群"></a>1.重置集群</h3><p>若集群部署失败或出现故障，可重置集群重新部署，重置命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeeasy reset  <span class="token comment">#重置完成后,从安装依赖重新开始</span></code></pre><h3 id="2-添加节点"><a href="#2-添加节点" class="headerlink" title="2.添加节点"></a>2.添加节点</h3><p>(1)在 master 节点执行以下命令,给新节点安装依赖包：</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeeasy <span class="token function">install</span> depend <span class="token punctuation">\</span><span class="token parameter variable">--host</span> <span class="token number">10.24</span>.2.12 <span class="token punctuation">\</span> <span class="token comment"># 10.24.2.12 为新增节点的 IP 地址</span><span class="token parameter variable">--user</span> root <span class="token punctuation">\</span> <span class="token parameter variable">--password</span> 000000 <span class="token punctuation">\</span> --offline-file /opt/dependencies/base-rpms.tar.gz</code></pre><p>(2)在 master 节点执行以下命令,将新节点加入集群：</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeeasy <span class="token function">add</span> <span class="token punctuation">\</span> <span class="token parameter variable">--worker</span> <span class="token number">10.24</span>.2.12<span class="token punctuation">\</span> <span class="token comment"># 10.24.2.12 为新增节点的 IP 地址</span><span class="token parameter variable">--user</span> root <span class="token punctuation">\</span> <span class="token parameter variable">--password</span> 000000 <span class="token punctuation">\</span> --offline-file /opt/kubernetes.tar.gz</code></pre>]]></content>
      
      
      <categories>
          
          <category> deploy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Deploy </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ优化</title>
      <link href="/2023/02/06/rabbitmq-de-you-hua/"/>
      <url>/2023/02/06/rabbitmq-de-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ的优化"><a href="#RabbitMQ的优化" class="headerlink" title="RabbitMQ的优化"></a>RabbitMQ的优化</h2><p>在上面的文章中可以看到，RabbitMQ的连接数是压垮消息队列的一个重要的指标。所以在平时使用OpenStack平台的过程中，如果大量的用户同时创建虚拟机，会导致云平台创建报错，其实就是消息队列服务的崩溃。</p><p>在优化方面，我们首先想到，是将RabbitMQ服务默认的连接数量改大，修改方法如下：</p><h3 id="（1）系统级别修改"><a href="#（1）系统级别修改" class="headerlink" title="（1）系统级别修改"></a>（1）系统级别修改</h3><p>使用CRT等远程工具连接到controller节点，然后修改配置文件，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/sysctl.conf</span>fs.file-max<span class="token operator">=</span><span class="token number">10240</span><span class="token comment">#在sysctl.conf文件的最下方添加一行fs.file-max=10240</span></code></pre><p>修改完毕后保存退出并生效配置，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>fs.file-max <span class="token operator">=</span> <span class="token number">10240</span></code></pre><h3 id="（2）用户级别修改"><a href="#（2）用户级别修改" class="headerlink" title="（2）用户级别修改"></a>（2）用户级别修改</h3><p>用户级别修改，编辑/etc/security/limits.conf配置文件，具体命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/security/limits.conf</span>openstack  soft     nofile  <span class="token number">10240</span>openstack  hard     nofile  <span class="token number">10240</span><span class="token comment">#在配置文件的最后添加两行内容如上</span></code></pre><p>修改完之后，保存退出。</p><h3 id="（3）修改RabbitMQ配置"><a href="#（3）修改RabbitMQ配置" class="headerlink" title="（3）修改RabbitMQ配置"></a>（3）修改RabbitMQ配置</h3><p>修改RabbitMQ服务的service配置文件rabbitmq-server.service，具体命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi /usr/lib/systemd/system/rabbitmq-server.service</span><span class="token comment">#在[Service]下添加一行参数如下：</span><span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">10240</span></code></pre><h3 id="（4）重启RabbitMQ服务"><a href="#（4）重启RabbitMQ服务" class="headerlink" title="（4）重启RabbitMQ服务"></a>（4）重启RabbitMQ服务</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart rabbitmq-server</span></code></pre><p>重启完毕后，查看RabbitMQ的最大连接数，命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># rabbitmqctl status</span>Status of <span class="token function">node</span> rabbit@openstack<span class="token punctuation">..</span>.忽略输出<span class="token punctuation">..</span>. <span class="token punctuation">{</span>file_descriptors,     <span class="token punctuation">[</span><span class="token punctuation">{</span>total_limit,10140<span class="token punctuation">}</span>,      <span class="token punctuation">{</span>total_used,53<span class="token punctuation">}</span>,      <span class="token punctuation">{</span>sockets_limit,9124<span class="token punctuation">}</span>,      <span class="token punctuation">{</span>sockets_used,51<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>,</code></pre><p>可以看到当前的RabbitMQ已被修改。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pxe+kickstart 无人值守安装centos7</title>
      <link href="/2022/12/24/pxe-kickstart-wu-ren-zhi-shou-xi-tong-an-zhuang/"/>
      <url>/2022/12/24/pxe-kickstart-wu-ren-zhi-shou-xi-tong-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Pxe-kickstart-无人值守安装centos7"><a href="#Pxe-kickstart-无人值守安装centos7" class="headerlink" title="Pxe+kickstart 无人值守安装centos7"></a>Pxe+kickstart 无人值守安装centos7</h1><h2 id="1、关闭服务端防火墙及selinux并设置主机名"><a href="#1、关闭服务端防火墙及selinux并设置主机名" class="headerlink" title="1、关闭服务端防火墙及selinux并设置主机名"></a>1、关闭服务端防火墙及selinux并设置主机名</h2><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl disable firewalld <span class="token parameter variable">--now</span>setenforce <span class="token number">0</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> ‘s/SELINUX<span class="token operator">=</span>enforcing/SELINUX<span class="token operator">=</span>disabled/g’ /etc/selinux/confighostnamcectl set-hostname server<span class="token builtin class-name">logout</span></code></pre><h2 id="2、配置本地yum源并安装http服务"><a href="#2、配置本地yum源并安装http服务" class="headerlink" title="2、配置本地yum源并安装http服务"></a>2、配置本地yum源并安装http服务</h2><h5 id="1-安装http服务并创建镜像文件存放文件夹"><a href="#1-安装http服务并创建镜像文件存放文件夹" class="headerlink" title="1)安装http服务并创建镜像文件存放文件夹"></a>1)安装http服务并创建镜像文件存放文件夹</h5><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> httpd <span class="token parameter variable">-y</span><span class="token function">mkdir</span> /var/www/html/pub</code></pre><h5 id="2-挂载centos7-9-的ISO镜像到mnt目录下"><a href="#2-挂载centos7-9-的ISO镜像到mnt目录下" class="headerlink" title="2)挂载centos7.9 的ISO镜像到mnt目录下"></a>2)挂载centos7.9 的ISO镜像到mnt目录下</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> CentOS-7-x86_64-Everything-2009.iso /mnt</code></pre><h5 id="3-复制centos7-9镜像文件到-var-www-html-pub-目录下"><a href="#3-复制centos7-9镜像文件到-var-www-html-pub-目录下" class="headerlink" title="3)复制centos7.9镜像文件到 var/www/html/pub/目录下"></a>3)复制centos7.9镜像文件到 var/www/html/pub/目录下</h5> <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> /mnt/* /var/www/html/pub/</code></pre><h5 id="4-创建yum文件备份目录"><a href="#4-创建yum文件备份目录" class="headerlink" title="4)创建yum文件备份目录"></a>4)创建yum文件备份目录</h5> <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /etc/yum.repos.d/bak</code></pre><h5 id="5-移动原yum文件到备份文件夹"><a href="#5-移动原yum文件到备份文件夹" class="headerlink" title="5)移动原yum文件到备份文件夹"></a>5)移动原yum文件到备份文件夹</h5> <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /etc/yum.repo.d/* /etc/yum.repo.d/bak/</code></pre><h5 id="6-创建yum文件"><a href="#6-创建yum文件" class="headerlink" title="6)创建yum文件"></a>6)创建yum文件</h5> <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF<span class="token operator">&gt;</span> /etc/yum.repo.d/local.repo<span class="token punctuation">[</span>development<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>centos<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///var/www/html/pub/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enalbed</span><span class="token operator">=</span><span class="token number">1</span>EOFyum repolist</code></pre><h2 id="3、安装并配置DHCP服务"><a href="#3、安装并配置DHCP服务" class="headerlink" title="3、安装并配置DHCP服务"></a>3、安装并配置DHCP服务</h2><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> dhcp <span class="token parameter variable">-y</span><span class="token punctuation">\</span>cp /usr/share/doc/dhcp-4.2.5/dhcpd.conf.example /etc/dhcp/dhcpd.conf</code></pre><h5 id="1-打开DHCP配置文件并配置服务"><a href="#1-打开DHCP配置文件并配置服务" class="headerlink" title="1)打开DHCP配置文件并配置服务"></a>1)打开DHCP配置文件并配置服务</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/dhcp/dhcpd.conf next-server <span class="token number">192.168</span>.100.60<span class="token punctuation">;</span> <span class="token comment">#tftp服务端地址</span>filename <span class="token string">"/pxelinux.0"</span><span class="token punctuation">;</span>   </code></pre><p><img src="https://s2.loli.net/2023/09/11/A2c743BSyquLbEr.png" alt="dhcp配置"></p> <pre class="language-bash" data-language="bash"><code class="language-bash">subnet <span class="token number">192.168</span>.100.0 netmask <span class="token number">255.255</span>.255.0 <span class="token punctuation">{</span> range <span class="token number">192.168</span>.100.61 <span class="token number">192.168</span>.100.71<span class="token punctuation">;</span> option domain-name-servers <span class="token number">8.8</span>.8.8<span class="token punctuation">;</span> option domain-name <span class="token string">"server.com"</span><span class="token punctuation">;</span> option routers <span class="token number">192.168</span>.100.1<span class="token punctuation">;</span> option broadcast-address <span class="token number">192.168</span>.100.255<span class="token punctuation">;</span> default-lease-time <span class="token number">600</span><span class="token punctuation">;</span> max-lease-time <span class="token number">7200</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://s2.loli.net/2023/09/11/qNtRWrEQchaUVz9.png" alt="DHCP配置"></p><h2 id="4、安装xinetd-tftp-服务"><a href="#4、安装xinetd-tftp-服务" class="headerlink" title="4、安装xinetd tftp 服务"></a>4、安装xinetd tftp 服务</h2><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> xinetd tftp tftp-server <span class="token parameter variable">-y</span></code></pre><h5 id="1-配置TFTP"><a href="#1-配置TFTP" class="headerlink" title="1)配置TFTP"></a>1)配置TFTP</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/xinetd.d/tftp</code></pre><p><img src="https://s2.loli.net/2023/09/11/dyYpXvfkJCOGWqw.png" alt="tftp配置"></p><p>将服务将入开机启动</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> xinetd tftp</code></pre><h2 id="5、获取pxelinux-0文件并将文件放到tfpt根目录"><a href="#5、获取pxelinux-0文件并将文件放到tfpt根目录" class="headerlink" title="5、获取pxelinux.0文件并将文件放到tfpt根目录"></a>5、获取pxelinux.0文件并将文件放到tfpt根目录</h2><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> syslinux <span class="token parameter variable">-y</span><span class="token function">cp</span> /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/</code></pre><h2 id="6、创建启动项文件目录"><a href="#6、创建启动项文件目录" class="headerlink" title="6、创建启动项文件目录"></a>6、创建启动项文件目录</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /var/lib/tftpboot/pxelinux.cfg</code></pre><h2 id="7、复制配置文件到tftp工作目录"><a href="#7、复制配置文件到tftp工作目录" class="headerlink" title="7、复制配置文件到tftp工作目录"></a>7、复制配置文件到tftp工作目录</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /var/www/html/pub/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default<span class="token function">cp</span> /var/www/html/pub/isolinux/* /var/lib/tftpboot/</code></pre><h5 id="1-重启xinetd、tftp服务进入客户端可以看见以下界面"><a href="#1-重启xinetd、tftp服务进入客户端可以看见以下界面" class="headerlink" title="1)重启xinetd、tftp服务进入客户端可以看见以下界面"></a>1)重启xinetd、tftp服务进入客户端可以看见以下界面</h5><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl restart xinetd.service tftp.socket</code></pre><p><img src="https://s2.loli.net/2023/09/11/riR8a7w2IyNC693.png" alt="重启tftp、xinetd"></p><h2 id="8、搭建网络安装源"><a href="#8、搭建网络安装源" class="headerlink" title="8、搭建网络安装源"></a>8、搭建网络安装源</h2><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> httpd <span class="token parameter variable">-y</span>systemctl start httpdsystemctl <span class="token builtin class-name">enable</span> httpd</code></pre><p>此时可在浏览器输入  http://本机ip/pub 测试httpd服务是否正常运行</p><p><img src="https://s2.loli.net/2023/09/11/vQORurmH8NB1wTy.png" alt="浏览器访问"></p><h2 id="9、创建yum源，为kickstart作准备"><a href="#9、创建yum源，为kickstart作准备" class="headerlink" title="9、创建yum源，为kickstart作准备"></a>9、创建yum源，为kickstart作准备</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF<span class="token operator">&gt;</span> /etc/yum.repos.d/pxe.repo<span class="token punctuation">[</span>development<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>pxe<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://192.168.100.60/pub<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span>EOFyum repolist</code></pre><h2 id="10、安装kickstart并制作安装脚本"><a href="#10、安装kickstart并制作安装脚本" class="headerlink" title="10、安装kickstart并制作安装脚本"></a>10、安装kickstart并制作安装脚本</h2><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> system-config-kickstart <span class="token parameter variable">-y</span>system-config-kickstart</code></pre><p><img src="https://s2.loli.net/2023/09/11/6iXvRSMYsuVgHxJ.png" alt="kick-基本配置.png"></p><p><img src="https://s2.loli.net/2023/09/11/xeHTfo8VWcCIULd.png" alt="kick-安装方法.png"></p><p><img src="https://s2.loli.net/2023/09/11/wnQgyTOZefj1JAh.png" alt="kick-引导装载程序选项.png"></p><p><img src="https://s2.loli.net/2023/09/11/r8Bv3YAJaQEPdwG.png" alt="kick-分区信息.png"></p><p><img src="https://s2.loli.net/2023/09/11/9kSsGYcgNQeDH2r.png" alt="kick-分区选项_swap_.png"></p><p><img src="https://s2.loli.net/2023/09/11/Q6P1qZVoz5cjNY7.png" alt="kick-分区信息_boot_.png"></p><p><img src="https://s2.loli.net/2023/09/11/Nn5P8CDeAimkyYg.png" alt="kick-分区信息_根目录_.png"></p><p><img src="https://s2.loli.net/2023/09/11/C9OjRLlXZpGa4cq.png" alt="kick-网络配置.png"></p><p><img src="https://s2.loli.net/2023/09/11/SuhmUyTOZfcowXx.png" alt="kick-防火墙配置.png"></p><p><img src="https://s2.loli.net/2023/09/11/5k8ojbKYATRUrIt.png" alt="kick-软件包选择.png"></p><p><img src="https://s2.loli.net/2023/09/11/JayxlAVj5wncCR6.png" alt="kick-保存.png"></p><p><img src="https://s2.loli.net/2023/09/11/2r1Ftw3McnTVmfY.png" alt="kick-配置文件命名.png"></p><p>最后选择脚本保存位置及脚本名称</p><h2 id="11、创建ks文件网站目录并放入文件"><a href="#11、创建ks文件网站目录并放入文件" class="headerlink" title="11、创建ks文件网站目录并放入文件"></a>11、创建ks文件网站目录并放入文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /var/www/html/ks<span class="token function">cp</span> ~/ks7.9small.cfg /var/www/html/ks/</code></pre><h2 id="12、更改配置文件并放入tftp根目录下启动文件文件夹"><a href="#12、更改配置文件并放入tftp根目录下启动文件文件夹" class="headerlink" title="12、更改配置文件并放入tftp根目录下启动文件文件夹"></a>12、更改配置文件并放入tftp根目录下启动文件文件夹</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/tftpboot/pxelinux.cfg/default</code></pre><p>大概在61至70行 更改配置文件</p><p><img src="https://s2.loli.net/2023/09/11/U1eszI7JXYL4rSu.png" alt="更改pxelinux.cfg配置文件1.png"></p><p>删除66至70行 在62至64行内添加menu default</p><p>并更改65行</p><p><img src="https://s2.loli.net/2023/09/11/G9y7czeBRZoNFIH.png" alt="更改pxelinux.cfg配置文件2.png"></p><h2 id="13、验证是否可用"><a href="#13、验证是否可用" class="headerlink" title="13、验证是否可用"></a>13、验证是否可用</h2><p>重启客户端可看到如下界面，无需操作，由脚本进行自动安装</p><p><img src="https://s2.loli.net/2023/09/11/w4szd1B3h2kTjJ8.png" alt="验证开机.png"></p><p><img src="https://s2.loli.net/2023/09/11/O6bxpmk8yeXtMQ4.png" alt="验证安装.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> deploy </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes Help</title>
      <link href="/2022/11/20/kubernetes-help/"/>
      <url>/2022/11/20/kubernetes-help/</url>
      
        <content type="html"><![CDATA[<h2 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h2><h3 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h3><pre class="language-none"><code class="language-none">missing缺少 invalid无限的 scheduler调度器 unauthenticated未认证 exist存在 already已经 weight权重 match匹配 limit限制 resource资源 ratio比率 duplicate重复 rule规则 role角色 policy策略 support支持 got获取，得到 expect期望 parameters参数 provisioner提供者  annotation 注释 unknow未知 forbidden禁止 storage存储 quota限额 available可用的 guaranteed保障 Qos服务质量</code></pre><h4 id="命名空间删除"><a href="#命名空间删除" class="headerlink" title="命名空间删除"></a>命名空间删除</h4><h5 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h5><p><strong>删除命名空间时命名空间状态一直为Terminating，加上–force也删除不了</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get ns logging <span class="token parameter variable">-o</span> json <span class="token operator">&gt;</span> tmp.jsonkubectl proxy新打开一个终端,进入到tmp.json文件所在目录<span class="token function">curl</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token parameter variable">-X</span> PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/logging/finalize</code></pre><h5 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h5><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get ns <span class="token comment">#查看命名空间</span>kubectl get ns logging <span class="token parameter variable">-o</span> json <span class="token operator">&gt;</span> tmp.json<span class="token function">cat</span> ./tmp.json <span class="token operator">|</span> jq <span class="token string">'del(.spec.finalizers[])'</span> <span class="token operator">&gt;</span> modify.jsonkubectl replace <span class="token parameter variable">--raw</span> <span class="token string">"/api/v1/namespaces/logging/finalize"</span> <span class="token parameter variable">-f</span> ./modify.json<span class="token function">rm</span> <span class="token parameter variable">-rf</span> tmp.json modify.json</code></pre><h2 id="K8s-CRD资源一直Terminating删除不掉"><a href="#K8s-CRD资源一直Terminating删除不掉" class="headerlink" title="K8s CRD资源一直Terminating删除不掉"></a>K8s CRD资源一直Terminating删除不掉</h2><p><strong>一种方案（推荐）</strong></p><p>如果之前因为某些原因使得CRD资源一直Terminating，再用kubectl delete crd也显示XXX deleted，然后就卡住了，也删不掉，用如下命令更新该资源的配置：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">kubectl patch crd<span class="token operator">/</span>installations<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token punctuation">.</span>tigera<span class="token punctuation">.</span>io <span class="token operator">-</span>p <span class="token char">'{"metadata":{"finalizers":[]}}'</span> <span class="token operator">--</span>type<span class="token operator">=</span>merge</code></pre><p>其实就是修改其metaddata下finalizers的值为空就可以了。</p><p>类似的，如果不是CRD，是其他资源类型，如pod、deploy、namespaces等，都可以把其finalizers的值改成空的就可以了。</p><h3 id="kubectl命令行操作"><a href="#kubectl命令行操作" class="headerlink" title="kubectl命令行操作"></a>kubectl命令行操作</h3> <pre class="language-bash" data-language="bash"><code class="language-bash">kubectl explain pod <span class="token comment">#查看pod的yaml文件具体参数示例</span>kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>pod<span class="token operator">&gt;</span> <span class="token function">bash</span> <span class="token comment">#以bash命令行登录到某pod</span>kubectl label nodes k8s-master-node1 <span class="token assign-left variable">exam</span><span class="token operator">=</span>chinaskill <span class="token comment">#给k8s-master-node1节点打上exam=chinaskill的标签</span>kubectl taint nodes k8s-master-node1 node-role.kubernetes/master:NoExecute <span class="token comment">#设置k8s-master-node1节点为污点</span>kubectl taint nodes k8s-master-node1 node-role.kubernetes/master- <span class="token comment">#删除污点</span>kubectl apply <span class="token parameter variable">-f</span> <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span> <span class="token comment">#应用文件配置</span>kubectll scale deployment nginx-deployment <span class="token parameter variable">--replicas</span><span class="token operator">=</span><span class="token number">5</span> <span class="token comment">#扩容pod的副本数量至5</span></code></pre><h2 id="第一套"><a href="#第一套" class="headerlink" title="第一套"></a>第一套</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#检测pod是否健康</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/httpd    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>      <span class="token key atrule">postStart</span><span class="token punctuation">:</span>        <span class="token key atrule">exec</span><span class="token punctuation">:</span>          <span class="token key atrule">command</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> /bin/sh          <span class="token punctuation">-</span> <span class="token punctuation">-</span>c          <span class="token punctuation">-</span> <span class="token string">'echo Healty &gt; /usr/local/apache2/htdocs/healthz'</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> cat         <span class="token punctuation">-</span> /usr/local/apache2/htdocs/healthz      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">15</span>      <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">1</span></code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/httpd    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">args</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /bin/sh      <span class="token punctuation">-</span> <span class="token punctuation">-</span>c      <span class="token punctuation">-</span> echo ok <span class="token punctuation">&gt;</span> /tmp/health; sleep 10; rm <span class="token punctuation">-</span>rf /tmp/health; sleep 600      <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> cat         <span class="token punctuation">-</span> /usr/local/apache2/htdocs/healthz      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">15</span>      <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">1</span></code></pre><p>4、为master节点打上标签“disktype=ssd”和标签“exam=chinaskill”，然后在master节点/root目录下编写YAML文件deployment.yaml创建Deployment，具体要求如下：</p><p>​（1）Deployment名称：nginx-deployment;</p><p>​（2）要求Pod只能调度到具有标签“disktype=ssd”的节点上；</p><p>​（3）具有标签“exam=chinaskill”的节点优先被调度。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#设置亲和度，选择pod在哪个节点运行</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> deployment<span class="token punctuation">-</span>httpd<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> httpd  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>httpd      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> httpd    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/httpd      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>        <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>           <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>            <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> disktype                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                <span class="token key atrule">values</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> ssd          <span class="token key atrule">preferredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token key atrule">preference</span><span class="token punctuation">:</span>               <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> exam                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                 <span class="token key atrule">values</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> chinaskill</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221122174142192.png" alt="image-20221122174142192"></p><p>3、master 节点/root 目求编与YAML 文件 limitrange.yaml ，具体要求如下:<br>    （1）LimitRange 名称: mem-limit-range;<br>    （2）命名空间：default;<br>    （3）容器默认资源请求为 256Mi内存、500m-CPU;<br>    （4）器资源请求上限为 800Mi 内存、3000mCPU;<br>    （5）内存和CPU超售的比率均为 2。<br>完成后使用该 yaml 文件创建 LimitRange.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange<span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mem<span class="token punctuation">-</span>limit<span class="token punctuation">-</span>range <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">max</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 3000m      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 800Mi    <span class="token key atrule">maxLimitRequestRatio</span><span class="token punctuation">:</span>       <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">defaultRequest</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 256Mi    <span class="token key atrule">type</span><span class="token punctuation">:</span> Container <span class="token comment">#注意资源类型首字母大写</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221122185146176.png" alt="image-20221122185146176"></p><p>5、在master节点/root目录下编写YAML文件role.yaml文件创建集群角色，具体要求如下：</p><p>​（1）集群角色名称：deployment-clusterrole；</p><p>​（2）该角色拥有对Deployment，Daemonset，StatefulSet的创建权限。</p><p>完成后使用该YAML文件创建角色。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> deployment<span class="token punctuation">-</span>cluterrole<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Delpoyment"</span><span class="token punctuation">,</span><span class="token string">"Daemonset"</span><span class="token punctuation">,</span><span class="token string">"StatefulSet"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"create"</span><span class="token punctuation">]</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221123130453429.png" alt="image-20221123130453429"></p><p>6、在master节点/root目录下编写YAML文件network.yaml文件创建网络策略，具体要求如下：</p><p>​（1）网络策略名称：exam-network；</p><p>​（2）针对namespace-test下的Pod，只允许相同namespace下的Pod访问，并且可访问Pod的9000端口。</p><p>完成后使用该YAML文件创建网络策略。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token punctuation">-</span>network  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>  <span class="token key atrule">ingress</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">podSelector</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP <span class="token comment">#协议名称注意大写</span>      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9000</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221123133655016.png" alt="image-20221123133655016"></p><p>7、在master节点/root目录下编写YAML文件pv.yaml创建PV，具体要求如下：</p><p>​（1）PV名称：app-pv；</p><p>​（2）容量为10Gi；</p><p>​（3）访问模式为ReadWriteMany;</p><p>​（4）volume的类型为hostPath，位置为/src/app-config。</p><p>完成后使用该YAML文件创建PV。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> app<span class="token punctuation">-</span>pv<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span>  /src/app<span class="token punctuation">-</span>config  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10Gi</code></pre><h2 id="第二套"><a href="#第二套" class="headerlink" title="第二套"></a>第二套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221123144552782.png" alt="image-20221123144552782"></p><p>1、默认情况下，Pod会占用所有可用计算资源，请设置为系统守护进程kube-reserverd和system-reserverd预留500mCPU、1Gimemory和1Giephemeral-storage计算资源。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">vim /var/lib/kubelet/config.yaml...<span class="token key atrule">enforceNodeAllocatable</span><span class="token punctuation">:</span><span class="token punctuation">-</span> pods<span class="token key atrule">kubeReserved</span><span class="token punctuation">:</span>  <span class="token comment">#配置kube预留资源</span>  <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m  <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi  <span class="token key atrule">ephemeral-storage</span><span class="token punctuation">:</span> 1Gi<span class="token key atrule">systemReserved</span><span class="token punctuation">:</span>  <span class="token comment">#配置系统预留资源</span>  <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m  <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi  <span class="token key atrule">ephemeral-storage</span><span class="token punctuation">:</span> 1Gi</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221123155837058.png" alt="image-20221123155837058"></p><p>2、在master节点/root目录下编写YAML文件init-pod.yaml创建Pod，具体要求如下：</p><p>​（1）Pod名称：nginx；</p><p>​（2）镜像：busybox；</p><p>​（3）添加一个Init-Container，Init-Container的作用是创建一个空文件；</p><p>​（4）Pod的Container判断文件是否存在，不存在则退出。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"touch /var/myfile"</span><span class="token punctuation">]</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> html      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"ls /var/myfile &amp;&amp; sleep 360 || exit 1"</span><span class="token punctuation">]</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> html      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> html    <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124133755732.png" alt="image-20221124133755732"></p><p>3、在master节点/root目录下编写YAML文件创建Pod，具体要求如下：</p><p>​（1）Pod名称：exam;</p><p>​（2）镜像：nginx;</p><p>​（3）Volume名称为cache-volume，将起/data目录改在到宿主机/data目录下。</p><p>完成后使用该YAML文件创建Pod。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>volume    <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>       <span class="token key atrule">path</span><span class="token punctuation">:</span> /data</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124135506134.png" alt="image-20221124135506134"></p><p>4、在master节点/root目录下编写YAML文件nginx-deployment.yaml创建Deployment，具体要求如下：</p><p>​（1）Deployment名称：nginx;</p><p>​（2）保证其副本在每个节点上运行，且不覆盖节点原有的Tolerations。</p><p>完成后使用该YAML文件创建Deployment。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> DaemonSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124142107438.png" alt="image-20221124142107438"></p><p>5、在master节点/root目录下编写YAML文件nginx-service.yaml为上一题的Deployment创建一个Service，具体要求如下：</p><p>​（1）Service名称：nginx;</p><p>​（2）以ClusterIP方式访问服务;</p><p>完成后使用该YAML文件创建Service。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP  <span class="token comment">#注意协议名大写</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP </code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124150657756.png" alt="image-20221124150657756"></p><p>6、在master节点/root目录下编写YAML文件quota.yaml创建StorageQuota，具体要求如下：</p><p>​（1）StorageQuota名称：storageqyota;</p><p>​（2）限制命名空间exam的PVC数目为10;</p><p>​（3）限制命名空间exam累计存储容量为20Gi;</p><p>完成后使用该YAML文件创建StorageQuota。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> storagequota  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> exam<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hard</span><span class="token punctuation">:</span>    <span class="token key atrule">persistentvolumeclaims</span><span class="token punctuation">:</span> <span class="token string">"10"</span>    <span class="token key atrule">requests.storage</span><span class="token punctuation">:</span> <span class="token string">"20Gi"</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124153142074.png" alt="image-20221124153142074"></p><p>7、在master节点/root目录下编写YAML文件pv.yaml创建PV，具体要求如下：</p><p>​（1）PV名称：pv-loval;</p><p>​（2）回收策略：Delete;</p><p>​（3）访问模式：RWO;</p><p>​（4）挂载路径：node节点/data/k8s/localpv;</p><p>​（5）卷容量：5G;</p><p>完成后使用该YAML文件创建pv。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pv<span class="token punctuation">-</span>local<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /data/k8s/localpv  <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>    <span class="token key atrule">required</span><span class="token punctuation">:</span>      <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> worker          <span class="token key atrule">operator</span><span class="token punctuation">:</span> In          <span class="token key atrule">values</span><span class="token punctuation">:</span>           <span class="token punctuation">-</span> node1   <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Delete  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 5Gi</code></pre><h2 id="第三套"><a href="#第三套" class="headerlink" title="第三套"></a>第三套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124172226238.png" alt="image-20221124172226238"></p><p>1、配置集群节点，要求节点可用内存低于500Mi时，kubelet开始驱逐节点上的Pods。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/kubelet/config.yaml<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>eviction-hard<span class="token operator">=</span>memory.available<span class="token operator">&lt;</span>500M</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124172941759.png" alt="image-20221124172941759"></p><p>2、在master节点/root目录下编写YAML文件deployment.yaml创建Deployment，具体要求如下：</p><p>​（1）Deployment名称：nginx-app;</p><p>​（2）包含3个副本;</p><p>​（3）镜像使用nginx:1.11.9;</p><p>完成后使用该YAML文件创建Deployment，然后通过滚动升级的方式更新镜像版本为1.12.0，并记录这个更新，最后，回滚该更新到之前的1.11.9版本。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> httpd  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span>      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>       <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> httpd    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/httpd        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>                kubectl apply <span class="token punctuation">-</span>f deployment<span class="token punctuation">-</span>roll.yaml <span class="token punctuation">-</span><span class="token punctuation">-</span>record <span class="token comment">#记录命令</span>kubectl rollout history deployment httpd  <span class="token comment">#查看是否记录命令</span>kubectl set image <span class="token punctuation">-</span>f deployment<span class="token punctuation">-</span>roll.yaml httpd=192.168.10.131/library/httpd<span class="token punctuation">:</span>v1.2.3 <span class="token comment">#设置更新镜像版本，由于没有新版本镜像这里镜像版本随意填写</span>kubectl rollout undo deployment httpd <span class="token punctuation">-</span><span class="token punctuation">-</span>to<span class="token punctuation">-</span>revision=1 <span class="token comment">#回滚pod版本到第一版本</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124220513968.png" alt="image-20221124220513968"></p><p>3、在master节点/root目录下编写YAML文件ns.yaml创建命名空间，具体要求如下：</p><p>​（1）命名空间名称：default-cpu-example;</p><p>​（2）该namespace内容器默认的CPU请求500m，CPU请求限制为2000m;</p><p>完成后使用该YAML文件创建命名空间。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>cpu<span class="token punctuation">-</span>example<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> cpu<span class="token punctuation">-</span>limitrange  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>cpu<span class="token punctuation">-</span>example<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">max</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 2000m    <span class="token key atrule">defaultRequest</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m    <span class="token key atrule">type</span><span class="token punctuation">:</span> Container <span class="token comment">###注意添加类型</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124222646547.png" alt="image-20221124222646547"></p><p>4．在master节点／root目录下编写YAML文件pod．yaml创建Pod，具体要求如下：</p><p>（1）Pod名称：nginx；</p><p>（2）镜像：nginx：latest；</p><p>（3）要求该Pod以Guaranteed·QoS类运行，其requests值等于limits值．</p><p>完成后使用该YAML文件创建Pod.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">limits</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi      <span class="token key atrule">requests</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125134737941.png"><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125140927622.png" alt="image-20221125140927622"></p><p>5．在master节点／root目录下编写YAML文件cronjobyaml 创建的CronJob，具体要求如下：</p><p>（1）Cronjob名称：cronjob； </p><p>（2）镜像：busybox；</p><p>（3）要求该CronJob的．spec·配置文件每分钟打印出当前时间信息．完成后使用该YAML 文件创建 Cronjob.</p><pre class="language-none"><code class="language-none">＊：表示匹配该域的任意值，假如在Minutes域使用＊，则表示每分钟都会触发事件。 o／：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域设置为5／20， 则意味着第1次触发在第5min时，接下来每20min触发一次，将在第25min、第45min 等时刻分别触发。比如，我们要每隔1min执行一次任务，则Cron表达式如下：*/1****</code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> batch/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> CronJob<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> cronjob<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">schedule</span><span class="token punctuation">:</span> <span class="token string">"*/1 * * * *"</span>   <span class="token key atrule">jobTemplate</span><span class="token punctuation">:</span>    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">template</span><span class="token punctuation">:</span>        <span class="token key atrule">spec</span><span class="token punctuation">:</span>          <span class="token key atrule">containers</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cronjob<span class="token punctuation">-</span>pod            <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/busybox            <span class="token key atrule">args</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> bin/sh            <span class="token punctuation">-</span> <span class="token punctuation">-</span>c            <span class="token punctuation">-</span> data;          <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> OnFailure</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125141150591.png" alt="image-20221125141150591"></p><p>6．在master节点／root目录下编写YAML文件pod-host．yaml创建Pod，具体要求如下： </p><p>（1）Pod 名称：hostaliases-pod；</p><p>（2）为该Pod配置HostAliases，向hosts文件添加额外的条目，将foo.remote、bar.remote解析为127.0.0.1，将foo．remote、bar．remote解析为10.1.2.3．</p><p>完成后使用该YAML文件创建Pod.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> hostaliases<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>hostaliases    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx  <span class="token key atrule">hostAliases</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span>    <span class="token key atrule">hostnames</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"foo.local"</span>    <span class="token punctuation">-</span> <span class="token string">"bar.local"</span>  <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"10.1.2.3"</span>    <span class="token key atrule">hostnames</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"foo.remote"</span>    <span class="token punctuation">-</span> <span class="token string">"bar.remote"</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125143252306.png" alt="image-20221125143252306"></p><p>7．在master节点／root目录下编写YAML文件 clusterrole.yaml 创建 ClusterRole，具体要求如下：</p><p>（1）ClusterRole名称：secret-reader； </p><p>（2）对Secret 拥有get、watch、list的权限； </p><p>（3）对Pod和Deployment拥有create、delete、update的权限。</p><p>完成后使用该YAML 文件创建ClusterRole.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> secret<span class="token punctuation">-</span>reader<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Pod"</span><span class="token punctuation">,</span><span class="token string">"Deployment"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"create"</span><span class="token punctuation">,</span><span class="token string">"delete"</span><span class="token punctuation">,</span><span class="token string">"update"</span><span class="token punctuation">]</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Secret"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"watch"</span><span class="token punctuation">,</span><span class="token string">"list"</span><span class="token punctuation">]</span></code></pre><h2 id="第四套"><a href="#第四套" class="headerlink" title="第四套"></a>第四套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125144142490.png" alt="image-20221125144142490"></p><p>1．为master节点打上“app=exam”标签，并将其调度策略设置为PreferNoSchedule。</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl label nodes k8s-master-node1 <span class="token assign-left variable">app</span><span class="token operator">=</span>examkubectl taint <span class="token function">node</span> k8s-master-node1 node-role.kubernetes.io/master<span class="token operator">=</span>:PreferNoSchedule</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125144158988.png" alt="image-20221125144158988"></p><p>2．在master节点／root目录下编写YAML文件deployment．yamml，具体要求如下： </p><p>（1）Deployment 名称：nginx；</p><p>（2）镜像：nginx：latest；</p><p>（3）指定其Pod调度到有“app＝exma”标签的节点上．完成后使用该YAML文件创建 Deployment.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>nodeselector        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> exam</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125144213171.png" alt="image-20221125144213171"></p><p>3．在master节点／root目录下编写YAML文件service．yaml，具体要求如下：</p><p>（1）Service名称：nginx-service；</p><p>（2）关联名为nginx的Deployment；</p><p>（3）以NodePort方式将其80端口对外暴露为30080．</p><p>完成后使用该YAML文件创建 Service.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>service<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30089</span> <span class="token comment">#由于30080端口已经有服务占用这里改一下端口号</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP     <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125144224805.png" alt="image-20221125144224805"></p><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125155318523.png" alt="image-20221125155318523"></p><p>5．在master 节点创建 Deployment的spec.yaml文件，具体要求如下：</p><p>（1）Deployment 名称：exam2022；</p><p>（2）镜像：redis:latest;</p><p>（3）副本数：7；</p><p>（4）label: app_enb_stage=dev.</p><p>完成后保存这个spec．yaml 文件到 master 节点／opt／exam2022／deploy＿spec．yaml中．</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam2022<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">7</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app_enb_stage</span><span class="token punctuation">:</span> dev  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app_enb_stage</span><span class="token punctuation">:</span> dev    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd<span class="token punctuation">-</span>dev        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/httpd        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125155935897.png" alt="image-20221125155935897"></p><p>6．在master 节点／root目录下编写YAML文件pv．yaml 创建PV，具体要求如下：</p><p>（1）PV名称：test-pv；</p><p>（2）类型：hostPath；</p><p>（3）挂载路径：／data；</p><p>（4）容量：1Gi；</p><p>（5）模式：ReadOnlyMany。</p><p>完成后使用该YAML 文件创建PV。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>pv<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /data  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadOnlyMany  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125163653557.png" alt="image-20221125163653557"></p><p>7．在master 节点／root目录下编写YAML 文件pod-secret．yaml 创建 Secret 和Pod，具体</p><p>要求如下：</p><p>（1）Secret 名称：mysecret；</p><p>（2）包含一个password字段（手动base64加密）；</p><p>（3）第一个Pod-test1 使用env引用mysecret；</p><p>（4）第二个Pod·test2使用 volume引用 mysecret．</p><p>完成后使用该YAML文件创建Secret和Pod.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">echo <span class="token punctuation">-</span>n "123456" <span class="token punctuation">|</span> base64<span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat pod-secret.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysecret<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> MTIzNDU2 <span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat test1.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test1<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test1<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSECRET_PASSWORD      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">secretKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> mysecret          <span class="token key atrule">key</span><span class="token punctuation">:</span> password          <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat test2.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test2<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test2<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> foo      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/etc/foo"</span>      <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> foo    <span class="token key atrule">secret</span><span class="token punctuation">:</span>      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> mysecret      <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125164157943.png" alt="image-20221125164157943"></p><p>8．在Kubernetes 集群中完成Bookinfo样例程序的部署，然后在maser 节点／root目录下 编写YAML 文件istio.yaml 配置HTTP请求超时，具体要求如下：</p><p>（1）路由名称：reviews；</p><p>（2）将请求路由到reviews服务的v2版本；</p><p>（3）对reviews 服务的调用增加一个半秒的请求超时．</p><p>完成后使用该YAML 文件配置HTTP请求超时.</p><h2 id="第五套"><a href="#第五套" class="headerlink" title="第五套"></a>第五套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125180041105.png" alt="image-20221125180041105"></p><p>1．·默认情况下，Pod能够使用集群节点全部可用计算资源，请配置集群为系统守护进程kube-reserved 和 system-reserved 预留 500m·CPU、1Gi-memory和1Gi ephemeral-storage 计 算资源.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/kubelet/config.yaml<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>enforceNodeAllocatable:- podskubeReserved:  <span class="token comment">#配置kube预留资源</span>  cpu: 500m  memory: 1Gi  ephemeral-storage: 1GisystemReserved:  <span class="token comment">#配置系统预留资源</span>  cpu: 500m  memory: 1Gi  ephemeral-storage: 1Gi</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125180049916.png" alt="image-20221125180049916"></p><p>2．在master 节点／roct目录下编写YAML文件pod．yaml 创建Pod，具体要求如下：</p><p>（1）命名空间：default；</p><p>（2）Pod名称：exam；</p><p>（3）该Pod包含2个容器：redis和nginx，分别使用镜像redis和nginx．</p><p>完成后使用该YAML 文件创建Pod.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> redis    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/redis  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125202050428.png" alt="image-20221125202050428"></p><p>3．在master 节点／root目录下编写YAML 文件pod-secret．yaml 创建 Secret和Pod，具体</p><p>要求如下：</p><p>（1）Secret 名称：mysecret；</p><p>（2）包含一个password字段（手动base64加密）；</p><p>（3）第一个Pod-test1使用env引用mysecret；</p><p>（4）第二个Pod-test2使用volume引用mysecret．</p><p>完成后使用该YAML文件创建Secret和Pod.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">echo <span class="token punctuation">-</span>n "123456" <span class="token punctuation">|</span> base64<span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat pod-secret.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysecret<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> MTIzNDU2 <span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat test1.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test1<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test1<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSECRET_PASSWORD      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">secretKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> mysecret          <span class="token key atrule">key</span><span class="token punctuation">:</span> password          <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat test2.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test2<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test2<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> foo      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/etc/foo"</span>      <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> foo    <span class="token key atrule">secret</span><span class="token punctuation">:</span>      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> mysecret      <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125202108783.png" alt="image-20221125202108783"></p><p>4．在master 节点／root目录下编写YAML 文件创建LimitRange，具体要求如下：</p><p>（1）LimitRange 名称：mem-limit-range；</p><p>（2）容器默认资源请求为256Mi内存、500m·CPU；</p><p>（3）容器资源请求上限为800Mi内存、3000m·CPU；</p><p>（4）容器资源请求下限为100Mi内存，300m·CPU；</p><p>（5）内存和CPU超售的比率均为2．</p><p>完成后使用该YAML 创建LimitRang.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mem<span class="token punctuation">-</span>limit<span class="token punctuation">-</span>range<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">max</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 3000m      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 800Mi    <span class="token key atrule">maxLimitRequestRatio</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">defaultRequest</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 256Mi    <span class="token key atrule">min</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 300m      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi    <span class="token key atrule">type</span><span class="token punctuation">:</span> Container</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125204947792.png" alt="image-20221125204947792"></p><p>5．·为master 节点打上标签“disktype＝ssd”和标签“exam＝chinaskill”，然后在master 节点／root目录下编写YAML 文件创建Deployment，具体要求如下：。</p><p>（1）Deplbyment 名称：nginx-deployment；</p><p>（2）要求Pod只能调度到具有标签“disktype＝ssd”的节点上；</p><p>（3）具有标签“exam＝chinaskill”的节点优先被调度。 </p><p>完成后使用该YAML 文件创建 Deployment.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>nginx      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>require<span class="token punctuation">-</span>pod        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>        <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>            <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> disktype                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                <span class="token key atrule">values</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> ssd          <span class="token key atrule">preferredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token key atrule">preference</span><span class="token punctuation">:</span>              <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> exam                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                <span class="token key atrule">values</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> chinaskill</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125210807555.png" alt="image-20221125210807555"></p><p>6．在master节点／root目录下编写YAML 文件创建ClusterRole，具体要求如下：</p><p>（1）ClusterRole 名称：deployment-clusterrole；</p><p>（2）只拥有对Deployment、Daemonset、StatefulSet的创建权限．</p><p>完成后使用该YAML 文件创建 ClusterRole.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1 <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> deployment<span class="token punctuation">-</span>clusterrole<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Deployment"</span><span class="token punctuation">,</span><span class="token string">"Daemonset"</span><span class="token punctuation">,</span><span class="token string">"StatefulSet"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"create"</span><span class="token punctuation">]</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125210822500.png" alt="image-20221125210822500"></p><p>7．在master节点／root目录下编写YAML 文件创建 ServiceAccount，具体要求如下：</p><p>（1） ServiceAcccunt 名称：exam-sa；</p><p>（2）将该ServiceAccount 与上一题创建的ClusterRole 进行绑定绑定．</p><p>完成后使用该YAML 文件创建 ServiceAccount.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token punctuation">-</span>sa<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> role<span class="token punctuation">-</span>bind<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>sserviceaccount<span class="token key atrule">subjects</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token punctuation">-</span>sa<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> deployment<span class="token punctuation">-</span>clusterrole   <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io</code></pre><h2 id="第六套"><a href="#第六套" class="headerlink" title="第六套"></a>第六套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125215358715.png" alt="image-20221125215358715"></p><p>1．Kubelet 使用证书进行Kubernetes：API的认证，证书默认有效期为1年．请配置Kubelet 证书轮换，当证书即将过期时，将自动生成新的秘钥，并从Kubernetes·API申请新的证书.</p><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125215412005.png" alt="image-20221125215412005"></p><p>2．·为Kubernetes集群节点配置资源配置最小回收量，要求当节点可用内存不足1Gi或者可用文件系统空间不足10Gi时开始驱逐节点上的Pod．</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/kubelet/config.yaml<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>eviction-hard<span class="token operator">=</span>memory.available<span class="token operator">&lt;</span>1Gi,nodefs.available<span class="token operator">&lt;</span>10Gi</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125215422503.png" alt="image-20221125215422503"></p><p>3．在master 节点／root目录下编写YAML 文件pod．yaml 创建 Pod，具体要求如下：</p><p>（1）Pod 名称：nginx；</p><p>（2）容器默认请求100M内存；</p><p>（3）容器最多请求200M内存．</p><p>完成后使用该YAML 文件创建Pod.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100M      <span class="token key atrule">limits</span><span class="token punctuation">:</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 200M</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125220316951.png" alt="image-20221125220316951"></p><p>4．在master节点／root目录下编写YAML文件 replicaset．yaml 创建ReplicaSet．具体要求如下：</p><p>（1）ReplicaSet 名称：nginx；</p><p>（2）命名空间：default；</p><p>（3）副本数：3；</p><p>（4）镜像：nginx．</p><p>完成后使用该YAML 文件创建 ReplicaSet</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ReplicationController<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125220333728.png" alt="image-20221125220333728"></p><p>5．在master节点／root目录下编写YAML文件pod-live．yaml 创建Pod，具体要求如下：</p><p>（1）Pod 名称：liveness-exec；</p><p>（2）镜像：busybox；</p><p>（3）启动命令：／bin／sh-c·＂touch／tmp／healthy；sleep·30；rm-rf／tmp／healthy；</p><p>（3）在容器内执行命令“cat／tmp／healthy”来进行存活探测，每5秒执行一次．</p><p>完成后使用该YAML文件创建Pod.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness<span class="token punctuation">-</span>exec<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness<span class="token punctuation">-</span>exec<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy"</span><span class="token punctuation">]</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"cat /tmp/healthy"</span><span class="token punctuation">]</span>      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125220429559.png" alt="image-20221125220429559"></p><p>6．创建命名空间quota-example，在master节点／root目录下编写YAML 文件 quota．yaml 创建ResourceQuota，具体要求如下：</p><p>（1）ResourceQuota 名称：compute-resources；</p><p>（2）命名空间compute-resources 内所有Pod数量不超过4；</p><p>（3）命名空间compute—resources内所有容器内存申请总和不得超过1G；</p><p>（4）命名空间compute-resources 内所有内存限制不得超过2G； </p><p>（5）命名空间compute-resources内所有容器申请的CPU不得超过1；</p><p>（6）命名空间 compute-resources 内所有容器限制的CPU不得超过2．</p><p>完成后使用该YAML文件创建 ResourceQuota. </p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1 <span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> compute<span class="token punctuation">-</span>resources  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> quota<span class="token punctuation">-</span>example<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hard</span><span class="token punctuation">:</span>    <span class="token key atrule">pods</span><span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token key atrule">requests.cpu</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">requests.memory</span><span class="token punctuation">:</span> 1Gi    <span class="token key atrule">limits.cpu</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">limits.memory</span><span class="token punctuation">:</span> 2Gi</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125224014752.png" alt="image-20221125224014752"></p><p>7．在master 节点／root目录下编写YAML 文件api．yaml扩展一个Kubernetes·API，具体 要求如下：</p><p>（1）API·Server名称：crontabs； </p><p>（2）作用域：整个集群．</p><p>完成后使用该YAML 文件创建 API-Server. </p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apiextensions.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> CustomResourceDefinition<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> crontabs.stable.example.com<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">group</span><span class="token punctuation">:</span> stable.example.com  <span class="token key atrule">versions</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v1      <span class="token key atrule">served</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">schema</span><span class="token punctuation">:</span>        <span class="token key atrule">openAPIV3Schema</span><span class="token punctuation">:</span>          <span class="token key atrule">type</span><span class="token punctuation">:</span> object          <span class="token key atrule">properties</span><span class="token punctuation">:</span>            <span class="token key atrule">spec</span><span class="token punctuation">:</span>              <span class="token key atrule">type</span><span class="token punctuation">:</span> object              <span class="token key atrule">properties</span><span class="token punctuation">:</span>                <span class="token key atrule">cronSpec</span><span class="token punctuation">:</span>                  <span class="token key atrule">type</span><span class="token punctuation">:</span> string                <span class="token key atrule">image</span><span class="token punctuation">:</span>                  <span class="token key atrule">type</span><span class="token punctuation">:</span> string                <span class="token key atrule">replicas</span><span class="token punctuation">:</span>                  <span class="token key atrule">type</span><span class="token punctuation">:</span> integer  <span class="token key atrule">scope</span><span class="token punctuation">:</span> Namespaced  <span class="token key atrule">names</span><span class="token punctuation">:</span>    <span class="token key atrule">plural</span><span class="token punctuation">:</span> crontabs    <span class="token key atrule">singular</span><span class="token punctuation">:</span> crontab    <span class="token key atrule">kind</span><span class="token punctuation">:</span> CronTab    <span class="token key atrule">shortNames</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ct</code></pre><p>第七套</p><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126150625421.png" alt="image-20221126150625421"></p><p>1．·在master 节点／root目录下编写YAML文件创建Pod，具体要求如下：</p><p>（1）Pod名称：nginx；</p><p>（2）镜像：nginx</p><p>（3）挂载一个Volume，名称为cache-volume，将其／data目录挂载到宿主机／data目录 下。</p><p>完成后使用该YAML文件创建Pod。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>7<span class="token punctuation">-</span>1<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>volume    <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>       <span class="token key atrule">path</span><span class="token punctuation">:</span> /data</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126150655449.png" alt="image-20221126150655449"></p><p>2.·在 master 节点/root 目录下编写 YAML 文件 deployment.yaml 创建 Deployment，具体要求如下：</p><p>（1）Deployment名称: nginx-deployment;</p><p>（2）镜像: nginx:latest;</p><p>（3）副本数： 2；</p><p>（4）标签: app: nginx;</p><p>（5）容器端口：80</p><p>完成后使用该 YAML 文件创建 Deployment.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>7<span class="token punctuation">-</span>2<span class="token punctuation">-</span>pod        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx<span class="token punctuation">:</span>latest        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126150726186.png" alt="image-20221126150726186"></p><p>3．在master节点／root目录下编写YAML文件scale．yaml为上一题的nginx-deployment配置Pod水平自动伸缩，具体要求如下：</p><p>（1）Pod 水平自动伸缩名称：scale；</p><p>（2）Pod最小副本数为1；</p><p>（3）Pod最大副本数为5；</p><p>（4）根据设定的CPU使用率（75％）动态的增加或者减少Pod·数量．</p><p>完成后使用该YAML文件创建Pod水平自动伸缩.</p><p><strong>###如果需要autoscale需给被监测pod添加requests资源声明，否则HPA读取不到CPU指标信息</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> autoscaling/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> HorizontalPodAutoscaler<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> scale<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">scaleTargetRef</span><span class="token punctuation">:</span>    <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment  <span class="token key atrule">minReplicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">maxReplicas</span><span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token key atrule">targetCPUUtilizationPercentage</span><span class="token punctuation">:</span> <span class="token number">75</span>   </code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126164258383.png" alt="image-20221126164258383"></p><p>4．·在master节点／root目录下编写YAML文件quota．yaml创建命名空间和ResourceQuota， 具体要求如下：</p><p>（1）命名空间名称：quota-exam；</p><p>（2）ResourceQuota 名称：compute-resources; </p><p>（3）要求限制命名空间内Pod数量不超过4；</p><p>（4）所有容器内存申请总和不得超过1Gi；</p><p>（5）所有容器申请的CPU不得超过2000m。</p><p>完成后使用该YAML 文件创建命名空间和ResourceQuota </p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1 <span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> quota<span class="token punctuation">-</span>exam<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> compute<span class="token punctuation">-</span>resources  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> quota<span class="token punctuation">-</span>exam<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hard</span><span class="token punctuation">:</span>    <span class="token key atrule">pods</span><span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token key atrule">limits.cpu</span><span class="token punctuation">:</span> 2000m    <span class="token key atrule">limits.memory</span><span class="token punctuation">:</span> 1Gi</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126164323908.png" alt="image-20221126164323908"></p><p>5．·默认情况下，Pod能够使用集群节点全部可用计算资源，请配置集群为系统守护进程 kube-reserved 和 system-reserved 预留 500m·CPU、1Gi-memory和 1Gi-ephemeral-storage 计 算资源。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/kubelet/config.yaml<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>enforceNodeAllocatable:- podkubeReserved:   <span class="token comment">#配置kube预留资源</span>  cpu: 500m  memory: 1Gi  ephemeral-storage: 1GisystemReserved:   <span class="token comment">#配置系统预留资源</span>  cpu: 500m  memory: 1Gi  ephemeral-storage: 1Gi</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126165842691.png" alt="image-20221126165842691"></p><p>6．·在master 节点／root目录下编写YAML 文件创建角色，具体要求如下：</p><p>（1）角色名称：exam；</p><p>（2）该角色拥有创建、删除和更新Pod的权限；</p><p>（3）该角色拥有查看、创建、更改和删除Deployment的权限。</p><p>完成后使用该YAML文件创建角色。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Deployment"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"watch"</span><span class="token punctuation">,</span><span class="token string">"create"</span><span class="token punctuation">,</span><span class="token string">"update"</span><span class="token punctuation">,</span><span class="token string">"delete"</span><span class="token punctuation">]</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126165922896.png" alt="image-20221126165922896"></p><p>7．在master和node节点安装NFS文件服务器，共享目录为／data／k8s／，然后在master节点／root目录下编写YAML文件 nfs-pv.yaml 创建PV，具体要求如下：</p><p>（1）PV名称：exma-pv；</p><p>（2）使用NFS 存储作为后端存储；</p><p>（3）存储空间为1Gi；</p><p>（4）访问模式为ReadWriteOnce；</p><p>（5）回收策略为Recyle。</p><p>完成后使用该YAML文件创建PV。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">mkdir <span class="token punctuation">-</span>p /nfs/datachmod <span class="token punctuation">-</span>R 777 /nfscat &lt;&lt;EOF<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> /etc/exports/nfs/data <span class="token important">*(rw</span><span class="token punctuation">,</span>no_root_squash<span class="token punctuation">,</span>sync)EOFexportfs <span class="token punctuation">-</span>rsystemctl restart rpcbind nfs<span class="token punctuation">-</span>server <span class="token important">&amp;&amp;</span> systemctl enable rpcbind nfs<span class="token punctuation">-</span>servershowmount <span class="token punctuation">-</span>e &lt;ip<span class="token punctuation">&gt;</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exma<span class="token punctuation">-</span>pv  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">pv</span><span class="token punctuation">:</span> exma<span class="token punctuation">-</span>pv<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span> 192.168.10.179    <span class="token key atrule">path</span><span class="token punctuation">:</span> /nfs/data/  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Recycle</code></pre><h2 id="第八套"><a href="#第八套" class="headerlink" title="第八套"></a>第八套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174216002.png" alt="image-20221126174216002"></p><p>1．修改集群配置参数，要求集群节点可用内存低于500Mi时，kubelet开始驱逐节点上的Pods。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/kubelet/config.yaml<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>eviction-hard<span class="token operator">=</span>memory.available<span class="token operator">&lt;</span>500M</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174237608.png" alt="image-20221126174237608"></p><p>2．在master 节点／root目录下编写YAML文件pod．yaml创建Pod，具体要求如下：</p><p>（1）Pod名称：nginx；</p><p>（2）镜像：nginx：latest；</p><p>（3）以Guaranteed·QoS类运行；</p><p>（4）其requests值等于limits值．</p><p>完成后使用该YAML文件创建 Pod.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>qos    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx<span class="token punctuation">:</span>latest    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi      <span class="token key atrule">limits</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174259177.png" alt="image-20221126174259177"></p><p>3．在master 节点／root目录下编写YAML文件nginx-deployment．yaml 创建 Deployment，具体要求如下：</p><p>（1）Deployment 名称：nginx-deployment；</p><p>（2）镜像：nginx；</p><p>（3）副本数：2；</p><p>（4）网络：hostNetwork；</p><p>（5）容器端口：80。</p><p>完成后使用该YAML 文件创建 Deployment.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174349980.png" alt="image-20221126174349980"></p><p>4．在master节点／root目录下编写YAML文件hpa．yaml为上一题的Deployment 创建Pod 水平自动伸缩，具体要求如下：</p><p>（1）Pod 水平自动伸缩名称：frontend-scaler； </p><p>（2）副本数伸缩范围：3——5；</p><p>（3）期望每个Pod根据设定的CPU使用率50％动态的伸缩。</p><p>完成后使用该YAML文件创建 Pod水平自动伸缩。</p><p><strong>###如果需要autoscale需给被监测pod添加requests资源声明，否则HPA读取不到CPU指标信息</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> autoscaling/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> HorizontalPodAutoscaler<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> fronted<span class="token punctuation">-</span>scaler<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">scaleTargetRef</span><span class="token punctuation">:</span>    <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment  <span class="token key atrule">minReplicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">maxReplicas</span><span class="token punctuation">:</span> <span class="token number">7</span>  <span class="token key atrule">targetCPUUtilizationPercentage</span><span class="token punctuation">:</span> <span class="token number">50</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174456008.png" alt="image-20221126174456008"></p><p>5．在master节点／root目录下编写YAML文件role．yaml创建角色，具体要求如下：</p><p>（1）角色名称：exam-reader；</p><p>（2）对default命名空间内的Pod 拥有get、watch、list、create、delete的权限；</p><p>（3）对default 命名空间内的Deploymeht拥有get、list的权限。</p><p>完成后使用该YAML文件创建角色。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token punctuation">-</span>reader<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Pod"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"watch"</span><span class="token punctuation">,</span><span class="token string">"list"</span><span class="token punctuation">,</span><span class="token string">"create"</span><span class="token punctuation">,</span><span class="token string">"list"</span><span class="token punctuation">]</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Deployment"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"list"</span><span class="token punctuation">]</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174534894.png" alt="image-20221126174534894"></p><p>6．Kubernetes集群支持Pod优先级抢占，通过抢占式调度策略来实现同一个Node 节点内部的Pod对象抢占。在master 节点／root目录下编写YAML 文件schedule.yaml 创建一个抢 占式调度策略，具体要求如下：</p><p>（1）抢占式调度策略名称：high-scheduling； </p><p>（2）优先级为1000000；</p><p>（3）不要将该调度策略设置为默认优先调度策略。</p><p>完成后使用该YAML文件创建抢占式调度策略。”</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> scheduling.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PriorityClass<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> higi<span class="token punctuation">-</span>scheduling<span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token number">1000000</span><span class="token key atrule">globalDefault</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126210143357.png" alt="image-20221126210143357"></p><p>7．·在master节点／root目录下编写YAML文件部署 MySQL 服务，具体要求如下：</p><p>（1）Service 名称：myqsl；Deployment 名称：myqsl；</p><p>（2）镜像：mysql：5.7；</p><p>（3）数据库用户：root；密码：123456；</p><p>（4）挂载一个持久卷mysql—pv，拥有2GB的存储空间，路径为／mnt／data；</p><p>（5）以NodePort方式将3306端口对外暴露为33306．</p><p>完成后使用该YAML文件部署 MySQL服务.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pv<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /mnt/data  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 2Gi  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Retain <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pvc  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pvc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 2Gi<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/mysql<span class="token punctuation">:</span>v5.7        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_ROOT_PASSWORD          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"123456"</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>mnt            <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /mnt/data      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>mnt        <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>          <span class="token key atrule">claimName</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pvc<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>svc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">33306</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort</code></pre><h2 id="第九套"><a href="#第九套" class="headerlink" title="第九套"></a>第九套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126225859210.png" alt="image-20221126225859210"></p><p>1．·为master 节点打上“app＝exam”标签，并将其调度策略设置为PreferNoSchedule。</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl label nodes k8s-master-node1 <span class="token assign-left variable">app</span><span class="token operator">=</span>examkubectl taint <span class="token function">node</span> k8s-master-node1 node-role.kubernetes.io/master<span class="token operator">=</span>:PreferNoSchedule</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126225915790.png" alt="image-20221126225915790"></p><p>2．在master节点／root目录下编写YAML文件nginx．yaml 创建Pod，具体要求如下：</p><p>（1）Pod名称：nginx-pod；</p><p>（2）镜像：nginx；</p><p>（3）镜像拉取策略：IfNotPresent；</p><p>（4）启用进程命名空间共享．</p><p>完成后使用该YAML文件创建Pod.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">shareProcessNamespace</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126225948643.png" alt="image-20221126225948643"></p><p>3．在master节点／root目录下编写YAML文件nginx-deployment．yaml 创建 Deployment，</p><p>具体要求如下：</p><p>（1）Deployment 名称：nginx-deployment；</p><p>（2）Pod 名称：nginy-deployment，副本数：2；</p><p>（3）镜像：nginx；</p><p>（4）容器端口：80</p><p>完成后使用该YAML文件创建 Deployment.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126230004306.png" alt="image-20221126230004306"></p><p>4．在master节点／root目录下编写YAML文件service．yaml 创建Service，具体要求如下：</p><p>（1）Service 名称：exam-service；</p><p>（2）集群内部访问端口：80；</p><p>（3）使用TCP协议；</p><p>（4）服务类型：ClusterIP．</p><p>完成后使用该YAML 文件创建 Service.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token punctuation">-</span>service<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP</code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126230023743.png" alt="image-20221126230023743"></p><p>5．在master节点／root目录下编写YAML文件创建Pod并使用ConfigMap，具体要求如 下：</p><p>（1）Pod名称：exam；</p><p>（2）镜像：busybox；</p><p>（3）在数据卷里面使用ConfigMap，并设置变量“DB＿HOST＝localhost”和 “DB_PORT=3306”。</p><p>完成后使用该YAML文件创建Pod.</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">data1</span><span class="token punctuation">:</span> <span class="token string">"localhost"</span>  <span class="token key atrule">data2</span><span class="token punctuation">:</span> <span class="token string">"3306"</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> exam    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/busybox    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DB_HOST      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">key</span><span class="token punctuation">:</span> data1    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DB_PORT      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">key</span><span class="token punctuation">:</span> data2    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
