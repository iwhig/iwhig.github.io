<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/08/hello-world/"/>
      <url>/2023/09/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Wordpress</title>
      <link href="/2023/09/07/docker-bu-shu-wordpress/"/>
      <url>/2023/09/07/docker-bu-shu-wordpress/</url>
      
        <content type="html"><![CDATA[<p>Wordpress是一种博客系统有多种部署方式，下面是以Docker的方式部署</p><h3 id="启动MySQL容器作为Wordpress的数据库"><a href="#启动MySQL容器作为Wordpress的数据库" class="headerlink" title="启动MySQL容器作为Wordpress的数据库"></a>启动MySQL容器作为Wordpress的数据库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">--name</span> wp-mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root  <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">33306</span>:3306 <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进入MySQL容器对数据库进行配置"><a href="#进入MySQL容器对数据库进行配置" class="headerlink" title="进入MySQL容器对数据库进行配置"></a>进入MySQL容器对数据库进行配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> wp-mysql /bin/bash<span class="token comment">#登录数据库</span>mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span class="token comment">#创建用户及对用户赋权</span>create user <span class="token string">'wp'</span>@<span class="token string">'%'</span> identified by <span class="token string">'wordpress'</span><span class="token punctuation">;</span>create database wordpress<span class="token punctuation">;</span>grant all on wordpress.* to <span class="token string">'wp'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动Wordpress容器"><a href="#启动Wordpress容器" class="headerlink" title="启动Wordpress容器"></a>启动Wordpress容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> wordpress <span class="token parameter variable">-itd</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">WORDPRESS_DB_NAME</span><span class="token operator">=</span>wordpress <span class="token punctuation">\</span>        <span class="token parameter variable">-e</span> <span class="token assign-left variable">WORDPRESS_DB_USER</span><span class="token operator">=</span>wp <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">WORDPRESS_DB_PASSWORD</span><span class="token operator">=</span>wordpress <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">WORDPRESS_DB_HOST</span><span class="token operator">=</span><span class="token number">172.17</span>.0.2 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">30912</span>:80 wordpress:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问-http-locahost-30912-即可打开WordPress"><a href="#访问-http-locahost-30912-即可打开WordPress" class="headerlink" title="访问 http://locahost:30912 即可打开WordPress"></a>访问 <a href="http://locahost:30912/">http://locahost:30912</a> 即可打开WordPress</h3>]]></content>
      
      
      <categories>
          
          <category> deploy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S1.25.2搭建（ubuntu2002）</title>
      <link href="/2023/05/20/k8s1.25.2-da-jian-ubuntu2002/"/>
      <url>/2023/05/20/k8s1.25.2-da-jian-ubuntu2002/</url>
      
        <content type="html"><![CDATA[<h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><h3 id="containerd简介"><a href="#containerd简介" class="headerlink" title="containerd简介"></a>containerd简介</h3><p>containerd是一个工业级标准的容器运行时，它强调简单性、健壮性和可移植性。containerd可以在宿主机中管理完整的容器生命周期，包括容器镜像的传输和存储、容器的执行和管理、存储和网络等。</p><h3 id="Docker-VS-Containerd"><a href="#Docker-VS-Containerd" class="headerlink" title="Docker VS Containerd"></a>Docker VS Containerd</h3><p>containerd是从Docker中分离出来的一个项目，可以作为一个底层容器运行时，现在它成了Kubernete容器运行时更好的选择。</p><h3 id="kubernetes为什么要弃用docker作为容器运行时，而选择contianerd呢？"><a href="#kubernetes为什么要弃用docker作为容器运行时，而选择contianerd呢？" class="headerlink" title="kubernetes为什么要弃用docker作为容器运行时，而选择contianerd呢？"></a>kubernetes为什么要弃用docker作为容器运行时，而选择contianerd呢？</h3><ul><li><p>如果你使用Docker作为K8S容器运行时的话，kubelet需要先要通过 dockershim 去调用Docker，再通过Docker去调用containerd。</p></li><li><p>如果你使用containerd作为K8S容器运行时的话，由于containerd内置了 CRI (Container Runtime Interface：容器运行时接口)插件，kubelet可以直接调用containerd。</p></li></ul><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>每台机器RAM至少2G，2CPU核或更多，每台机器保证可以正常访问公网</p><table><thead><tr><th align="center">Hardware</th><th align="center">System</th><th align="center">hostname</th><th align="center">IP</th><th align="center">Cluster Version</th><th align="center">Containerd Version</th></tr></thead><tbody><tr><td align="center">2V4G100G</td><td align="center">Ubuntu20.04</td><td align="center">k8s-master-node1</td><td align="center">192.168.31.128/24</td><td align="center">1.25.2</td><td align="center">1.6.21</td></tr><tr><td align="center">2V6G60G</td><td align="center">Ubuntu20.04</td><td align="center">k8s-worker-node1</td><td align="center">192.168.31.129/24</td><td align="center">1.25.2</td><td align="center">1.6.21</td></tr><tr><td align="center">2V6G60G</td><td align="center">Ubuntu20.04</td><td align="center">k8s-worker-node2</td><td align="center">192.168.31.130/24</td><td align="center">1.25.2</td><td align="center">1.6.21</td></tr></tbody></table><h2 id="一、搭建前准备"><a href="#一、搭建前准备" class="headerlink" title="一、搭建前准备"></a>一、搭建前准备</h2><h5 id="关闭swap分区"><a href="#关闭swap分区" class="headerlink" title="关闭swap分区"></a>关闭swap分区</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s:~<span class="token comment"># swapoff  -a</span>root@k8s:~<span class="token comment"># sed -ri 's/.*swap.*/#&amp;/' /etc/fstab</span>root@k8s:~<span class="token comment"># mount -a</span>root@k8s:~<span class="token comment"># free -h</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:          <span class="token number">3</span>.8Gi       <span class="token number">1</span>.2Gi       100Mi       <span class="token number">8</span>.0Mi       <span class="token number">2</span>.5Gi       <span class="token number">2</span>.3GiSwap:            0B          0B          0B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@k8s:~<span class="token comment"># systemctl disable ufw --now</span>Synchronizing state of ufw.service with SysV <span class="token function">service</span> script with /lib/systemd/systemd-sysv-install.Executing: /lib/systemd/systemd-sysv-install disable ufw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="安装辅助软件"><a href="#安装辅助软件" class="headerlink" title="安装辅助软件"></a>安装辅助软件</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common <span class="token function">wget</span> net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="升级所有已安装软件包"><a href="#升级所有已安装软件包" class="headerlink" title="升级所有已安装软件包"></a>升级所有已安装软件包</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> upgrade <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、安装containerd"><a href="#二、安装containerd" class="headerlink" title="二、安装containerd"></a>二、安装containerd</h2><h4 id="1、安装前的基础配置"><a href="#1、安装前的基础配置" class="headerlink" title="1、安装前的基础配置"></a>1、安装前的基础配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/modules-load.d/containerd.conf</span>overlaybr_netfilterEOF</span><span class="token function">sudo</span> modprobe overlay<span class="token function">sudo</span> modprobe br_netfilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、设置必要的系统参数"><a href="#2、设置必要的系统参数" class="headerlink" title="2、设置必要的系统参数"></a>2、设置必要的系统参数</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/sysctl.d/99-kubernetes-cri.conf</span>net.bridge.bridge-nf-call-iptables  = 1net.ipv4.ip_forward                 = 1net.bridge.bridge-nf-call-ip6tables = 1EOF</span><span class="token comment"># 应用 sysctl 参数无需重新启动,并查看参数是否生效</span><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">--system</span> <span class="token operator">|</span> <span class="token function">grep</span> net.bridge. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、安装containerd"><a href="#3、安装containerd" class="headerlink" title="3、安装containerd"></a>3、安装containerd</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span><span class="token function">apt-get</span> update <span class="token function">apt-get</span> <span class="token function">install</span> containerd.io <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、配置containerd"><a href="#4、配置containerd" class="headerlink" title="4、配置containerd"></a>4、配置containerd</h4><p>用containerd生成默认配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">containerd config default <span class="token operator">&gt;</span> /etc/containerd/config.toml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/containerd/config.toml<span class="token comment">#默认镜像用的是k8s官方的，需使用科学上网，这里改为国内阿里云镜像仓库。</span>sandbox_image <span class="token operator">=</span> <span class="token string">"registry.k8s.io/pause:3.6"</span>改为sandbox_image <span class="token operator">=</span> <span class="token string">"registry.aliyuncs.com/google_containers/pause:3.7"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>plugins.<span class="token string">"io.containerd.grpc.v1.cri"</span>.containerd.runtimes.runc.options<span class="token punctuation">]</span>            BinaryName <span class="token operator">=</span> <span class="token string">""</span>            CriuImagePath <span class="token operator">=</span> <span class="token string">""</span>            CriuPath <span class="token operator">=</span> <span class="token string">""</span>            CriuWorkPath <span class="token operator">=</span> <span class="token string">""</span>            IoGid <span class="token operator">=</span> <span class="token number">0</span>            IoUid <span class="token operator">=</span> <span class="token number">0</span>            NoNewKeyring <span class="token operator">=</span> <span class="token boolean">false</span>            NoPivotRoot <span class="token operator">=</span> <span class="token boolean">false</span>            Root <span class="token operator">=</span> <span class="token string">""</span>            ShimCgroup <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#            SystemdCgroup = false</span><span class="token comment">#这里将SystemdCgroup = false改为True</span>SystemdCgroup <span class="token operator">=</span> True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里重启containerd即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart containerd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里会遇到一个错误使用ctictl 命令会报错（具体报错如下）,需配置unix套件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WARN<span class="token punctuation">[</span>0000<span class="token punctuation">]</span> image connect using default endpoints: <span class="token punctuation">[</span>unix:///var/run/dockershim.sock unix:///run/containerd/containerd.sock unix:///run/crio/crio.sock<span class="token punctuation">]</span>. As the default settings are now deprecated, you should <span class="token builtin class-name">set</span> the endpoint instead. ERRO<span class="token punctuation">[</span>0002<span class="token punctuation">]</span> connect endpoint <span class="token string">'unix:///var/run/dockershim.sock'</span>, <span class="token function">make</span> sure you are running as root and the endpoint has been started: context deadline exceeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置unix套件</span>crictl config runtime-endpoint unix:///run/containerd/containerd.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、安装kubernetes"><a href="#三、安装kubernetes" class="headerlink" title="三、安装kubernetes"></a>三、安装kubernetes</h2><h4 id="1、添加国内kubernetes源"><a href="#1、添加国内kubernetes源" class="headerlink" title="1、添加国内kubernetes源"></a>1、添加国内kubernetes源</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg <span class="token operator">|</span> apt-key <span class="token function">add</span> -<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span>/etc/apt/sources.list.d/kubernetes.list</span>deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial mainEOF</span><span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、安装kubelet、kubeadm、kubectl"><a href="#2、安装kubelet、kubeadm、kubectl" class="headerlink" title="2、安装kubelet、kubeadm、kubectl"></a>2、安装kubelet、kubeadm、kubectl</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看软件有哪些版本并确定安装版本</span><span class="token function">apt-cache</span> madison kubelet<span class="token function">apt-cache</span> madison kubeadm<span class="token function">apt-cache</span> madison kubectl<span class="token comment">#这里集群安装1.25.2版本所以三个组件都安装1.25.2-00版本</span><span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token assign-left variable">kubelet</span><span class="token operator">=</span><span class="token number">1.25</span>.2-00 <span class="token assign-left variable">kubeadm</span><span class="token operator">=</span><span class="token number">1.25</span>.2-00 <span class="token assign-left variable">kubectl</span><span class="token operator">=</span><span class="token number">1.25</span>.2-00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、集群初始化"><a href="#四、集群初始化" class="headerlink" title="四、集群初始化"></a>四、集群初始化</h2><h4 id="1、打印初始化yaml文件"><a href="#1、打印初始化yaml文件" class="headerlink" title="1、打印初始化yaml文件"></a>1、打印初始化yaml文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm config print init-defaults <span class="token operator">&gt;</span> kubeadm-init.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、修改yaml文件"><a href="#2、修改yaml文件" class="headerlink" title="2、修改yaml文件"></a>2、修改yaml文件</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">vim kubeadm<span class="token punctuation">-</span>init.yaml<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeadm.k8s.io/v1beta3<span class="token key atrule">bootstrapTokens</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">groups</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> system<span class="token punctuation">:</span>bootstrappers<span class="token punctuation">:</span>kubeadm<span class="token punctuation">:</span>default<span class="token punctuation">-</span>node<span class="token punctuation">-</span>token  <span class="token key atrule">token</span><span class="token punctuation">:</span> abcdef.0123456789abcdef  <span class="token key atrule">ttl</span><span class="token punctuation">:</span> 24h0m0s  <span class="token key atrule">usages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> signing  <span class="token punctuation">-</span> authentication<span class="token key atrule">kind</span><span class="token punctuation">:</span> InitConfiguration<span class="token key atrule">localAPIEndpoint</span><span class="token punctuation">:</span>  <span class="token key atrule">advertiseAddress</span><span class="token punctuation">:</span> 192.168.31.128  <span class="token comment">#填写master节点IP，也就是集群IP</span>  <span class="token key atrule">bindPort</span><span class="token punctuation">:</span> <span class="token number">6443</span><span class="token key atrule">nodeRegistration</span><span class="token punctuation">:</span>  <span class="token key atrule">criSocket</span><span class="token punctuation">:</span> unix<span class="token punctuation">:</span>///var/run/containerd/containerd.sock  <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent  <span class="token key atrule">name</span><span class="token punctuation">:</span> k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1   <span class="token comment">#填写master节点主机名</span>  <span class="token key atrule">taints</span><span class="token punctuation">:</span> <span class="token null important">null</span><span class="token punctuation">---</span><span class="token key atrule">apiServer</span><span class="token punctuation">:</span>  <span class="token key atrule">timeoutForControlPlane</span><span class="token punctuation">:</span> 4m0s<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeadm.k8s.io/v1beta3<span class="token key atrule">certificatesDir</span><span class="token punctuation">:</span> /etc/kubernetes/pki<span class="token key atrule">clusterName</span><span class="token punctuation">:</span> kubernetes<span class="token key atrule">controllerManager</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">dns</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">etcd</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>    <span class="token key atrule">dataDir</span><span class="token punctuation">:</span> /var/lib/etcd<span class="token key atrule">imageRepository</span><span class="token punctuation">:</span> registry.aliyuncs.com/google_containers  <span class="token comment">#改为国内镜像仓库</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterConfiguration<span class="token key atrule">kubernetesVersion</span><span class="token punctuation">:</span> 1.25.9<span class="token key atrule">networking</span><span class="token punctuation">:</span>  <span class="token key atrule">dnsDomain</span><span class="token punctuation">:</span> cluster.local  <span class="token key atrule">serviceSubnet</span><span class="token punctuation">:</span> 10.96.0.0/12  <span class="token key atrule">podSubnet</span><span class="token punctuation">:</span> 10.244.0.0/16<span class="token key atrule">scheduler</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、初始化"><a href="#3、初始化" class="headerlink" title="3、初始化"></a>3、初始化</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm init <span class="token parameter variable">--config</span> kubeadm-init.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到以下提示表示master节点初始化成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Your Kubernetes control-plane has initialized successfully<span class="token operator">!</span>To start using your cluster, you need to run the following as a regular user:  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube  <span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config  <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/configYou should now deploy a pod network to the cluster.Run <span class="token string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/<span class="token comment"># Then you can join any number of worker nodes by running the following on each as root:</span>kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.31.128:6443 <span class="token parameter variable">--token</span> 4m78tv.xjhrpamweyda7ya0 <span class="token punctuation">\</span>    --discovery-token-ca-cert-hash sha256:c05ae406919442d23c14a5a3f4c5ebe530bde038e7939e6e495e13eecb596051 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、按照提示cp文件到用户家目录下，并做配置"><a href="#4、按照提示cp文件到用户家目录下，并做配置" class="headerlink" title="4、按照提示cp文件到用户家目录下，并做配置"></a>4、按照提示cp文件到用户家目录下，并做配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube<span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span class="token comment">#添加kubectl命令补全</span>root@k8s:~<span class="token comment"># vim .bashrc</span><span class="token builtin class-name">source</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>kubectl completion <span class="token function">bash</span><span class="token punctuation">)</span>root@k8s:~<span class="token comment"># source .bashrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get <span class="token function">node</span> NAME        STATUS   ROLES           AGE    VERSIONk8s         NotReady    control-plane   3d3h   v1.25.2<span class="token comment">#现在节点状态是NotReady，因为缺少网络组件</span>kubectl get pods <span class="token parameter variable">-A</span>NAMESPACE      NAME                              READY   STATUS    RESTARTS       AGEkube-system    coredns-c676cc86f-2ztg5           <span class="token number">1</span>/1     Pending   <span class="token number">10</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>   3d3hkube-system    coredns-c676cc86f-sxt29           <span class="token number">1</span>/1     Pending   <span class="token number">11</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>   3d3hkube-system    etcd-k8s                          <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-apiserver-k8s                <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-controller-manager-k8s       <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d2hkube-system    kube-proxy-lp9p7                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>              9hkube-system    kube-proxy-pnpvc                  <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-proxy-vxgmm                  <span class="token number">1</span>/1     Running   <span class="token number">1</span>              9hkube-system    kube-scheduler-k8s                <span class="token number">1</span>/1     Running   <span class="token number">4</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3h<span class="token comment">#可以看到没有网络组件，两个coredns的pod也是pending状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、部署cni网络组件flannel"><a href="#5、部署cni网络组件flannel" class="headerlink" title="5、部署cni网络组件flannel"></a>5、部署cni网络组件flannel</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载flannel的yaml文件</span><span class="token function">wget</span> https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#修改yaml文件</span>vim kube<span class="token punctuation">-</span>flannel.yaml  <span class="token key atrule">net-conf.json</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    {      "Network": "10.244.0.0/16", #这里填写和初始化时kubeadm-init.yaml文件里的podsubnet一样即可      "Backend": {        "Type": "vxlan"      }    }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用yaml文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> kube-flannel.yml <span class="token comment">#等待片刻</span>kubectl get pods <span class="token parameter variable">-A</span>NAMESPACE      NAME                              READY   STATUS    RESTARTS       AGEkube-flannel   kube-flannel-ds-9jm8j             <span class="token number">1</span>/1     Running   <span class="token number">0</span>              9hkube-flannel   kube-flannel-ds-cl9s9             <span class="token number">1</span>/1     Running   <span class="token number">0</span>              9hkube-flannel   kube-flannel-ds-qdbbg             <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d2hkube-system    coredns-c676cc86f-2ztg5           <span class="token number">1</span>/1     Running   <span class="token number">10</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>   3d3hkube-system    coredns-c676cc86f-sxt29           <span class="token number">1</span>/1     Running   <span class="token number">11</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>   3d3hkube-system    etcd-k8s                          <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-apiserver-k8s                <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-controller-manager-k8s       <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d2hkube-system    kube-proxy-lp9p7                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>              9hkube-system    kube-proxy-pnpvc                  <span class="token number">1</span>/1     Running   <span class="token number">3</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3hkube-system    kube-proxy-vxgmm                  <span class="token number">1</span>/1     Running   <span class="token number">1</span>              9hkube-system    kube-scheduler-k8s                <span class="token number">1</span>/1     Running   <span class="token number">4</span> <span class="token punctuation">(</span>23h ago<span class="token punctuation">)</span>    3d3h<span class="token comment">#集群可正常使用，节点状态也变为Ready</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、创建加入token"><a href="#五、创建加入token" class="headerlink" title="五、创建加入token"></a>五、创建加入token</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm token create<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1、查ca证书she256编码hash值"><a href="#1、查ca证书she256编码hash值" class="headerlink" title="1、查ca证书she256编码hash值"></a>1、查ca证书she256编码hash值</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl x509 <span class="token parameter variable">-pubkey</span> <span class="token parameter variable">-in</span> /etc/kubernetes/pki/ca.crt <span class="token operator">|</span> openssl rsa <span class="token parameter variable">-pubin</span> <span class="token parameter variable">-outform</span> der <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> openssl dgst <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-hex</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/^.* //'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、节点加入集群"><a href="#2、节点加入集群" class="headerlink" title="2、节点加入集群"></a>2、节点加入集群</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.31.127:6443 <span class="token parameter variable">--token</span> <span class="token punctuation">..</span>. --discovery-token-ca-cert-hash <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、kubectl命令补全"><a href="#3、kubectl命令补全" class="headerlink" title="3、kubectl命令补全"></a>3、kubectl命令补全</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span class="token builtin class-name">source</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>kubectl completion <span class="token function">bash</span><span class="token punctuation">)</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token string">'kubectl'</span>complete <span class="token parameter variable">-F</span> __start_kubectl k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> deploy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Shell </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> Containerd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack开放镜像权限</title>
      <link href="/2023/05/10/kai-fang-jing-xiang-quan-xian/"/>
      <url>/2023/05/10/kai-fang-jing-xiang-quan-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="（1）创建租户"><a href="#（1）创建租户" class="headerlink" title="（1）创建租户"></a>（1）创建租户</h2><p>登录OpenStack平台，创建租户depA和depB，并且在这两个租户下各创一个用户userA和userB的普通用户，创建完之后（创建过程不再赘述），使用命令查看，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># source /etc/keystone/admin-openrc.sh </span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack project list</span>+----------------------------------+---------+<span class="token operator">|</span> ID                               <span class="token operator">|</span> Name    <span class="token operator">|</span>+----------------------------------+---------+<span class="token operator">|</span> 0dd87985eb314fed828e6888aed4880d <span class="token operator">|</span> demo    <span class="token operator">|</span><span class="token operator">|</span> 525075abb84e4e088dfe3adc4da61e72 <span class="token operator">|</span> depB    <span class="token operator">|</span><span class="token operator">|</span> 55b50cbb4dd4459b873cb15a8b03db43 <span class="token operator">|</span> admin   <span class="token operator">|</span><span class="token operator">|</span> a184a157399043c2a40abc52df0459a2 <span class="token operator">|</span> <span class="token function">service</span> <span class="token operator">|</span><span class="token operator">|</span> df58511d2c914690b48e89f1e512ae6b <span class="token operator">|</span> depA    <span class="token operator">|</span>+----------------------------------+---------+<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack user list</span>+----------------------------------+-------------------+<span class="token operator">|</span> ID                               <span class="token operator">|</span> Name              <span class="token operator">|</span>+----------------------------------+-------------------+<span class="token operator">|</span> 0f8782af6a654d77b587e25a32f91f28 <span class="token operator">|</span> cinder            <span class="token operator">|</span><span class="token operator">|</span> 1ab30f77400448eba6b2d47e55084540 <span class="token operator">|</span> demo              <span class="token operator">|</span><span class="token operator">|</span> 2550fa93b1fe4cb582f1f46353b836d8 <span class="token operator">|</span> ceilometer        <span class="token operator">|</span><span class="token operator">|</span> 2d2a345336184b1ebbdf022f710084e8 <span class="token operator">|</span> neutron           <span class="token operator">|</span><span class="token operator">|</span> 48b816f9db9541b4bd9ca49ad453574c <span class="token operator">|</span> glance            <span class="token operator">|</span><span class="token operator">|</span> 4c989a43a75c477bb4f9b7566cde6028 <span class="token operator">|</span> userA             <span class="token operator">|</span><span class="token operator">|</span> 765a16c99d7d42a4b69ff941f7791b54 <span class="token operator">|</span> aodh              <span class="token operator">|</span><span class="token operator">|</span> 788efa329f324b91a431ad56cd7b9a14 <span class="token operator">|</span> nova              <span class="token operator">|</span><span class="token operator">|</span> 7ecae98d16d54483b964c9c2548fd7bc <span class="token operator">|</span> swift             <span class="token operator">|</span><span class="token operator">|</span> 8a33fc3342154a3ca264ae7b918648ba <span class="token operator">|</span> userB             <span class="token operator">|</span><span class="token operator">|</span> 962612a3e7784df38d0c98fea1f30320 <span class="token operator">|</span> heat              <span class="token operator">|</span><span class="token operator">|</span> 9ee4731c00c24f659b8790be6b77bc8a <span class="token operator">|</span> admin             <span class="token operator">|</span><span class="token operator">|</span> d6fdd1e5e1a348e0b6c5b8c7f33ba5fa <span class="token operator">|</span> placement         <span class="token operator">|</span><span class="token operator">|</span> d957a578fed2452ab91bc651f2f1fb97 <span class="token operator">|</span> heat_domain_admin <span class="token operator">|</span><span class="token operator">|</span> e91070fa751e49689963b566db999bee <span class="token operator">|</span> gnocchi           <span class="token operator">|</span>+----------------------------------+-------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看见租户与用户均已存在。</p><h2 id="（2）上传镜像"><a href="#（2）上传镜像" class="headerlink" title="（2）上传镜像"></a>（2）上传镜像</h2><p>使用cirros-0.3.4-x86_64-disk.img上传至控制节点的/root目录下，并上传至云平台中，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># glance image-create --name cirros --disk-format qcow2 --container-format bare --progress ] 100%</span>+------------------+--------------------------------------+<span class="token operator">|</span> Property         <span class="token operator">|</span> Value                                <span class="token operator">|</span>+------------------+--------------------------------------+<span class="token operator">|</span> checksum         <span class="token operator">|</span> ee1eca47dc88f4879d8a229cc70a07c6     <span class="token operator">|</span><span class="token operator">|</span> container_format <span class="token operator">|</span> bare                                 <span class="token operator">|</span><span class="token operator">|</span> created_at       <span class="token operator">|</span> <span class="token number">2022</span>-02-10T05:31:48Z                 <span class="token operator">|</span><span class="token operator">|</span> disk_format      <span class="token operator">|</span> qcow2                                <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">id</span>               <span class="token operator">|</span> 1fa9cbfe-392f-437e-ad18-f00987415b15 <span class="token operator">|</span><span class="token operator">|</span> min_disk         <span class="token operator">|</span> <span class="token number">0</span>                                    <span class="token operator">|</span><span class="token operator">|</span> min_ram          <span class="token operator">|</span> <span class="token number">0</span>                                    <span class="token operator">|</span><span class="token operator">|</span> name             <span class="token operator">|</span> cirros                               <span class="token operator">|</span><span class="token operator">|</span> owner            <span class="token operator">|</span> 55b50cbb4dd4459b873cb15a8b03db43     <span class="token operator">|</span><span class="token operator">|</span> protected        <span class="token operator">|</span> False                                <span class="token operator">|</span><span class="token operator">|</span> size             <span class="token operator">|</span> <span class="token number">13287936</span>                             <span class="token operator">|</span><span class="token operator">|</span> status           <span class="token operator">|</span> active                               <span class="token operator">|</span><span class="token operator">|</span> tags             <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                   <span class="token operator">|</span><span class="token operator">|</span> updated_at       <span class="token operator">|</span> <span class="token number">2022</span>-02-10T05:31:49Z                 <span class="token operator">|</span><span class="token operator">|</span> virtual_size     <span class="token operator">|</span> None                                 <span class="token operator">|</span><span class="token operator">|</span> visibility       <span class="token operator">|</span> shared                               <span class="token operator">|</span>+------------------+--------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传镜像后，userA和userB都不能看到该镜像。接下来做相关配置，使得A租户中的用户可以看到该镜像。</p><h2 id="（3）权限配置"><a href="#（3）权限配置" class="headerlink" title="（3）权限配置"></a>（3）权限配置</h2><p>首先将镜像共享给A租户，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># glance member-create 1fa9cbfe-392f-437e-ad18-f00987415b15 df58511d2c914690b48e89f1e512ae6b</span>+--------------------------------------+----------------------------------+---------+<span class="token operator">|</span> Image ID                             <span class="token operator">|</span> Member ID                        <span class="token operator">|</span> Status  <span class="token operator">|</span>+--------------------------------------+----------------------------------+---------+<span class="token operator">|</span> 1fa9cbfe-392f-437e-ad18-f00987415b15 <span class="token operator">|</span> df58511d2c914690b48e89f1e512ae6b <span class="token operator">|</span> pending <span class="token operator">|</span>+--------------------------------------+----------------------------------+---------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在共享之后，镜像的状态是pending状态，此时还需要激活镜像，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@openstack ~<span class="token punctuation">]</span><span class="token comment"># glance member-update 1fa9cbfe-392f-437e-ad18-f00987415b15 df58511d2c914690b48e89f1e512ae6b accepted</span>+--------------------------------------+----------------------------------+----------+<span class="token operator">|</span> Image ID                             <span class="token operator">|</span> Member ID                        <span class="token operator">|</span> Status   <span class="token operator">|</span>+--------------------------------------+----------------------------------+----------+<span class="token operator">|</span> 1fa9cbfe-392f-437e-ad18-f00987415b15 <span class="token operator">|</span> df58511d2c914690b48e89f1e512ae6b <span class="token operator">|</span> accepted <span class="token operator">|</span>+--------------------------------------+----------------------------------+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时镜像的状态就变为了accepted，可以在dashboard界面登录userA用户，查看是否可以看到cirros镜像（也可以登录userB用户，查看是否能看到镜像），如图3-1所示：<br><img src="https://ydy-resources-prod.obs.cn-north-4.myhuaweicloud.com/resource_13-1000-20220531163949522-qMDsl/wKggBmIga4KAPahqAAAg5-sMDtE487.png" alt="图31.png"></p><p><img src="https://s2.loli.net/2023/09/11/DGW8XV2BSc6nIQh.png" alt="开放镜像权限.png"></p><p>图3-1 镜像界面</p><p>通过这种方式，可以使用管理员设置不同租户对不同镜像的访问权限。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> OpenStack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu使用Xrdp黑屏</title>
      <link href="/2023/04/16/ubuntuxrdp-lian-jie-hei-ping-wen-ti/"/>
      <url>/2023/04/16/ubuntuxrdp-lian-jie-hei-ping-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="连接黑屏问题"><a href="#连接黑屏问题" class="headerlink" title="连接黑屏问题"></a>连接黑屏问题</h2><p>这个问题，<strong>主要是当你的本机没有注销的话，远程桌面就会黑屏</strong>，最佳解决策略就是退出本地登录，也就是注销登录，这个方法一定没问题。与windows那种完美的远程控制不同，在ubuntu中，本地登录和远程登陆是隔离开的，远程登录了不注销，那么本地就会黑屏，反过来本地登陆了不注销，远程就会黑屏。所谓注销就是logout，应该都懂，就是和关机、重启放在一起的那个选项。</p><p>或者使用网上的一些解决方案，但是这个放在在Ubuntu 22中会导致闪退。即，编辑<code> /etc/xrdp/startwm.sh</code> 文件：</p><h3 id="1-打开文件"><a href="#1-打开文件" class="headerlink" title="1. 打开文件"></a>1. 打开文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/xrdp/startwm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-添加配置"><a href="#2-添加配置" class="headerlink" title="2. 添加配置"></a>2. 添加配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> <span class="token environment constant">DBUS_SESSION_BUS_ADDRESS</span><span class="token builtin class-name">unset</span> <span class="token environment constant">XDG_RUNTIME_DIR</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-重启xrdp服务"><a href="#3-重启xrdp服务" class="headerlink" title="3. 重启xrdp服务"></a>3. 重启xrdp服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart xrdp.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="桌面优化"><a href="#桌面优化" class="headerlink" title="桌面优化"></a>桌面优化</h2><p>注意，一定要<strong>先修改下面配置文件，再远程连接</strong>，否则会黑屏，这个时候需要重启。</p><p>反正记住一句话，重启后不在本地登录，那么远程必不黑屏！</p><p>如果不做任何配置，启动之后的桌面是非常别扭的，因为是Gnome的原始桌面，没有左侧的任务栏，窗口也没有最小化按钮，等等一些列问题。解决方案也很简单：</p><h3 id="1-添加配置文件"><a href="#1-添加配置文件" class="headerlink" title="1. 添加配置文件"></a>1. 添加配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.xsessionrc添加：<span class="token builtin class-name">export</span> <span class="token assign-left variable">GNOME_SHELL_SESSION_MODE</span><span class="token operator">=</span>ubuntu<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XDG_CURRENT_DESKTOP</span></span><span class="token operator">=</span>ubuntu:GNOME<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XDG_CONFIG_DIRS</span></span><span class="token operator">=</span>/etc/xdg/xdg-ubuntu:/etc/xdg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-重启xrdp服务"><a href="#2-重启xrdp服务" class="headerlink" title="2. 重启xrdp服务"></a>2. 重启xrdp服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart xrdp.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I/O调度策略修改</title>
      <link href="/2023/03/10/io-diao-du-ce-lue-xiu-gai/"/>
      <url>/2023/03/10/io-diao-du-ce-lue-xiu-gai/</url>
      
        <content type="html"><![CDATA[<h4 id="I-O调度策略修改"><a href="#I-O调度策略修改" class="headerlink" title="I/O调度策略修改"></a>I/O调度策略修改</h4><p>调度策略的修改是比较简单的，首先查看当前使用的调度算法，使用CRT工具连接到controller节点，查看调度算法，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cat /sys/block/vda/queue/scheduler </span><span class="token punctuation">[</span>mq-deadline<span class="token punctuation">]</span> kyber none<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到当前的I/O调度算法为mq-deadline，如果当前全是用的是SSD硬盘，那么显然none算法更合适，修改算法为none，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># echo none &gt; /sys/block/vda/queue/scheduler</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改完之后，查看当前使用的算法，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># cat /sys/block/vda/queue/scheduler </span><span class="token punctuation">[</span>none<span class="token punctuation">]</span> mq-deadline kyber <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到当前的I/O调度算法为none模式。</p><p>以上就是I/O策略的优化，无论是单队列还是多队列，都可以使用echo命令去修改当前的I/O策略。选择何种策略，也需要根据当前使用的硬盘与应用场景来决定，不能盲目修改。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack Help</title>
      <link href="/2023/03/10/openstack-help/"/>
      <url>/2023/03/10/openstack-help/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/keystone/admin-openrc.sh openstack console url show exam <span class="token comment">#无需打开dashboard获取实例exam的vnc链接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="glance"><a href="#glance" class="headerlink" title="glance"></a>glance</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建cirros镜像</span>openstack image create “centos” <span class="token punctuation">\</span>--disk-format qcow2 <span class="token punctuation">\</span>--container-format bare <span class="token punctuation">\</span><span class="token parameter variable">--shared</span> <span class="token operator">&lt;</span>./cirros-0.3.5-x86_64-disk.img <span class="token comment">#创建cirros镜像</span>glance image-create <span class="token parameter variable">--name</span> cirros <span class="token punctuation">\</span>--disk-format qcow2 --container-format bare <span class="token punctuation">\</span><span class="token parameter variable">--progress</span>  <span class="token operator">&lt;</span>./cirros-0.3.5-x86_64-disk.img <span class="token comment">#创建cirros镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除镜像</span>openstack image delete <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> glance image-delete <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">file</span> <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span> <span class="token comment">#查看某文件信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack image <span class="token builtin class-name">set</span> --min-disk<span class="token operator">=</span><span class="token number">1</span> cirros <span class="token comment">#更新镜像信息</span>glance image-update --min-disk<span class="token operator">=</span><span class="token number">0</span> ad741236-5183-4751-8327-b088512c85f3 <span class="token comment">#更新镜像信息</span>--min-disk <span class="token comment">#镜像启动最小硬盘大小</span><span class="token parameter variable">--name</span> <span class="token comment">#镜像名称</span>--disk-format <span class="token comment">#镜像格式</span>--min-ram <span class="token comment">#镜像启动最小内存大小</span>--container-format <span class="token comment">#镜像在项目中可见性</span>openstack image show <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>or<span class="token operator">&lt;</span>id<span class="token operator">&gt;</span> <span class="token comment"># 查看镜像详细信息</span>glance image-show <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span> <span class="token comment">#查看镜像详细信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="glance对接Swift作后端存储"><a href="#glance对接Swift作后端存储" class="headerlink" title="glance对接Swift作后端存储"></a>glance对接Swift作后端存储</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_container glancecrudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_create_container_on_put <span class="token boolean">true</span>crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_multi_tenant <span class="token boolean">true</span>crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_admin_tenant <span class="token function">service</span>crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_user 000000crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store swift_store_key 000000crudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store stores swiftcrudini <span class="token parameter variable">--set</span> /etc/glance/glance-api.conf glance_store default_store swift<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="glance对接cinder作后端存储"><a href="#glance对接cinder作后端存储" class="headerlink" title="glance对接cinder作后端存储"></a>glance对接cinder作后端存储</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################</span>glance配置<span class="token function">vim</span> /etc/glance/glance-api.conf<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>show_multiple_locations <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">[</span>glance_store<span class="token punctuation">]</span><span class="token comment"># stores = file,http</span><span class="token comment"># demo_store = file</span><span class="token comment"># filesystem_store_datadir = /var/lib/glance/images/</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>stores <span class="token operator">=</span> cinderdefault_store <span class="token operator">=</span> cinder<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart openstack-glance*</span><span class="token comment">##################</span>cinder配置<span class="token function">vim</span> /etc/cinder/cinder.conf<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>allowed_direct_url_schemes <span class="token operator">=</span> cinderimage_upload_use_cinder_backend <span class="token operator">=</span> <span class="token boolean">true</span>image_upload_use_internal_tenant <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart openstack-cinder*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="glance对接nfs作后端存储"><a href="#glance对接nfs作后端存储" class="headerlink" title="glance对接nfs作后端存储"></a>glance对接nfs作后端存储</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nfs-server配置<span class="token comment">#############</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># yum install rpcbind nfs-utils -y</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p /nfs/share</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/exports</span>/nfs/share <span class="token number">192.168</span>.200.0<span class="token punctuation">(</span>rw,sync,no_root_squash,no_all_squash,anonuid<span class="token operator">=</span><span class="token number">501</span>,anongid<span class="token operator">=</span><span class="token number">501</span><span class="token punctuation">)</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># exportfs -r</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># rpcinfo -p</span>   program vers proto   port  <span class="token function">service</span>    <span class="token number">100000</span>    <span class="token number">4</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">3</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">2</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">4</span>   udp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">3</span>   udp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">2</span>   udp    <span class="token number">111</span>  portmapper<span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart rpcbind </span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># rpcinfo -p</span>   program vers proto   port  <span class="token function">service</span>    <span class="token number">100000</span>    <span class="token number">4</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">3</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">2</span>   tcp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">4</span>   udp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">3</span>   udp    <span class="token number">111</span>  portmapper    <span class="token number">100000</span>    <span class="token number">2</span>   udp    <span class="token number">111</span>  portmapper    <span class="token number">100024</span>    <span class="token number">1</span>   udp  <span class="token number">38286</span>  status    <span class="token number">100024</span>    <span class="token number">1</span>   tcp  <span class="token number">51127</span>  status    <span class="token number">100005</span>    <span class="token number">1</span>   udp  <span class="token number">20048</span>  mountd    <span class="token number">100005</span>    <span class="token number">1</span>   tcp  <span class="token number">20048</span>  mountd    <span class="token number">100005</span>    <span class="token number">2</span>   udp  <span class="token number">20048</span>  mountd    <span class="token number">100005</span>    <span class="token number">2</span>   tcp  <span class="token number">20048</span>  mountd    <span class="token number">100005</span>    <span class="token number">3</span>   udp  <span class="token number">20048</span>  mountd    <span class="token number">100005</span>    <span class="token number">3</span>   tcp  <span class="token number">20048</span>  mountd    <span class="token number">100003</span>    <span class="token number">3</span>   tcp   <span class="token number">2049</span>  nfs    <span class="token number">100003</span>    <span class="token number">4</span>   tcp   <span class="token number">2049</span>  nfs    <span class="token number">100227</span>    <span class="token number">3</span>   tcp   <span class="token number">2049</span>  nfs_acl    <span class="token number">100003</span>    <span class="token number">3</span>   udp   <span class="token number">2049</span>  nfs    <span class="token number">100003</span>    <span class="token number">4</span>   udp   <span class="token number">2049</span>  nfs    <span class="token number">100227</span>    <span class="token number">3</span>   udp   <span class="token number">2049</span>  nfs_acl    <span class="token number">100021</span>    <span class="token number">1</span>   udp  <span class="token number">51358</span>  nlockmgr    <span class="token number">100021</span>    <span class="token number">3</span>   udp  <span class="token number">51358</span>  nlockmgr    <span class="token number">100021</span>    <span class="token number">4</span>   udp  <span class="token number">51358</span>  nlockmgr    <span class="token number">100021</span>    <span class="token number">1</span>   tcp  <span class="token number">37191</span>  nlockmgr    <span class="token number">100021</span>    <span class="token number">3</span>   tcp  <span class="token number">37191</span>  nlockmgr    <span class="token number">100021</span>    <span class="token number">4</span>   tcp  <span class="token number">37191</span>  nlockmgr<span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable rpcbind nfs-server</span><span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># showmount -e 192.168.200.131</span>Export list <span class="token keyword">for</span> <span class="token number">192.168</span>.200.131:/nfs/share <span class="token number">192.168</span>.200.0/24controller glance配置<span class="token comment">####################</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># yum install rpcbind nfs-utils -y</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># df -Th</span>Filesystem              Type              Size  Used Avail Use% Mounted ondevtmpfs                devtmpfs          <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /devtmpfs                   tmpfs             <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /dev/shmtmpfs                   tmpfs             <span class="token number">1</span>.4G   12M  <span class="token number">1</span>.4G   <span class="token number">1</span>% /runtmpfs                   tmpfs             <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /sys/fs/cgroup/dev/mapper/centos-root xfs                42G  <span class="token number">8</span>.2G   34G  <span class="token number">20</span>% //dev/sda1               xfs               497M  144M  354M  <span class="token number">29</span>% /boottmpfs                   tmpfs             279M     <span class="token number">0</span>  279M   <span class="token number">0</span>% /run/user/0<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># mount -t nfs 192.168.200.131:/nfs/share /var/lib/glance/images/</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># df -Th</span>Filesystem                 Type              Size  Used Avail Use% Mounted ondevtmpfs                   devtmpfs          <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /devtmpfs                      tmpfs             <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /dev/shmtmpfs                      tmpfs             <span class="token number">1</span>.4G   12M  <span class="token number">1</span>.4G   <span class="token number">1</span>% /runtmpfs                      tmpfs             <span class="token number">1</span>.4G     <span class="token number">0</span>  <span class="token number">1</span>.4G   <span class="token number">0</span>% /sys/fs/cgroup/dev/mapper/centos-root    xfs                42G  <span class="token number">8</span>.2G   34G  <span class="token number">20</span>% //dev/sda1                  xfs               497M  144M  354M  <span class="token number">29</span>% /boottmpfs                      tmpfs             279M     <span class="token number">0</span>  279M   <span class="token number">0</span>% /run/user/0vmhgfs-fuse                fuse.vmhgfs-fuse   72G   53G   19G  <span class="token number">74</span>% /mnt/hgfs<span class="token number">192.168</span>.200.131:/nfs/share nfs4               72G  <span class="token number">2</span>.3G   70G   <span class="token number">4</span>% /var/lib/glance/images<span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># chown glance:glance /var/lib/glance/images</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># source admin-openrc.sh</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack image create test --disk-format qcow2 --container-format bare --public &lt;./cirros-0.3.0-x86_64-disk.img</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># openstack image list</span>+--------------------------------------+--------+--------+<span class="token operator">|</span> ID                                   <span class="token operator">|</span> Name   <span class="token operator">|</span> Status <span class="token operator">|</span>+--------------------------------------+--------+--------+<span class="token operator">|</span> 4872e790-ae84-42a1-b1ae-109cc3365647 <span class="token operator">|</span> cirros <span class="token operator">|</span> active <span class="token operator">|</span><span class="token operator">|</span> a3aa4889-522e-4e4c-a9fc-e2a4a98d7ab7 <span class="token operator">|</span> <span class="token builtin class-name">test</span>   <span class="token operator">|</span> active <span class="token operator">|</span>+--------------------------------------+--------+--------+测试<span class="token comment">####</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># ls /var/lib/glance/images/</span>a3aa4889-522e-4e4c-a9fc-e2a4a98d7ab7<span class="token punctuation">[</span>root@nfs-server ~<span class="token punctuation">]</span><span class="token comment"># ls /nfs/share/</span>a3aa4889-522e-4e4c-a9fc-e2a4a98d7ab7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nova"><a href="#nova" class="headerlink" title="nova"></a>nova</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">crudini <span class="token parameter variable">--set</span> /etc/nova/nova.conf libvirt virt_type qemu <span class="token comment">#在虚拟机环境下需设置</span>systemctl restart openstack-nova-compute <span class="token comment">#重启nova服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="neutron"><a href="#neutron" class="headerlink" title="neutron"></a>neutron</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack network create ext-net <span class="token punctuation">\</span>--provider-netowrk-type vlan <span class="token punctuation">\</span>--provider-physical-network provider <span class="token punctuation">\</span>--provider-segment <span class="token number">200</span> <span class="token comment">#创建网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack subnet create ext-subnet <span class="token punctuation">\</span>--ext-net <span class="token punctuation">\</span>--allocation-poll <span class="token assign-left variable">start</span><span class="token operator">=</span><span class="token number">192.168</span>.200.X,end<span class="token operator">=</span><span class="token number">192.168</span>.200.X <span class="token punctuation">\</span><span class="token parameter variable">--gateway</span> <span class="token number">192.168</span>.200.1 <span class="token punctuation">\</span>--subnet-range <span class="token number">192.168</span>.200.0/24 <span class="token comment">#创建子网并绑定网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack network list <span class="token comment">#列出所有网络</span>openstack subnet list <span class="token comment">#列出所有子网</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="cinder"><a href="#cinder" class="headerlink" title="cinder"></a>cinder</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack volume create <span class="token parameter variable">--size</span> <span class="token number">2</span> volume <span class="token comment">#创建一个大小2G的卷volume</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack volume list <span class="token comment"># 列出所有卷的信息</span>openstack volume show volume <span class="token comment"># 列出名称为volume的卷的详细信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack server <span class="token function">add</span> volume exam volume <span class="token comment">#为exam实例挂载卷volume</span>openstack server remove volume exam volume <span class="token comment">#卸载exam的volume卷</span>openstack volume <span class="token builtin class-name">set</span> <span class="token parameter variable">--size</span> <span class="token number">3</span> volume <span class="token comment">#设置volume卷的大小为3G</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="flavor"><a href="#flavor" class="headerlink" title="flavor"></a>flavor</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack flavor create m1 <span class="token punctuation">\</span><span class="token parameter variable">--disk</span> <span class="token number">10</span> <span class="token parameter variable">--ram</span> <span class="token number">512</span> <span class="token parameter variable">--vcpus</span> <span class="token number">1</span> <span class="token parameter variable">--id</span> <span class="token number">10</span> <span class="token comment">#创建实例类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack flavor list <span class="token comment">#列出所有实例类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Security-Group"><a href="#Security-Group" class="headerlink" title="Security Group"></a>Security Group</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack security group list <span class="token comment">#列出所有安全组</span>openstack security group rule list  <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span> <span class="token comment">#列出此安全组所有规则</span>openstack security group rule show <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span> <span class="token comment">#列出此规则详细信息</span>openstack security group create <span class="token builtin class-name">test</span> <span class="token comment">#创建test安全组</span>openstack security group delete <span class="token builtin class-name">test</span> <span class="token comment">#删除test安全组</span>openstack security group rule create <span class="token parameter variable">--protocol</span> icmp <span class="token parameter variable">--ingress</span> <span class="token builtin class-name">test</span> <span class="token comment">#添加入口ICMP全部通过规则到test安全组</span>openstack security group rule create <span class="token parameter variable">--protocol</span> icmp <span class="token parameter variable">--egress</span> <span class="token builtin class-name">test</span> <span class="token comment">#添加出口ICMP全部通过规则到test安全组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack server list <span class="token comment">#列出所有实例</span>openstack server stop <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>or<span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token comment">#实例暂停</span>openstack server start <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>or<span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token comment">#实例开机</span>openstack server <span class="token function">reboot</span> <span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>or<span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token comment">#实例重启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="swift"><a href="#swift" class="headerlink" title="swift"></a>swift</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">swift <span class="token function">stat</span> <span class="token comment">#查看Swift组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack container create swift-test <span class="token comment">#创建swift-test容器</span>openstack container list <span class="token comment">#列出所有容器</span>openstack container show swift-test <span class="token comment">#查看swift-test容器详细信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建object前需将上传后的目录结构在本地创建，这里在本地创建名为“test”的目录“/root/test”,将/root/anaconda-ks.cfg文件复制到“/root/test”目录中</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># mkdir test</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># cp anaconda-ks.cfg test/</span>openstack object create swift-test test/anaconda-ks.cfg <span class="token comment">#创建对象</span>openstack object list swift-test <span class="token comment">#查看swift-test容器中所有对象</span>openstack object show swift-test test/anaconda-ks.cfg <span class="token comment">#查看swift-test容器中test/anaconda-ks.cfg对象详细信息</span><span class="token punctuation">[</span>root@controller opt<span class="token punctuation">]</span><span class="token comment"># cd /opt/</span><span class="token punctuation">[</span>root@controller opt<span class="token punctuation">]</span><span class="token comment"># openstack object save swift-test test/anaconda-ks.cfg</span><span class="token punctuation">[</span>root@controller opt<span class="token punctuation">]</span><span class="token comment"># ls test/</span>anaconda-ks.cfg  <span class="token comment">#下载对象test/anaconda-ks.cfg到opt目录下</span>openstack object delete swift-test test/anaconda-ks.cfg <span class="token comment">#删除test/anaconda-ks.cfg对象</span>openstack container delete swift-test <span class="token comment">#删除swfit-test容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># swift post test #创建容器test</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># swift stat test #查看容器test</span>               Account: AUTH_50cec6526baa4ce58bc228f43cd84a70             Container: <span class="token builtin class-name">test</span>               Objects: <span class="token number">0</span>                 Bytes: <span class="token number">0</span>              Read ACL:             Write ACL:               Sync To:              Sync Key:         Accept-Ranges: bytes      X-Storage-Policy: Policy-0         Last-Modified: Sat, <span class="token number">12</span> Nov <span class="token number">2022</span> 09:43:00 GMT           X-Timestamp: <span class="token number">1668246092.88731</span>            X-Trans-Id: txcb18528f6f174e10ac794-00636f6aa8          Content-Type: application/json<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8X-Openstack-Request-Id: txcb18528f6f174e10ac794-00636f6aa8swift upload <span class="token builtin class-name">test</span> <span class="token parameter variable">-S</span> <span class="token number">10000000</span> cirros-0.3.5-x86_64-disk.img <span class="token comment">#上传cirros镜像到test容器并分片存储 每个片段大小为10M</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># swift list test_segments #查看存储路径中的数据片可看到单个存储片大小为10M，镜像大小为13M左右，所以分成了两片</span>cirros-0.3.5-x86_64-disk.img/1647249152.000000/13267968/10000000/00000000cirros-0.3.5-x86_64-disk.img/1647249152.000000/13267968/10000000/00000001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2022/11/12</p><h3 id="Barbican"><a href="#Barbican" class="headerlink" title="Barbican"></a>Barbican</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Barbican是openstack的key管理组件，定位在提供REST API 来安全存储、提供和管理“秘密”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openstack secret store <span class="token parameter variable">--name</span> secret01 <span class="token parameter variable">--payload</span> secretkey <span class="token comment">#创建secret01密钥</span>openstack secret list <span class="token comment">#列出所有密钥</span>openstack secret get <span class="token operator">&lt;</span>secret href<span class="token operator">&gt;</span> <span class="token comment">#获取密钥元数据</span>openstack secret get http://controller:9311/v1/secrets/70df933c-6987-4ea6-b87b-fc6f81da54a1 <span class="token parameter variable">--payload</span> <span class="token comment">#查看secret01密钥负载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> OpenStack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统句柄优化</title>
      <link href="/2023/03/10/linux-xi-tong-ju-bing-you-hua/"/>
      <url>/2023/03/10/linux-xi-tong-ju-bing-you-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux系统句柄优化"><a href="#Linux系统句柄优化" class="headerlink" title="Linux系统句柄优化"></a>Linux系统句柄优化</h3><h4 id="（1）查看当前的句柄数"><a href="#（1）查看当前的句柄数" class="headerlink" title="（1）查看当前的句柄数"></a>（1）查看当前的句柄数</h4><p>使用CRT等远程连接工具，连接至192.168.200.21，查看当前系统默认的文件句柄数量，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ulimit -n</span><span class="token number">1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到当前的系统默认限制是1024。</p><h4 id="（2）修改句柄数"><a href="#（2）修改句柄数" class="headerlink" title="（2）修改句柄数."></a>（2）修改句柄数.</h4><p>修改Linux系统的句柄数限制有两种方法，一种是使用ulimit命令临时生效，另外一种是修改配置文件，永久生效。此处使用修改配置文件的方式。</p><p><strong>注意：</strong>如果使用命令临时生效句柄限制，root用户可以调大或者调小句柄的限制，而非root用户一旦设定了值，就只能调小这个限制，不能调大，不然会报“bash: ulimit: open files: cannot modify limit: Operation not permitted”的错误。</p><p>修改配置文件调整句柄限制为65535，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># echo "* soft nofile 65535"  &gt;&gt; /etc/security/limits.conf</span><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># echo "* hard nofile 65535"  &gt;&gt; /etc/security/limits.conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加配置的解释如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*       <span class="token comment">#代表所有用户</span>soft    <span class="token comment">#超过文件句柄数时，仅提示</span>hard    <span class="token comment">#超过文件句柄数时，直接限制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改完之后，不需要重启系统即会生效，但是需要重新登录。退出重新登录该云主机，查看当前的句柄限制，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># logout</span>Connection closed.Last login: Tue Feb  <span class="token number">8</span> 01:58:31 <span class="token number">2022</span> from <span class="token number">192.168</span>.0.70<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># ulimit -n</span><span class="token number">65535</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到当前的限制为65535。</p><p>至此，Linux系统文件句柄优化配置结束。在生产环境中，系统默认的1024远远不够，会导致系统报“too many open files”的错误。所以优化句柄数量限制是很有必要的。此案例默认使用的root用户进行修改，如果使用非root用户，在修改句柄限制的时候，会有比较多的限制，感兴趣的读者，可以自行查找资料学习。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack平台镜像优化</title>
      <link href="/2023/03/10/openstack-ping-tai-jing-xiang-you-hua/"/>
      <url>/2023/03/10/openstack-ping-tai-jing-xiang-you-hua/</url>
      
        <content type="html"><![CDATA[<h4 id="OpenStack平台镜像优化"><a href="#OpenStack平台镜像优化" class="headerlink" title="OpenStack平台镜像优化"></a>OpenStack平台镜像优化</h4><p>在使用打快照方式制作镜像后，镜像的大小会变得非常大，比如一个基础的CentOS镜像大小为400M左右，但是使用打快照方式制作的镜像大小会有1个G左右，具体的大小还要根据安装的东西来实际情况实际分析。</p><p>qemu-img命令中提供一个可用于镜像转换与压缩的选项，即qemu-img convert。接下来使用该命令，对已经打快照完成的镜像进行压缩操作。</p><p>使用提供的镜像CentOS7.5-compress.qcow2，上传至controller节点的/root目录下，查看镜像的大小，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># du -sh CentOS7.5-compress.qcow2</span>892MCentOS7.5-compress.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到当前的镜像大小为892M，接下来使用命令，对镜像进行压缩，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># qemu-img convert -c -O qcow2 CentOS7.5-compress.qcow2 CentOS7.5-compress2.qcow2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令参数的解释如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-c</span>  压缩<span class="token parameter variable">-O</span>  qcow2 输出格式为 qcow2CentOS7.5-compress.qcow2   被压缩的文件CentOS7.5-compress2.qcow2  压缩完成后文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>等待一小段时间后，压缩完成，查看当前目录下CentOS7.5-compress2.qcow2镜像文件的大小，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># du -sh CentOS7.5-compress2.qcow2 </span>405MCentOS7.5-compress2.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到镜像大概被压缩到了一半的大小。使用qemu-img convert命令可以压缩qcow2镜像，在日常的工作中，经常会用到此命令进行镜像压缩。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Openstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ优化</title>
      <link href="/2023/02/06/rabbitmq-de-you-hua/"/>
      <url>/2023/02/06/rabbitmq-de-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ的优化"><a href="#RabbitMQ的优化" class="headerlink" title="RabbitMQ的优化"></a>RabbitMQ的优化</h2><p>在上面的文章中可以看到，RabbitMQ的连接数是压垮消息队列的一个重要的指标。所以在平时使用OpenStack平台的过程中，如果大量的用户同时创建虚拟机，会导致云平台创建报错，其实就是消息队列服务的崩溃。</p><p>在优化方面，我们首先想到，是将RabbitMQ服务默认的连接数量改大，修改方法如下：</p><h3 id="（1）系统级别修改"><a href="#（1）系统级别修改" class="headerlink" title="（1）系统级别修改"></a>（1）系统级别修改</h3><p>使用CRT等远程工具连接到controller节点，然后修改配置文件，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/sysctl.conf</span>fs.file-max<span class="token operator">=</span><span class="token number">10240</span><span class="token comment">#在sysctl.conf文件的最下方添加一行fs.file-max=10240</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改完毕后保存退出并生效配置，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>fs.file-max <span class="token operator">=</span> <span class="token number">10240</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="（2）用户级别修改"><a href="#（2）用户级别修改" class="headerlink" title="（2）用户级别修改"></a>（2）用户级别修改</h3><p>用户级别修改，编辑/etc/security/limits.conf配置文件，具体命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/security/limits.conf</span>openstack  soft     nofile  <span class="token number">10240</span>openstack  hard     nofile  <span class="token number">10240</span><span class="token comment">#在配置文件的最后添加两行内容如上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改完之后，保存退出。</p><h3 id="（3）修改RabbitMQ配置"><a href="#（3）修改RabbitMQ配置" class="headerlink" title="（3）修改RabbitMQ配置"></a>（3）修改RabbitMQ配置</h3><p>修改RabbitMQ服务的service配置文件rabbitmq-server.service，具体命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># vi /usr/lib/systemd/system/rabbitmq-server.service</span><span class="token comment">#在[Service]下添加一行参数如下：</span><span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">10240</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（4）重启RabbitMQ服务"><a href="#（4）重启RabbitMQ服务" class="headerlink" title="（4）重启RabbitMQ服务"></a>（4）重启RabbitMQ服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart rabbitmq-server</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启完毕后，查看RabbitMQ的最大连接数，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@controller ~<span class="token punctuation">]</span><span class="token comment"># rabbitmqctl status</span>Status of <span class="token function">node</span> rabbit@openstack<span class="token punctuation">..</span>.忽略输出<span class="token punctuation">..</span>. <span class="token punctuation">{</span>file_descriptors,     <span class="token punctuation">[</span><span class="token punctuation">{</span>total_limit,10140<span class="token punctuation">}</span>,      <span class="token punctuation">{</span>total_used,53<span class="token punctuation">}</span>,      <span class="token punctuation">{</span>sockets_limit,9124<span class="token punctuation">}</span>,      <span class="token punctuation">{</span>sockets_used,51<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到当前的RabbitMQ已被修改。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pxe+kickstart 无人值守安装centos7</title>
      <link href="/2022/12/24/pxe-kickstart-wu-ren-zhi-shou-xi-tong-an-zhuang/"/>
      <url>/2022/12/24/pxe-kickstart-wu-ren-zhi-shou-xi-tong-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Pxe-kickstart-无人值守安装centos7"><a href="#Pxe-kickstart-无人值守安装centos7" class="headerlink" title="Pxe+kickstart 无人值守安装centos7"></a>Pxe+kickstart 无人值守安装centos7</h1><h2 id="1、关闭服务端防火墙及selinux并设置主机名"><a href="#1、关闭服务端防火墙及selinux并设置主机名" class="headerlink" title="1、关闭服务端防火墙及selinux并设置主机名"></a>1、关闭服务端防火墙及selinux并设置主机名</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl disable firewalld <span class="token parameter variable">--now</span>setenforce <span class="token number">0</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> ‘s/SELINUX<span class="token operator">=</span>enforcing/SELINUX<span class="token operator">=</span>disabled/g’ /etc/selinux/confighostnamcectl set-hostname server<span class="token builtin class-name">logout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、配置本地yum源并安装http服务"><a href="#2、配置本地yum源并安装http服务" class="headerlink" title="2、配置本地yum源并安装http服务"></a>2、配置本地yum源并安装http服务</h2><h5 id="1-安装http服务并创建镜像文件存放文件夹"><a href="#1-安装http服务并创建镜像文件存放文件夹" class="headerlink" title="1)安装http服务并创建镜像文件存放文件夹"></a>1)安装http服务并创建镜像文件存放文件夹</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> httpd <span class="token parameter variable">-y</span><span class="token function">mkdir</span> /var/www/html/pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-挂载centos7-9-的ISO镜像到mnt目录下"><a href="#2-挂载centos7-9-的ISO镜像到mnt目录下" class="headerlink" title="2)挂载centos7.9 的ISO镜像到mnt目录下"></a>2)挂载centos7.9 的ISO镜像到mnt目录下</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> CentOS-7-x86_64-Everything-2009.iso /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-复制centos7-9镜像文件到-var-www-html-pub-目录下"><a href="#3-复制centos7-9镜像文件到-var-www-html-pub-目录下" class="headerlink" title="3)复制centos7.9镜像文件到 var/www/html/pub/目录下"></a>3)复制centos7.9镜像文件到 var/www/html/pub/目录下</h5> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> /mnt/* /var/www/html/pub/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-创建yum文件备份目录"><a href="#4-创建yum文件备份目录" class="headerlink" title="4)创建yum文件备份目录"></a>4)创建yum文件备份目录</h5> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /etc/yum.repos.d/bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="5-移动原yum文件到备份文件夹"><a href="#5-移动原yum文件到备份文件夹" class="headerlink" title="5)移动原yum文件到备份文件夹"></a>5)移动原yum文件到备份文件夹</h5> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /etc/yum.repo.d/* /etc/yum.repo.d/bak/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="6-创建yum文件"><a href="#6-创建yum文件" class="headerlink" title="6)创建yum文件"></a>6)创建yum文件</h5> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF<span class="token operator">&gt;</span> /etc/yum.repo.d/local.repo<span class="token punctuation">[</span>development<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>centos<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>file:///var/www/html/pub/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enalbed</span><span class="token operator">=</span><span class="token number">1</span>EOFyum repolist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、安装并配置DHCP服务"><a href="#3、安装并配置DHCP服务" class="headerlink" title="3、安装并配置DHCP服务"></a>3、安装并配置DHCP服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> dhcp <span class="token parameter variable">-y</span><span class="token punctuation">\</span>cp /usr/share/doc/dhcp-4.2.5/dhcpd.conf.example /etc/dhcp/dhcpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="1-打开DHCP配置文件并配置服务"><a href="#1-打开DHCP配置文件并配置服务" class="headerlink" title="1)打开DHCP配置文件并配置服务"></a>1)打开DHCP配置文件并配置服务</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/dhcp/dhcpd.conf next-server <span class="token number">192.168</span>.100.60<span class="token punctuation">;</span> <span class="token comment">#tftp服务端地址</span>filename <span class="token string">"/pxelinux.0"</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/09/11/A2c743BSyquLbEr.png" alt="dhcp配置"></p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">subnet <span class="token number">192.168</span>.100.0 netmask <span class="token number">255.255</span>.255.0 <span class="token punctuation">{</span> range <span class="token number">192.168</span>.100.61 <span class="token number">192.168</span>.100.71<span class="token punctuation">;</span> option domain-name-servers <span class="token number">8.8</span>.8.8<span class="token punctuation">;</span> option domain-name <span class="token string">"server.com"</span><span class="token punctuation">;</span> option routers <span class="token number">192.168</span>.100.1<span class="token punctuation">;</span> option broadcast-address <span class="token number">192.168</span>.100.255<span class="token punctuation">;</span> default-lease-time <span class="token number">600</span><span class="token punctuation">;</span> max-lease-time <span class="token number">7200</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/09/11/qNtRWrEQchaUVz9.png" alt="DHCP配置"></p><h2 id="4、安装xinetd-tftp-服务"><a href="#4、安装xinetd-tftp-服务" class="headerlink" title="4、安装xinetd tftp 服务"></a>4、安装xinetd tftp 服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> xinetd tftp tftp-server <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-配置TFTP"><a href="#1-配置TFTP" class="headerlink" title="1)配置TFTP"></a>1)配置TFTP</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/xinetd.d/tftp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/09/11/dyYpXvfkJCOGWqw.png" alt="tftp配置"></p><p>将服务将入开机启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> xinetd tftp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5、获取pxelinux-0文件并将文件放到tfpt根目录"><a href="#5、获取pxelinux-0文件并将文件放到tfpt根目录" class="headerlink" title="5、获取pxelinux.0文件并将文件放到tfpt根目录"></a>5、获取pxelinux.0文件并将文件放到tfpt根目录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> syslinux <span class="token parameter variable">-y</span><span class="token function">cp</span> /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6、创建启动项文件目录"><a href="#6、创建启动项文件目录" class="headerlink" title="6、创建启动项文件目录"></a>6、创建启动项文件目录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /var/lib/tftpboot/pxelinux.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7、复制配置文件到tftp工作目录"><a href="#7、复制配置文件到tftp工作目录" class="headerlink" title="7、复制配置文件到tftp工作目录"></a>7、复制配置文件到tftp工作目录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /var/www/html/pub/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default<span class="token function">cp</span> /var/www/html/pub/isolinux/* /var/lib/tftpboot/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="1-重启xinetd、tftp服务进入客户端可以看见以下界面"><a href="#1-重启xinetd、tftp服务进入客户端可以看见以下界面" class="headerlink" title="1)重启xinetd、tftp服务进入客户端可以看见以下界面"></a>1)重启xinetd、tftp服务进入客户端可以看见以下界面</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart xinetd.service tftp.socket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/09/11/riR8a7w2IyNC693.png" alt="重启tftp、xinetd"></p><h2 id="8、搭建网络安装源"><a href="#8、搭建网络安装源" class="headerlink" title="8、搭建网络安装源"></a>8、搭建网络安装源</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> httpd <span class="token parameter variable">-y</span>systemctl start httpdsystemctl <span class="token builtin class-name">enable</span> httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时可在浏览器输入  http://本机ip/pub 测试httpd服务是否正常运行</p><p><img src="https://s2.loli.net/2023/09/11/vQORurmH8NB1wTy.png" alt="浏览器访问"></p><h2 id="9、创建yum源，为kickstart作准备"><a href="#9、创建yum源，为kickstart作准备" class="headerlink" title="9、创建yum源，为kickstart作准备"></a>9、创建yum源，为kickstart作准备</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF<span class="token operator">&gt;</span> /etc/yum.repos.d/pxe.repo<span class="token punctuation">[</span>development<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>pxe<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://192.168.100.60/pub<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span>EOFyum repolist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、安装kickstart并制作安装脚本"><a href="#10、安装kickstart并制作安装脚本" class="headerlink" title="10、安装kickstart并制作安装脚本"></a>10、安装kickstart并制作安装脚本</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> system-config-kickstart <span class="token parameter variable">-y</span>system-config-kickstart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/09/11/6iXvRSMYsuVgHxJ.png" alt="kick-基本配置.png"></p><p><img src="https://s2.loli.net/2023/09/11/xeHTfo8VWcCIULd.png" alt="kick-安装方法.png"></p><p><img src="https://s2.loli.net/2023/09/11/wnQgyTOZefj1JAh.png" alt="kick-引导装载程序选项.png"></p><p><img src="https://s2.loli.net/2023/09/11/r8Bv3YAJaQEPdwG.png" alt="kick-分区信息.png"></p><p><img src="https://s2.loli.net/2023/09/11/9kSsGYcgNQeDH2r.png" alt="kick-分区选项_swap_.png"></p><p><img src="https://s2.loli.net/2023/09/11/Q6P1qZVoz5cjNY7.png" alt="kick-分区信息_boot_.png"></p><p><img src="https://s2.loli.net/2023/09/11/Nn5P8CDeAimkyYg.png" alt="kick-分区信息_根目录_.png"></p><p><img src="https://s2.loli.net/2023/09/11/C9OjRLlXZpGa4cq.png" alt="kick-网络配置.png"></p><p><img src="https://s2.loli.net/2023/09/11/SuhmUyTOZfcowXx.png" alt="kick-防火墙配置.png"></p><p><img src="https://s2.loli.net/2023/09/11/5k8ojbKYATRUrIt.png" alt="kick-软件包选择.png"></p><p><img src="https://s2.loli.net/2023/09/11/JayxlAVj5wncCR6.png" alt="kick-保存.png"></p><p><img src="https://s2.loli.net/2023/09/11/2r1Ftw3McnTVmfY.png" alt="kick-配置文件命名.png"></p><p>最后选择脚本保存位置及脚本名称</p><h2 id="11、创建ks文件网站目录并放入文件"><a href="#11、创建ks文件网站目录并放入文件" class="headerlink" title="11、创建ks文件网站目录并放入文件"></a>11、创建ks文件网站目录并放入文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /var/www/html/ks<span class="token function">cp</span> ~/ks7.9small.cfg /var/www/html/ks/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="12、更改配置文件并放入tftp根目录下启动文件文件夹"><a href="#12、更改配置文件并放入tftp根目录下启动文件文件夹" class="headerlink" title="12、更改配置文件并放入tftp根目录下启动文件文件夹"></a>12、更改配置文件并放入tftp根目录下启动文件文件夹</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/tftpboot/pxelinux.cfg/default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大概在61至70行 更改配置文件</p><p><img src="https://s2.loli.net/2023/09/11/U1eszI7JXYL4rSu.png" alt="更改pxelinux.cfg配置文件1.png"></p><p>删除66至70行 在62至64行内添加menu default</p><p>并更改65行</p><p><img src="https://s2.loli.net/2023/09/11/G9y7czeBRZoNFIH.png" alt="更改pxelinux.cfg配置文件2.png"></p><h2 id="13、验证是否可用"><a href="#13、验证是否可用" class="headerlink" title="13、验证是否可用"></a>13、验证是否可用</h2><p>重启客户端可看到如下界面，无需操作，由脚本进行自动安装</p><p><img src="https://s2.loli.net/2023/09/11/w4szd1B3h2kTjJ8.png" alt="验证开机.png"></p><p><img src="https://s2.loli.net/2023/09/11/O6bxpmk8yeXtMQ4.png" alt="验证安装.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> deploy </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes Help</title>
      <link href="/2022/11/20/kubernetes-help/"/>
      <url>/2022/11/20/kubernetes-help/</url>
      
        <content type="html"><![CDATA[<h2 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h2><h3 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h3><pre class="line-numbers language-none"><code class="language-none">missing缺少 invalid无限的 scheduler调度器 unauthenticated未认证 exist存在 already已经 weight权重 match匹配 limit限制 resource资源 ratio比率 duplicate重复 rule规则 role角色 policy策略 support支持 got获取，得到 expect期望 parameters参数 provisioner提供者  annotation 注释 unknow未知 forbidden禁止 storage存储 quota限额 available可用的 guaranteed保障 Qos服务质量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="kubectl命令行操作"><a href="#kubectl命令行操作" class="headerlink" title="kubectl命令行操作"></a>kubectl命令行操作</h3> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl explain pod <span class="token comment">#查看pod的yaml文件具体参数示例</span>kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>pod<span class="token operator">&gt;</span> <span class="token function">bash</span> <span class="token comment">#以bash命令行登录到某pod</span>kubectl label nodes k8s-master-node1 <span class="token assign-left variable">exam</span><span class="token operator">=</span>chinaskill <span class="token comment">#给k8s-master-node1节点打上exam=chinaskill的标签</span>kubectl taint nodes k8s-master-node1 node-role.kubernetes/master:NoExecute <span class="token comment">#设置k8s-master-node1节点为污点</span>kubectl taint nodes k8s-master-node1 node-role.kubernetes/master- <span class="token comment">#删除污点</span>kubectl apply <span class="token parameter variable">-f</span> <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span> <span class="token comment">#应用文件配置</span>kubectll scale deployment nginx-deployment <span class="token parameter variable">--replicas</span><span class="token operator">=</span><span class="token number">5</span> <span class="token comment">#扩容pod的副本数量至5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第一套"><a href="#第一套" class="headerlink" title="第一套"></a>第一套</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#检测pod是否健康</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/httpd    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>      <span class="token key atrule">postStart</span><span class="token punctuation">:</span>        <span class="token key atrule">exec</span><span class="token punctuation">:</span>          <span class="token key atrule">command</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> /bin/sh          <span class="token punctuation">-</span> <span class="token punctuation">-</span>c          <span class="token punctuation">-</span> <span class="token string">'echo Healty &gt; /usr/local/apache2/htdocs/healthz'</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> cat         <span class="token punctuation">-</span> /usr/local/apache2/htdocs/healthz      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">15</span>      <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/httpd    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">args</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /bin/sh      <span class="token punctuation">-</span> <span class="token punctuation">-</span>c      <span class="token punctuation">-</span> echo ok <span class="token punctuation">&gt;</span> /tmp/health; sleep 10; rm <span class="token punctuation">-</span>rf /tmp/health; sleep 600      <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> cat         <span class="token punctuation">-</span> /usr/local/apache2/htdocs/healthz      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">15</span>      <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、为master节点打上标签“disktype=ssd”和标签“exam=chinaskill”，然后在master节点/root目录下编写YAML文件deployment.yaml创建Deployment，具体要求如下：</p><p>​（1）Deployment名称：nginx-deployment;</p><p>​（2）要求Pod只能调度到具有标签“disktype=ssd”的节点上；</p><p>​（3）具有标签“exam=chinaskill”的节点优先被调度。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#设置亲和度，选择pod在哪个节点运行</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> deployment<span class="token punctuation">-</span>httpd<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> httpd  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>httpd      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> httpd    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/httpd      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>        <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>           <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>            <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> disktype                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                <span class="token key atrule">values</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> ssd          <span class="token key atrule">preferredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token key atrule">preference</span><span class="token punctuation">:</span>               <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> exam                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                 <span class="token key atrule">values</span><span class="token punctuation">:</span>                 <span class="token punctuation">-</span> chinaskill<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221122174142192.png" alt="image-20221122174142192"></p><p>3、master 节点/root 目求编与YAML 文件 limitrange.yaml ，具体要求如下:<br>    （1）LimitRange 名称: mem-limit-range;<br>    （2）命名空间：default;<br>    （3）容器默认资源请求为 256Mi内存、500m-CPU;<br>    （4）器资源请求上限为 800Mi 内存、3000mCPU;<br>    （5）内存和CPU超售的比率均为 2。<br>完成后使用该 yaml 文件创建 LimitRange.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange<span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mem<span class="token punctuation">-</span>limit<span class="token punctuation">-</span>range <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">max</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 3000m      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 800Mi    <span class="token key atrule">maxLimitRequestRatio</span><span class="token punctuation">:</span>       <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">defaultRequest</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 256Mi    <span class="token key atrule">type</span><span class="token punctuation">:</span> Container <span class="token comment">#注意资源类型首字母大写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221122185146176.png" alt="image-20221122185146176"></p><p>5、在master节点/root目录下编写YAML文件role.yaml文件创建集群角色，具体要求如下：</p><p>​（1）集群角色名称：deployment-clusterrole；</p><p>​（2）该角色拥有对Deployment，Daemonset，StatefulSet的创建权限。</p><p>完成后使用该YAML文件创建角色。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> deployment<span class="token punctuation">-</span>cluterrole<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Delpoyment"</span><span class="token punctuation">,</span><span class="token string">"Daemonset"</span><span class="token punctuation">,</span><span class="token string">"StatefulSet"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"create"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221123130453429.png" alt="image-20221123130453429"></p><p>6、在master节点/root目录下编写YAML文件network.yaml文件创建网络策略，具体要求如下：</p><p>​（1）网络策略名称：exam-network；</p><p>​（2）针对namespace-test下的Pod，只允许相同namespace下的Pod访问，并且可访问Pod的9000端口。</p><p>完成后使用该YAML文件创建网络策略。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token punctuation">-</span>network  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>  <span class="token key atrule">ingress</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">podSelector</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP <span class="token comment">#协议名称注意大写</span>      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221123133655016.png" alt="image-20221123133655016"></p><p>7、在master节点/root目录下编写YAML文件pv.yaml创建PV，具体要求如下：</p><p>​（1）PV名称：app-pv；</p><p>​（2）容量为10Gi；</p><p>​（3）访问模式为ReadWriteMany;</p><p>​（4）volume的类型为hostPath，位置为/src/app-config。</p><p>完成后使用该YAML文件创建PV。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> app<span class="token punctuation">-</span>pv<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span>  /src/app<span class="token punctuation">-</span>config  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二套"><a href="#第二套" class="headerlink" title="第二套"></a>第二套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221123144552782.png" alt="image-20221123144552782"></p><p>1、默认情况下，Pod会占用所有可用计算资源，请设置为系统守护进程kube-reserverd和system-reserverd预留500mCPU、1Gimemory和1Giephemeral-storage计算资源。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">vim /var/lib/kubelet/config.yaml...<span class="token key atrule">enforceNodeAllocatable</span><span class="token punctuation">:</span><span class="token punctuation">-</span> pods<span class="token key atrule">kubeReserved</span><span class="token punctuation">:</span>  <span class="token comment">#配置kube预留资源</span>  <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m  <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi  <span class="token key atrule">ephemeral-storage</span><span class="token punctuation">:</span> 1Gi<span class="token key atrule">systemReserved</span><span class="token punctuation">:</span>  <span class="token comment">#配置系统预留资源</span>  <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m  <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi  <span class="token key atrule">ephemeral-storage</span><span class="token punctuation">:</span> 1Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221123155837058.png" alt="image-20221123155837058"></p><p>2、在master节点/root目录下编写YAML文件init-pod.yaml创建Pod，具体要求如下：</p><p>​（1）Pod名称：nginx；</p><p>​（2）镜像：busybox；</p><p>​（3）添加一个Init-Container，Init-Container的作用是创建一个空文件；</p><p>​（4）Pod的Container判断文件是否存在，不存在则退出。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"touch /var/myfile"</span><span class="token punctuation">]</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> html      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"ls /var/myfile &amp;&amp; sleep 360 || exit 1"</span><span class="token punctuation">]</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> html      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> html    <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124133755732.png" alt="image-20221124133755732"></p><p>3、在master节点/root目录下编写YAML文件创建Pod，具体要求如下：</p><p>​（1）Pod名称：exam;</p><p>​（2）镜像：nginx;</p><p>​（3）Volume名称为cache-volume，将起/data目录改在到宿主机/data目录下。</p><p>完成后使用该YAML文件创建Pod。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>volume    <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>       <span class="token key atrule">path</span><span class="token punctuation">:</span> /data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124135506134.png" alt="image-20221124135506134"></p><p>4、在master节点/root目录下编写YAML文件nginx-deployment.yaml创建Deployment，具体要求如下：</p><p>​（1）Deployment名称：nginx;</p><p>​（2）保证其副本在每个节点上运行，且不覆盖节点原有的Tolerations。</p><p>完成后使用该YAML文件创建Deployment。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> DaemonSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124142107438.png" alt="image-20221124142107438"></p><p>5、在master节点/root目录下编写YAML文件nginx-service.yaml为上一题的Deployment创建一个Service，具体要求如下：</p><p>​（1）Service名称：nginx;</p><p>​（2）以ClusterIP方式访问服务;</p><p>完成后使用该YAML文件创建Service。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP  <span class="token comment">#注意协议名大写</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124150657756.png" alt="image-20221124150657756"></p><p>6、在master节点/root目录下编写YAML文件quota.yaml创建StorageQuota，具体要求如下：</p><p>​（1）StorageQuota名称：storageqyota;</p><p>​（2）限制命名空间exam的PVC数目为10;</p><p>​（3）限制命名空间exam累计存储容量为20Gi;</p><p>完成后使用该YAML文件创建StorageQuota。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> storagequota  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> exam<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hard</span><span class="token punctuation">:</span>    <span class="token key atrule">persistentvolumeclaims</span><span class="token punctuation">:</span> <span class="token string">"10"</span>    <span class="token key atrule">requests.storage</span><span class="token punctuation">:</span> <span class="token string">"20Gi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124153142074.png" alt="image-20221124153142074"></p><p>7、在master节点/root目录下编写YAML文件pv.yaml创建PV，具体要求如下：</p><p>​（1）PV名称：pv-loval;</p><p>​（2）回收策略：Delete;</p><p>​（3）访问模式：RWO;</p><p>​（4）挂载路径：node节点/data/k8s/localpv;</p><p>​（5）卷容量：5G;</p><p>完成后使用该YAML文件创建pv。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pv<span class="token punctuation">-</span>local<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /data/k8s/localpv  <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>    <span class="token key atrule">required</span><span class="token punctuation">:</span>      <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> worker          <span class="token key atrule">operator</span><span class="token punctuation">:</span> In          <span class="token key atrule">values</span><span class="token punctuation">:</span>           <span class="token punctuation">-</span> node1   <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Delete  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 5Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三套"><a href="#第三套" class="headerlink" title="第三套"></a>第三套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124172226238.png" alt="image-20221124172226238"></p><p>1、配置集群节点，要求节点可用内存低于500Mi时，kubelet开始驱逐节点上的Pods。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/kubelet/config.yaml<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>eviction-hard<span class="token operator">=</span>memory.available<span class="token operator">&lt;</span>500M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124172941759.png" alt="image-20221124172941759"></p><p>2、在master节点/root目录下编写YAML文件deployment.yaml创建Deployment，具体要求如下：</p><p>​（1）Deployment名称：nginx-app;</p><p>​（2）包含3个副本;</p><p>​（3）镜像使用nginx:1.11.9;</p><p>完成后使用该YAML文件创建Deployment，然后通过滚动升级的方式更新镜像版本为1.12.0，并记录这个更新，最后，回滚该更新到之前的1.11.9版本。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> httpd  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span>      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>       <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> httpd    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/httpd        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>                kubectl apply <span class="token punctuation">-</span>f deployment<span class="token punctuation">-</span>roll.yaml <span class="token punctuation">-</span><span class="token punctuation">-</span>record <span class="token comment">#记录命令</span>kubectl rollout history deployment httpd  <span class="token comment">#查看是否记录命令</span>kubectl set image <span class="token punctuation">-</span>f deployment<span class="token punctuation">-</span>roll.yaml httpd=192.168.10.131/library/httpd<span class="token punctuation">:</span>v1.2.3 <span class="token comment">#设置更新镜像版本，由于没有新版本镜像这里镜像版本随意填写</span>kubectl rollout undo deployment httpd <span class="token punctuation">-</span><span class="token punctuation">-</span>to<span class="token punctuation">-</span>revision=1 <span class="token comment">#回滚pod版本到第一版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124220513968.png" alt="image-20221124220513968"></p><p>3、在master节点/root目录下编写YAML文件ns.yaml创建命名空间，具体要求如下：</p><p>​（1）命名空间名称：default-cpu-example;</p><p>​（2）该namespace内容器默认的CPU请求500m，CPU请求限制为2000m;</p><p>完成后使用该YAML文件创建命名空间。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>cpu<span class="token punctuation">-</span>example<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> cpu<span class="token punctuation">-</span>limitrange  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>cpu<span class="token punctuation">-</span>example<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">max</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 2000m    <span class="token key atrule">defaultRequest</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m    <span class="token key atrule">type</span><span class="token punctuation">:</span> Container <span class="token comment">###注意添加类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221124222646547.png" alt="image-20221124222646547"></p><p>4．在master节点／root目录下编写YAML文件pod．yaml创建Pod，具体要求如下：</p><p>（1）Pod名称：nginx；</p><p>（2）镜像：nginx：latest；</p><p>（3）要求该Pod以Guaranteed·QoS类运行，其requests值等于limits值．</p><p>完成后使用该YAML文件创建Pod.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">limits</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi      <span class="token key atrule">requests</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125134737941.png"><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125140927622.png" alt="image-20221125140927622"></p><p>5．在master节点／root目录下编写YAML文件cronjobyaml 创建的CronJob，具体要求如下：</p><p>（1）Cronjob名称：cronjob； </p><p>（2）镜像：busybox；</p><p>（3）要求该CronJob的．spec·配置文件每分钟打印出当前时间信息．完成后使用该YAML 文件创建 Cronjob.</p><pre class="line-numbers language-none"><code class="language-none">＊：表示匹配该域的任意值，假如在Minutes域使用＊，则表示每分钟都会触发事件。 o／：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域设置为5／20， 则意味着第1次触发在第5min时，接下来每20min触发一次，将在第25min、第45min 等时刻分别触发。比如，我们要每隔1min执行一次任务，则Cron表达式如下：*/1****<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> batch/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> CronJob<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> cronjob<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">schedule</span><span class="token punctuation">:</span> <span class="token string">"*/1 * * * *"</span>   <span class="token key atrule">jobTemplate</span><span class="token punctuation">:</span>    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">template</span><span class="token punctuation">:</span>        <span class="token key atrule">spec</span><span class="token punctuation">:</span>          <span class="token key atrule">containers</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cronjob<span class="token punctuation">-</span>pod            <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/busybox            <span class="token key atrule">args</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> bin/sh            <span class="token punctuation">-</span> <span class="token punctuation">-</span>c            <span class="token punctuation">-</span> data;          <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> OnFailure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125141150591.png" alt="image-20221125141150591"></p><p>6．在master节点／root目录下编写YAML文件pod-host．yaml创建Pod，具体要求如下： </p><p>（1）Pod 名称：hostaliases-pod；</p><p>（2）为该Pod配置HostAliases，向hosts文件添加额外的条目，将foo.remote、bar.remote解析为127.0.0.1，将foo．remote、bar．remote解析为10.1.2.3．</p><p>完成后使用该YAML文件创建Pod.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> hostaliases<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>hostaliases    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx  <span class="token key atrule">hostAliases</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span>    <span class="token key atrule">hostnames</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"foo.local"</span>    <span class="token punctuation">-</span> <span class="token string">"bar.local"</span>  <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"10.1.2.3"</span>    <span class="token key atrule">hostnames</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"foo.remote"</span>    <span class="token punctuation">-</span> <span class="token string">"bar.remote"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125143252306.png" alt="image-20221125143252306"></p><p>7．在master节点／root目录下编写YAML文件 clusterrole.yaml 创建 ClusterRole，具体要求如下：</p><p>（1）ClusterRole名称：secret-reader； </p><p>（2）对Secret 拥有get、watch、list的权限； </p><p>（3）对Pod和Deployment拥有create、delete、update的权限。</p><p>完成后使用该YAML 文件创建ClusterRole.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> secret<span class="token punctuation">-</span>reader<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Pod"</span><span class="token punctuation">,</span><span class="token string">"Deployment"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"create"</span><span class="token punctuation">,</span><span class="token string">"delete"</span><span class="token punctuation">,</span><span class="token string">"update"</span><span class="token punctuation">]</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Secret"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"watch"</span><span class="token punctuation">,</span><span class="token string">"list"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四套"><a href="#第四套" class="headerlink" title="第四套"></a>第四套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125144142490.png" alt="image-20221125144142490"></p><p>1．为master节点打上“app=exam”标签，并将其调度策略设置为PreferNoSchedule。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl label nodes k8s-master-node1 <span class="token assign-left variable">app</span><span class="token operator">=</span>examkubectl taint <span class="token function">node</span> k8s-master-node1 node-role.kubernetes.io/master<span class="token operator">=</span>:PreferNoSchedule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125144158988.png" alt="image-20221125144158988"></p><p>2．在master节点／root目录下编写YAML文件deployment．yamml，具体要求如下： </p><p>（1）Deployment 名称：nginx；</p><p>（2）镜像：nginx：latest；</p><p>（3）指定其Pod调度到有“app＝exma”标签的节点上．完成后使用该YAML文件创建 Deployment.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>nodeselector        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> exam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125144213171.png" alt="image-20221125144213171"></p><p>3．在master节点／root目录下编写YAML文件service．yaml，具体要求如下：</p><p>（1）Service名称：nginx-service；</p><p>（2）关联名为nginx的Deployment；</p><p>（3）以NodePort方式将其80端口对外暴露为30080．</p><p>完成后使用该YAML文件创建 Service.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>service<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30089</span> <span class="token comment">#由于30080端口已经有服务占用这里改一下端口号</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP     <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125144224805.png" alt="image-20221125144224805"></p><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125155318523.png" alt="image-20221125155318523"></p><p>5．在master 节点创建 Deployment的spec.yaml文件，具体要求如下：</p><p>（1）Deployment 名称：exam2022；</p><p>（2）镜像：redis:latest;</p><p>（3）副本数：7；</p><p>（4）label: app_enb_stage=dev.</p><p>完成后保存这个spec．yaml 文件到 master 节点／opt／exam2022／deploy＿spec．yaml中．</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam2022<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">7</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app_enb_stage</span><span class="token punctuation">:</span> dev  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app_enb_stage</span><span class="token punctuation">:</span> dev    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> httpd<span class="token punctuation">-</span>dev        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/httpd        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125155935897.png" alt="image-20221125155935897"></p><p>6．在master 节点／root目录下编写YAML文件pv．yaml 创建PV，具体要求如下：</p><p>（1）PV名称：test-pv；</p><p>（2）类型：hostPath；</p><p>（3）挂载路径：／data；</p><p>（4）容量：1Gi；</p><p>（5）模式：ReadOnlyMany。</p><p>完成后使用该YAML 文件创建PV。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>pv<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /data  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadOnlyMany  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125163653557.png" alt="image-20221125163653557"></p><p>7．在master 节点／root目录下编写YAML 文件pod-secret．yaml 创建 Secret 和Pod，具体</p><p>要求如下：</p><p>（1）Secret 名称：mysecret；</p><p>（2）包含一个password字段（手动base64加密）；</p><p>（3）第一个Pod-test1 使用env引用mysecret；</p><p>（4）第二个Pod·test2使用 volume引用 mysecret．</p><p>完成后使用该YAML文件创建Secret和Pod.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">echo <span class="token punctuation">-</span>n "123456" <span class="token punctuation">|</span> base64<span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat pod-secret.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysecret<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> MTIzNDU2 <span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat test1.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test1<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test1<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSECRET_PASSWORD      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">secretKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> mysecret          <span class="token key atrule">key</span><span class="token punctuation">:</span> password          <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat test2.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test2<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test2<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> foo      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/etc/foo"</span>      <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> foo    <span class="token key atrule">secret</span><span class="token punctuation">:</span>      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> mysecret      <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125164157943.png" alt="image-20221125164157943"></p><p>8．在Kubernetes 集群中完成Bookinfo样例程序的部署，然后在maser 节点／root目录下 编写YAML 文件istio.yaml 配置HTTP请求超时，具体要求如下：</p><p>（1）路由名称：reviews；</p><p>（2）将请求路由到reviews服务的v2版本；</p><p>（3）对reviews 服务的调用增加一个半秒的请求超时．</p><p>完成后使用该YAML 文件配置HTTP请求超时.</p><h2 id="第五套"><a href="#第五套" class="headerlink" title="第五套"></a>第五套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125180041105.png" alt="image-20221125180041105"></p><p>1．·默认情况下，Pod能够使用集群节点全部可用计算资源，请配置集群为系统守护进程kube-reserved 和 system-reserved 预留 500m·CPU、1Gi-memory和1Gi ephemeral-storage 计 算资源.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/kubelet/config.yaml<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>enforceNodeAllocatable:- podskubeReserved:  <span class="token comment">#配置kube预留资源</span>  cpu: 500m  memory: 1Gi  ephemeral-storage: 1GisystemReserved:  <span class="token comment">#配置系统预留资源</span>  cpu: 500m  memory: 1Gi  ephemeral-storage: 1Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125180049916.png" alt="image-20221125180049916"></p><p>2．在master 节点／roct目录下编写YAML文件pod．yaml 创建Pod，具体要求如下：</p><p>（1）命名空间：default；</p><p>（2）Pod名称：exam；</p><p>（3）该Pod包含2个容器：redis和nginx，分别使用镜像redis和nginx．</p><p>完成后使用该YAML 文件创建Pod.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> redis    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/redis  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125202050428.png" alt="image-20221125202050428"></p><p>3．在master 节点／root目录下编写YAML 文件pod-secret．yaml 创建 Secret和Pod，具体</p><p>要求如下：</p><p>（1）Secret 名称：mysecret；</p><p>（2）包含一个password字段（手动base64加密）；</p><p>（3）第一个Pod-test1使用env引用mysecret；</p><p>（4）第二个Pod-test2使用volume引用mysecret．</p><p>完成后使用该YAML文件创建Secret和Pod.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">echo <span class="token punctuation">-</span>n "123456" <span class="token punctuation">|</span> base64<span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat pod-secret.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysecret<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> MTIzNDU2 <span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat test1.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test1<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test1<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSECRET_PASSWORD      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">secretKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> mysecret          <span class="token key atrule">key</span><span class="token punctuation">:</span> password          <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">[</span>root@k8s<span class="token punctuation">-</span>master<span class="token punctuation">-</span>node1 test<span class="token punctuation">]</span><span class="token comment"># cat test2.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test2<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test2<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> foo      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/etc/foo"</span>      <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> foo    <span class="token key atrule">secret</span><span class="token punctuation">:</span>      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> mysecret      <span class="token key atrule">optional</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125202108783.png" alt="image-20221125202108783"></p><p>4．在master 节点／root目录下编写YAML 文件创建LimitRange，具体要求如下：</p><p>（1）LimitRange 名称：mem-limit-range；</p><p>（2）容器默认资源请求为256Mi内存、500m·CPU；</p><p>（3）容器资源请求上限为800Mi内存、3000m·CPU；</p><p>（4）容器资源请求下限为100Mi内存，300m·CPU；</p><p>（5）内存和CPU超售的比率均为2．</p><p>完成后使用该YAML 创建LimitRang.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mem<span class="token punctuation">-</span>limit<span class="token punctuation">-</span>range<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">max</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 3000m      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 800Mi    <span class="token key atrule">maxLimitRequestRatio</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">defaultRequest</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 256Mi    <span class="token key atrule">min</span><span class="token punctuation">:</span>      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 300m      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi    <span class="token key atrule">type</span><span class="token punctuation">:</span> Container<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125204947792.png" alt="image-20221125204947792"></p><p>5．·为master 节点打上标签“disktype＝ssd”和标签“exam＝chinaskill”，然后在master 节点／root目录下编写YAML 文件创建Deployment，具体要求如下：。</p><p>（1）Deplbyment 名称：nginx-deployment；</p><p>（2）要求Pod只能调度到具有标签“disktype＝ssd”的节点上；</p><p>（3）具有标签“exam＝chinaskill”的节点优先被调度。 </p><p>完成后使用该YAML 文件创建 Deployment.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>nginx      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>require<span class="token punctuation">-</span>pod        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>        <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>            <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> disktype                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                <span class="token key atrule">values</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> ssd          <span class="token key atrule">preferredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token key atrule">preference</span><span class="token punctuation">:</span>              <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> exam                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                <span class="token key atrule">values</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> chinaskill<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125210807555.png" alt="image-20221125210807555"></p><p>6．在master节点／root目录下编写YAML 文件创建ClusterRole，具体要求如下：</p><p>（1）ClusterRole 名称：deployment-clusterrole；</p><p>（2）只拥有对Deployment、Daemonset、StatefulSet的创建权限．</p><p>完成后使用该YAML 文件创建 ClusterRole.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1 <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> deployment<span class="token punctuation">-</span>clusterrole<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Deployment"</span><span class="token punctuation">,</span><span class="token string">"Daemonset"</span><span class="token punctuation">,</span><span class="token string">"StatefulSet"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"create"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125210822500.png" alt="image-20221125210822500"></p><p>7．在master节点／root目录下编写YAML 文件创建 ServiceAccount，具体要求如下：</p><p>（1） ServiceAcccunt 名称：exam-sa；</p><p>（2）将该ServiceAccount 与上一题创建的ClusterRole 进行绑定绑定．</p><p>完成后使用该YAML 文件创建 ServiceAccount.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token punctuation">-</span>sa<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> role<span class="token punctuation">-</span>bind<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>sserviceaccount<span class="token key atrule">subjects</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token punctuation">-</span>sa<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> deployment<span class="token punctuation">-</span>clusterrole   <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第六套"><a href="#第六套" class="headerlink" title="第六套"></a>第六套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125215358715.png" alt="image-20221125215358715"></p><p>1．Kubelet 使用证书进行Kubernetes：API的认证，证书默认有效期为1年．请配置Kubelet 证书轮换，当证书即将过期时，将自动生成新的秘钥，并从Kubernetes·API申请新的证书.</p><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125215412005.png" alt="image-20221125215412005"></p><p>2．·为Kubernetes集群节点配置资源配置最小回收量，要求当节点可用内存不足1Gi或者可用文件系统空间不足10Gi时开始驱逐节点上的Pod．</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/kubelet/config.yaml<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>eviction-hard<span class="token operator">=</span>memory.available<span class="token operator">&lt;</span>1Gi,nodefs.available<span class="token operator">&lt;</span>10Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125215422503.png" alt="image-20221125215422503"></p><p>3．在master 节点／root目录下编写YAML 文件pod．yaml 创建 Pod，具体要求如下：</p><p>（1）Pod 名称：nginx；</p><p>（2）容器默认请求100M内存；</p><p>（3）容器最多请求200M内存．</p><p>完成后使用该YAML 文件创建Pod.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100M      <span class="token key atrule">limits</span><span class="token punctuation">:</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 200M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125220316951.png" alt="image-20221125220316951"></p><p>4．在master节点／root目录下编写YAML文件 replicaset．yaml 创建ReplicaSet．具体要求如下：</p><p>（1）ReplicaSet 名称：nginx；</p><p>（2）命名空间：default；</p><p>（3）副本数：3；</p><p>（4）镜像：nginx．</p><p>完成后使用该YAML 文件创建 ReplicaSet</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ReplicationController<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125220333728.png" alt="image-20221125220333728"></p><p>5．在master节点／root目录下编写YAML文件pod-live．yaml 创建Pod，具体要求如下：</p><p>（1）Pod 名称：liveness-exec；</p><p>（2）镜像：busybox；</p><p>（3）启动命令：／bin／sh-c·＂touch／tmp／healthy；sleep·30；rm-rf／tmp／healthy；</p><p>（3）在容器内执行命令“cat／tmp／healthy”来进行存活探测，每5秒执行一次．</p><p>完成后使用该YAML文件创建Pod.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness<span class="token punctuation">-</span>exec<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness<span class="token punctuation">-</span>exec<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy"</span><span class="token punctuation">]</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"cat /tmp/healthy"</span><span class="token punctuation">]</span>      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125220429559.png" alt="image-20221125220429559"></p><p>6．创建命名空间quota-example，在master节点／root目录下编写YAML 文件 quota．yaml 创建ResourceQuota，具体要求如下：</p><p>（1）ResourceQuota 名称：compute-resources；</p><p>（2）命名空间compute-resources 内所有Pod数量不超过4；</p><p>（3）命名空间compute—resources内所有容器内存申请总和不得超过1G；</p><p>（4）命名空间compute-resources 内所有内存限制不得超过2G； </p><p>（5）命名空间compute-resources内所有容器申请的CPU不得超过1；</p><p>（6）命名空间 compute-resources 内所有容器限制的CPU不得超过2．</p><p>完成后使用该YAML文件创建 ResourceQuota. </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1 <span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> compute<span class="token punctuation">-</span>resources  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> quota<span class="token punctuation">-</span>example<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hard</span><span class="token punctuation">:</span>    <span class="token key atrule">pods</span><span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token key atrule">requests.cpu</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">requests.memory</span><span class="token punctuation">:</span> 1Gi    <span class="token key atrule">limits.cpu</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">limits.memory</span><span class="token punctuation">:</span> 2Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221125224014752.png" alt="image-20221125224014752"></p><p>7．在master 节点／root目录下编写YAML 文件api．yaml扩展一个Kubernetes·API，具体 要求如下：</p><p>（1）API·Server名称：crontabs； </p><p>（2）作用域：整个集群．</p><p>完成后使用该YAML 文件创建 API-Server. </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apiextensions.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> CustomResourceDefinition<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> crontabs.stable.example.com<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">group</span><span class="token punctuation">:</span> stable.example.com  <span class="token key atrule">versions</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v1      <span class="token key atrule">served</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">schema</span><span class="token punctuation">:</span>        <span class="token key atrule">openAPIV3Schema</span><span class="token punctuation">:</span>          <span class="token key atrule">type</span><span class="token punctuation">:</span> object          <span class="token key atrule">properties</span><span class="token punctuation">:</span>            <span class="token key atrule">spec</span><span class="token punctuation">:</span>              <span class="token key atrule">type</span><span class="token punctuation">:</span> object              <span class="token key atrule">properties</span><span class="token punctuation">:</span>                <span class="token key atrule">cronSpec</span><span class="token punctuation">:</span>                  <span class="token key atrule">type</span><span class="token punctuation">:</span> string                <span class="token key atrule">image</span><span class="token punctuation">:</span>                  <span class="token key atrule">type</span><span class="token punctuation">:</span> string                <span class="token key atrule">replicas</span><span class="token punctuation">:</span>                  <span class="token key atrule">type</span><span class="token punctuation">:</span> integer  <span class="token key atrule">scope</span><span class="token punctuation">:</span> Namespaced  <span class="token key atrule">names</span><span class="token punctuation">:</span>    <span class="token key atrule">plural</span><span class="token punctuation">:</span> crontabs    <span class="token key atrule">singular</span><span class="token punctuation">:</span> crontab    <span class="token key atrule">kind</span><span class="token punctuation">:</span> CronTab    <span class="token key atrule">shortNames</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第七套</p><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126150625421.png" alt="image-20221126150625421"></p><p>1．·在master 节点／root目录下编写YAML文件创建Pod，具体要求如下：</p><p>（1）Pod名称：nginx；</p><p>（2）镜像：nginx</p><p>（3）挂载一个Volume，名称为cache-volume，将其／data目录挂载到宿主机／data目录 下。</p><p>完成后使用该YAML文件创建Pod。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>7<span class="token punctuation">-</span>1<span class="token punctuation">-</span>pod    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>volume    <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>       <span class="token key atrule">path</span><span class="token punctuation">:</span> /data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126150655449.png" alt="image-20221126150655449"></p><p>2.·在 master 节点/root 目录下编写 YAML 文件 deployment.yaml 创建 Deployment，具体要求如下：</p><p>（1）Deployment名称: nginx-deployment;</p><p>（2）镜像: nginx:latest;</p><p>（3）副本数： 2；</p><p>（4）标签: app: nginx;</p><p>（5）容器端口：80</p><p>完成后使用该 YAML 文件创建 Deployment.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>7<span class="token punctuation">-</span>2<span class="token punctuation">-</span>pod        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx<span class="token punctuation">:</span>latest        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126150726186.png" alt="image-20221126150726186"></p><p>3．在master节点／root目录下编写YAML文件scale．yaml为上一题的nginx-deployment配置Pod水平自动伸缩，具体要求如下：</p><p>（1）Pod 水平自动伸缩名称：scale；</p><p>（2）Pod最小副本数为1；</p><p>（3）Pod最大副本数为5；</p><p>（4）根据设定的CPU使用率（75％）动态的增加或者减少Pod·数量．</p><p>完成后使用该YAML文件创建Pod水平自动伸缩.</p><p><strong>###如果需要autoscale需给被监测pod添加requests资源声明，否则HPA读取不到CPU指标信息</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> autoscaling/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> HorizontalPodAutoscaler<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> scale<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">scaleTargetRef</span><span class="token punctuation">:</span>    <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment  <span class="token key atrule">minReplicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">maxReplicas</span><span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token key atrule">targetCPUUtilizationPercentage</span><span class="token punctuation">:</span> <span class="token number">75</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126164258383.png" alt="image-20221126164258383"></p><p>4．·在master节点／root目录下编写YAML文件quota．yaml创建命名空间和ResourceQuota， 具体要求如下：</p><p>（1）命名空间名称：quota-exam；</p><p>（2）ResourceQuota 名称：compute-resources; </p><p>（3）要求限制命名空间内Pod数量不超过4；</p><p>（4）所有容器内存申请总和不得超过1Gi；</p><p>（5）所有容器申请的CPU不得超过2000m。</p><p>完成后使用该YAML 文件创建命名空间和ResourceQuota </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1 <span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> quota<span class="token punctuation">-</span>exam<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> compute<span class="token punctuation">-</span>resources  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> quota<span class="token punctuation">-</span>exam<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hard</span><span class="token punctuation">:</span>    <span class="token key atrule">pods</span><span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token key atrule">limits.cpu</span><span class="token punctuation">:</span> 2000m    <span class="token key atrule">limits.memory</span><span class="token punctuation">:</span> 1Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126164323908.png" alt="image-20221126164323908"></p><p>5．·默认情况下，Pod能够使用集群节点全部可用计算资源，请配置集群为系统守护进程 kube-reserved 和 system-reserved 预留 500m·CPU、1Gi-memory和 1Gi-ephemeral-storage 计 算资源。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/kubelet/config.yaml<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>enforceNodeAllocatable:- podkubeReserved:   <span class="token comment">#配置kube预留资源</span>  cpu: 500m  memory: 1Gi  ephemeral-storage: 1GisystemReserved:   <span class="token comment">#配置系统预留资源</span>  cpu: 500m  memory: 1Gi  ephemeral-storage: 1Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126165842691.png" alt="image-20221126165842691"></p><p>6．·在master 节点／root目录下编写YAML 文件创建角色，具体要求如下：</p><p>（1）角色名称：exam；</p><p>（2）该角色拥有创建、删除和更新Pod的权限；</p><p>（3）该角色拥有查看、创建、更改和删除Deployment的权限。</p><p>完成后使用该YAML文件创建角色。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Deployment"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"watch"</span><span class="token punctuation">,</span><span class="token string">"create"</span><span class="token punctuation">,</span><span class="token string">"update"</span><span class="token punctuation">,</span><span class="token string">"delete"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126165922896.png" alt="image-20221126165922896"></p><p>7．在master和node节点安装NFS文件服务器，共享目录为／data／k8s／，然后在master节点／root目录下编写YAML文件 nfs-pv.yaml 创建PV，具体要求如下：</p><p>（1）PV名称：exma-pv；</p><p>（2）使用NFS 存储作为后端存储；</p><p>（3）存储空间为1Gi；</p><p>（4）访问模式为ReadWriteOnce；</p><p>（5）回收策略为Recyle。</p><p>完成后使用该YAML文件创建PV。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">mkdir <span class="token punctuation">-</span>p /nfs/datachmod <span class="token punctuation">-</span>R 777 /nfscat &lt;&lt;EOF<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> /etc/exports/nfs/data <span class="token important">*(rw</span><span class="token punctuation">,</span>no_root_squash<span class="token punctuation">,</span>sync)EOFexportfs <span class="token punctuation">-</span>rsystemctl restart rpcbind nfs<span class="token punctuation">-</span>server <span class="token important">&amp;&amp;</span> systemctl enable rpcbind nfs<span class="token punctuation">-</span>servershowmount <span class="token punctuation">-</span>e &lt;ip<span class="token punctuation">&gt;</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exma<span class="token punctuation">-</span>pv  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">pv</span><span class="token punctuation">:</span> exma<span class="token punctuation">-</span>pv<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span> 192.168.10.179    <span class="token key atrule">path</span><span class="token punctuation">:</span> /nfs/data/  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Recycle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第八套"><a href="#第八套" class="headerlink" title="第八套"></a>第八套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174216002.png" alt="image-20221126174216002"></p><p>1．修改集群配置参数，要求集群节点可用内存低于500Mi时，kubelet开始驱逐节点上的Pods。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/kubelet/config.yaml<span class="token builtin class-name">.</span><span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>eviction-hard<span class="token operator">=</span>memory.available<span class="token operator">&lt;</span>500M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174237608.png" alt="image-20221126174237608"></p><p>2．在master 节点／root目录下编写YAML文件pod．yaml创建Pod，具体要求如下：</p><p>（1）Pod名称：nginx；</p><p>（2）镜像：nginx：latest；</p><p>（3）以Guaranteed·QoS类运行；</p><p>（4）其requests值等于limits值．</p><p>完成后使用该YAML文件创建 Pod.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>qos    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx<span class="token punctuation">:</span>latest    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi      <span class="token key atrule">limits</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174259177.png" alt="image-20221126174259177"></p><p>3．在master 节点／root目录下编写YAML文件nginx-deployment．yaml 创建 Deployment，具体要求如下：</p><p>（1）Deployment 名称：nginx-deployment；</p><p>（2）镜像：nginx；</p><p>（3）副本数：2；</p><p>（4）网络：hostNetwork；</p><p>（5）容器端口：80。</p><p>完成后使用该YAML 文件创建 Deployment.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174349980.png" alt="image-20221126174349980"></p><p>4．在master节点／root目录下编写YAML文件hpa．yaml为上一题的Deployment 创建Pod 水平自动伸缩，具体要求如下：</p><p>（1）Pod 水平自动伸缩名称：frontend-scaler； </p><p>（2）副本数伸缩范围：3——5；</p><p>（3）期望每个Pod根据设定的CPU使用率50％动态的伸缩。</p><p>完成后使用该YAML文件创建 Pod水平自动伸缩。</p><p><strong>###如果需要autoscale需给被监测pod添加requests资源声明，否则HPA读取不到CPU指标信息</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> autoscaling/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> HorizontalPodAutoscaler<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> fronted<span class="token punctuation">-</span>scaler<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">scaleTargetRef</span><span class="token punctuation">:</span>    <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment  <span class="token key atrule">minReplicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">maxReplicas</span><span class="token punctuation">:</span> <span class="token number">7</span>  <span class="token key atrule">targetCPUUtilizationPercentage</span><span class="token punctuation">:</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174456008.png" alt="image-20221126174456008"></p><p>5．在master节点／root目录下编写YAML文件role．yaml创建角色，具体要求如下：</p><p>（1）角色名称：exam-reader；</p><p>（2）对default命名空间内的Pod 拥有get、watch、list、create、delete的权限；</p><p>（3）对default 命名空间内的Deploymeht拥有get、list的权限。</p><p>完成后使用该YAML文件创建角色。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token punctuation">-</span>reader<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Pod"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"watch"</span><span class="token punctuation">,</span><span class="token string">"list"</span><span class="token punctuation">,</span><span class="token string">"create"</span><span class="token punctuation">,</span><span class="token string">"list"</span><span class="token punctuation">]</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Deployment"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"list"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126174534894.png" alt="image-20221126174534894"></p><p>6．Kubernetes集群支持Pod优先级抢占，通过抢占式调度策略来实现同一个Node 节点内部的Pod对象抢占。在master 节点／root目录下编写YAML 文件schedule.yaml 创建一个抢 占式调度策略，具体要求如下：</p><p>（1）抢占式调度策略名称：high-scheduling； </p><p>（2）优先级为1000000；</p><p>（3）不要将该调度策略设置为默认优先调度策略。</p><p>完成后使用该YAML文件创建抢占式调度策略。”</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> scheduling.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PriorityClass<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> higi<span class="token punctuation">-</span>scheduling<span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token number">1000000</span><span class="token key atrule">globalDefault</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126210143357.png" alt="image-20221126210143357"></p><p>7．·在master节点／root目录下编写YAML文件部署 MySQL 服务，具体要求如下：</p><p>（1）Service 名称：myqsl；Deployment 名称：myqsl；</p><p>（2）镜像：mysql：5.7；</p><p>（3）数据库用户：root；密码：123456；</p><p>（4）挂载一个持久卷mysql—pv，拥有2GB的存储空间，路径为／mnt／data；</p><p>（5）以NodePort方式将3306端口对外暴露为33306．</p><p>完成后使用该YAML文件部署 MySQL服务.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pv<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /mnt/data  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 2Gi  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Retain <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pvc  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pvc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 2Gi<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/mysql<span class="token punctuation">:</span>v5.7        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_ROOT_PASSWORD          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"123456"</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>mnt            <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /mnt/data      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>mnt        <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>          <span class="token key atrule">claimName</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pvc<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>svc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">33306</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第九套"><a href="#第九套" class="headerlink" title="第九套"></a>第九套</h2><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126225859210.png" alt="image-20221126225859210"></p><p>1．·为master 节点打上“app＝exam”标签，并将其调度策略设置为PreferNoSchedule。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl label nodes k8s-master-node1 <span class="token assign-left variable">app</span><span class="token operator">=</span>examkubectl taint <span class="token function">node</span> k8s-master-node1 node-role.kubernetes.io/master<span class="token operator">=</span>:PreferNoSchedule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126225915790.png" alt="image-20221126225915790"></p><p>2．在master节点／root目录下编写YAML文件nginx．yaml 创建Pod，具体要求如下：</p><p>（1）Pod名称：nginx-pod；</p><p>（2）镜像：nginx；</p><p>（3）镜像拉取策略：IfNotPresent；</p><p>（4）启用进程命名空间共享．</p><p>完成后使用该YAML文件创建Pod.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">shareProcessNamespace</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126225948643.png" alt="image-20221126225948643"></p><p>3．在master节点／root目录下编写YAML文件nginx-deployment．yaml 创建 Deployment，</p><p>具体要求如下：</p><p>（1）Deployment 名称：nginx-deployment；</p><p>（2）Pod 名称：nginy-deployment，副本数：2；</p><p>（3）镜像：nginx；</p><p>（4）容器端口：80</p><p>完成后使用该YAML文件创建 Deployment.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126230004306.png" alt="image-20221126230004306"></p><p>4．在master节点／root目录下编写YAML文件service．yaml 创建Service，具体要求如下：</p><p>（1）Service 名称：exam-service；</p><p>（2）集群内部访问端口：80；</p><p>（3）使用TCP协议；</p><p>（4）服务类型：ClusterIP．</p><p>完成后使用该YAML 文件创建 Service.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token punctuation">-</span>service<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\26324\AppData\Roaming\Typora\typora-user-images\image-20221126230023743.png" alt="image-20221126230023743"></p><p>5．在master节点／root目录下编写YAML文件创建Pod并使用ConfigMap，具体要求如 下：</p><p>（1）Pod名称：exam；</p><p>（2）镜像：busybox；</p><p>（3）在数据卷里面使用ConfigMap，并设置变量“DB＿HOST＝localhost”和 “DB_PORT=3306”。</p><p>完成后使用该YAML文件创建Pod.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">data1</span><span class="token punctuation">:</span> <span class="token string">"localhost"</span>  <span class="token key atrule">data2</span><span class="token punctuation">:</span> <span class="token string">"3306"</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> exam<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> exam    <span class="token key atrule">image</span><span class="token punctuation">:</span> 192.168.10.131/library/busybox    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DB_HOST      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">key</span><span class="token punctuation">:</span> data1    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DB_PORT      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">key</span><span class="token punctuation">:</span> data2    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
